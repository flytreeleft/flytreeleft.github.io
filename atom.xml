<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>flytreeleft&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/e370abb148ebf2097dd1dd8e180e8f56</icon>
  <subtitle>Keep it simple, stupid!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://flytreeleft.github.io/"/>
  <updated>2019-10-07T15:53:09.793Z</updated>
  <id>https://flytreeleft.github.io/</id>
  
  <author>
    <name>flytreeleft</name>
    <email>flytreeleft@126.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JVM内存分析：线程死锁</title>
    <link href="https://flytreeleft.github.io/the-jvm-dump-analyse-for-the-thread-dead-lock/"/>
    <id>https://flytreeleft.github.io/the-jvm-dump-analyse-for-the-thread-dead-lock/</id>
    <published>2019-10-07T14:50:34.000Z</published>
    <updated>2019-10-07T15:53:09.793Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;提要&quot;&gt;&lt;a href=&quot;#提要&quot; class=&quot;headerlink&quot; title=&quot;提要&quot;&gt;&lt;/a&gt;提要&lt;/h2&gt;&lt;p&gt;线程转储可用于分析Java应用在某一运行时刻的内部线程的运行情况，包括线程数、线程状态（死锁、运行、等待等），并且可得到线程的执行轨迹，对于分析线程死锁十分有益。&lt;/p&gt;
&lt;p&gt;通过JDK内置的工具&lt;code&gt;jstack&lt;/code&gt;可转储Java线程：&lt;code&gt;sudo -u tomcat jstack -l &amp;lt;java_pid&amp;gt; &amp;gt; jstack.dump&lt;/code&gt;，注意，&lt;code&gt;&amp;lt;java_pid&amp;gt;&lt;/code&gt;为主进程ID，无法dump某个线程。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;获取Java线程ID：&lt;code&gt;ps aux | grep java&lt;/code&gt;；&lt;br&gt;需确保转储用户与线程用户相同，否则，易出现&lt;a href=&quot;https://stackoverflow.com/questions/26140182/running-jmap-getting-unable-to-open-socket-file#answer-35963059&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Unable to open socket file: target process not responding or HotSpot VM not loaded&lt;/a&gt;的问题；&lt;br&gt;当出现死锁时，dump操作可能失败，可以通过&lt;code&gt;kill -3 &amp;lt;java_pid&amp;gt;&lt;/code&gt;终止死锁（其不会杀死进程或线程！）；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;得到转储文件后，可将其上传到&lt;a href=&quot;http://fastthread.io/index.jsp&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;fastThread&lt;/a&gt;进行在线分析，该服务可提供直观的分析图表和相关报告。&lt;/p&gt;
&lt;p&gt;也可以下载IBM提供的工具&lt;a href=&quot;ftp://public.dhe.ibm.com/software/websphere/appserv/support/tools/jca/jca447.jar&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;IBM Thread and Monitor Dump Analyze&lt;/a&gt;，其同样提供图表分析功能，但整体上没有fastThread的直观。其启动命令为：&lt;code&gt;java -jar jca447.jar&lt;/code&gt;。&lt;br&gt;
    
    </summary>
    
      <category term="JVM内存分析" scheme="https://flytreeleft.github.io/categories/JVM%E5%86%85%E5%AD%98%E5%88%86%E6%9E%90/"/>
    
    
      <category term="线程死锁" scheme="https://flytreeleft.github.io/tags/%E7%BA%BF%E7%A8%8B%E6%AD%BB%E9%94%81/"/>
    
  </entry>
  
  <entry>
    <title>内存都去哪儿了</title>
    <link href="https://flytreeleft.github.io/the-jvm-dump-analyse-for-where-is-the-memory/"/>
    <id>https://flytreeleft.github.io/the-jvm-dump-analyse-for-where-is-the-memory/</id>
    <published>2019-10-05T13:41:47.000Z</published>
    <updated>2019-10-07T15:53:09.793Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;提要&quot;&gt;&lt;a href=&quot;#提要&quot; class=&quot;headerlink&quot; title=&quot;提要&quot;&gt;&lt;/a&gt;提要&lt;/h2&gt;&lt;p&gt;在开始分析之前先了解一下下面几个相关术语：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Shallow Heap&lt;/strong&gt;：对象自身占用的内存大小（包含基本数据类型），不包括它引用对象的大小；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Retained Heap&lt;/strong&gt;：&lt;strong&gt;Shallow Heap&lt;/strong&gt; + 所有直接或者间接引用对象占用的内存（即该对象被GC回收后，可以被回收的内存）；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;GC Root&lt;/strong&gt;：被堆外对象引用的对象；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dominator Tree&lt;/strong&gt;：以支配树方式描述的对象引用关系；&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;有关JVM内存转储方式的说明见&lt;a href=&quot;/the-jvm-dump-analyse-for-tomcat-memory-leak/&quot;&gt;JVM内存分析：Tomcat内存泄漏&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;案例分析&quot;&gt;&lt;a href=&quot;#案例分析&quot; class=&quot;headerlink&quot; title=&quot;案例分析&quot;&gt;&lt;/a&gt;案例分析&lt;/h2&gt;&lt;p&gt;最近服务器的内存又在狂飙了，网关响应缓慢，Jenkins完成构建需要长达2个多小时。到底疯狂到什么程度呢？用&lt;code&gt;htop&lt;/code&gt;命令看看：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/jvm-dump/where-is-the-memory/jvm-no-gc-for-high-memory-usage-analysis-via-htop.png&quot; alt&gt;&lt;br&gt;
    
    </summary>
    
      <category term="JVM内存分析" scheme="https://flytreeleft.github.io/categories/JVM%E5%86%85%E5%AD%98%E5%88%86%E6%9E%90/"/>
    
    
      <category term="内存溢出" scheme="https://flytreeleft.github.io/tags/%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA/"/>
    
  </entry>
  
  <entry>
    <title>数据库连接池耗尽</title>
    <link href="https://flytreeleft.github.io/the-jvm-dump-analyse-for-connection-pool-exhausted/"/>
    <id>https://flytreeleft.github.io/the-jvm-dump-analyse-for-connection-pool-exhausted/</id>
    <published>2019-10-05T12:40:57.000Z</published>
    <updated>2019-10-07T15:53:09.793Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;提要&quot;&gt;&lt;a href=&quot;#提要&quot; class=&quot;headerlink&quot; title=&quot;提要&quot;&gt;&lt;/a&gt;提要&lt;/h2&gt;&lt;p&gt;由于数据库连接十分耗时，采取&lt;strong&gt;即需即连&lt;/strong&gt;的方式会导致应用响应缓慢，因此，在Java应用中均采用&lt;strong&gt;数据库连接池&lt;/strong&gt;统一维护一定数量的&lt;code&gt;Connection&lt;/code&gt;对象，连接池中的&lt;code&gt;Connection&lt;/code&gt;均保持与数据库的长连接，这样，该连接将随时可用，从而提高应用响应和处理速度。&lt;/p&gt;
&lt;p&gt;但是，在普遍的使用不当的情形中，最多的问题便是没有及时&lt;code&gt;释放连接&lt;/code&gt;，这里的释放是指将&lt;code&gt;Connection&lt;/code&gt;对象归还连接池。若连接未被释放，则连接池将被很快耗尽（Exhausted），从而无法提供新的连接，最终导致应用不能进行数据库操作，并在尝试获取新的连接时出现以下异常：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Caused by: org.hibernate.exception.GenericJDBCException: Could not open connection&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:&lt;span class=&quot;number&quot;&gt;54&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:&lt;span class=&quot;number&quot;&gt;125&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:&lt;span class=&quot;number&quot;&gt;110&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.obtainConnection(LogicalConnectionImpl.java:&lt;span class=&quot;number&quot;&gt;221&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.getConnection(LogicalConnectionImpl.java:&lt;span class=&quot;number&quot;&gt;157&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at org.hibernate.internal.SessionImpl.connection(SessionImpl.java:&lt;span class=&quot;number&quot;&gt;550&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at org.springframework.orm.hibernate4.HibernateTransactionManager.doBegin(HibernateTransactionManager.java:&lt;span class=&quot;number&quot;&gt;426&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ... &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt; more&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Caused by: org.apache.commons.dbcp.SQLNestedException: Cannot get a connection, pool error Timeout waiting &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; idle object&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at org.apache.commons.dbcp.PoolingDataSource.getConnection(PoolingDataSource.java:&lt;span class=&quot;number&quot;&gt;114&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at org.apache.commons.dbcp.BasicDataSource.getConnection(BasicDataSource.java:&lt;span class=&quot;number&quot;&gt;1044&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at org.hibernate.service.jdbc.connections.internal.DatasourceConnectionProviderImpl.getConnection(DatasourceConnectionProviderImpl.java:&lt;span class=&quot;number&quot;&gt;141&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at org.hibernate.internal.AbstractSessionImpl$NonContextualJdbcConnectionAccess.obtainConnection(AbstractSessionImpl.java:&lt;span class=&quot;number&quot;&gt;292&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.obtainConnection(LogicalConnectionImpl.java:&lt;span class=&quot;number&quot;&gt;214&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ... &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt; more&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Caused by: java.util.NoSuchElementException: Timeout waiting &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; idle object&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at org.apache.commons.pool.impl.GenericObjectPool.borrowObject(GenericObjectPool.java:&lt;span class=&quot;number&quot;&gt;1174&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at org.apache.commons.dbcp.PoolingDataSource.getConnection(PoolingDataSource.java:&lt;span class=&quot;number&quot;&gt;106&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ... &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt; more&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="JVM内存分析" scheme="https://flytreeleft.github.io/categories/JVM%E5%86%85%E5%AD%98%E5%88%86%E6%9E%90/"/>
    
    
      <category term="连接池耗尽" scheme="https://flytreeleft.github.io/tags/%E8%BF%9E%E6%8E%A5%E6%B1%A0%E8%80%97%E5%B0%BD/"/>
    
      <category term="Connection pool exhausted" scheme="https://flytreeleft.github.io/tags/Connection-pool-exhausted/"/>
    
  </entry>
  
  <entry>
    <title>JVM内存分析：Tomcat内存泄漏</title>
    <link href="https://flytreeleft.github.io/the-jvm-dump-analyse-for-tomcat-memory-leak/"/>
    <id>https://flytreeleft.github.io/the-jvm-dump-analyse-for-tomcat-memory-leak/</id>
    <published>2019-10-04T10:07:06.000Z</published>
    <updated>2019-10-07T15:53:09.793Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;提要&quot;&gt;&lt;a href=&quot;#提要&quot; class=&quot;headerlink&quot; title=&quot;提要&quot;&gt;&lt;/a&gt;提要&lt;/h2&gt;&lt;p&gt;通过内存转储可对Java应用内各对象的内存使用情况进行分析，从而找出过度消耗内存或无法及时释放的对象，进而为异常修复以及提升应用加载速度和运行性能提供帮助。&lt;/p&gt;
&lt;p&gt;内存转储使用JDK自带的工具&lt;code&gt;jmap&lt;/code&gt;（&lt;code&gt;sudo -u tomcat jmap -dump:format=b,file=heap-dump.bin &amp;lt;java_pid&amp;gt;&lt;/code&gt;）将应用内存以二进制格式转储到&lt;code&gt;heap-dump.bin&lt;/code&gt;中。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;需确保转储用户与线程用户相同，否则会出现&lt;a href=&quot;https://stackoverflow.com/questions/26140182/running-jmap-getting-unable-to-open-socket-file#answer-35963059&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Unable to open socket file: target process not responding or HotSpot VM not loaded&lt;/a&gt;的问题；&lt;/p&gt;
&lt;p&gt;转储文件可能会被放到临时目录中，该目录会在Tomcat重启时被删除，所以，一定要在重启前将转储文件转移到安全位置；&lt;/p&gt;
&lt;p&gt;转储的文件一般为GB级，可通过命令&lt;code&gt;xz -k heap-dump.bin&lt;/code&gt;进行高强度压缩，得到压缩文件&lt;code&gt;heap-dump.bin.xz&lt;/code&gt;。解压使用命令&lt;code&gt;unxz -k heap-dump.bin.xz&lt;/code&gt;，其中，&lt;code&gt;-k&lt;/code&gt;选项均表示保留原文件，否则原文件将会被删除；&lt;br&gt;
    
    </summary>
    
      <category term="JVM内存分析" scheme="https://flytreeleft.github.io/categories/JVM%E5%86%85%E5%AD%98%E5%88%86%E6%9E%90/"/>
    
    
      <category term="内存泄漏" scheme="https://flytreeleft.github.io/tags/%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>算法分析：求解最长公共子序列</title>
    <link href="https://flytreeleft.github.io/algorithm-finding-the-longest-common-sequence/"/>
    <id>https://flytreeleft.github.io/algorithm-finding-the-longest-common-sequence/</id>
    <published>2018-10-06T04:35:43.000Z</published>
    <updated>2019-10-07T15:53:09.793Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;算法分析系列文章中的代码可被任何人无偿使用于任何场景且无需注明来源也不必在使用前征得本文作者同意。&lt;/p&gt;
&lt;p&gt;算法分析系列文章旨在传播准确、完整、简洁、易懂、规范的代码实现，并传授基本的编程思想和良好的编码习惯与技巧。&lt;/p&gt;
&lt;p&gt;若文章中的代码存在问题或逻辑错误，请通过邮件等形式（见文章结尾）告知于本文作者以便及时修正错误或改进代码。&lt;/p&gt;
&lt;p&gt;算法系列文章不可避免地会参考和学习众多网友的成果，在行文风格、内容及求解思路上也会进行借鉴，如有侵权嫌疑，请联系本文作者。&lt;/p&gt;
&lt;p&gt;PS：若为转载该文章，请务必注明来源，本站点欢迎大家转载。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;p&gt;如果序列 &lt;script type=&quot;math/tex&quot;&gt;S_1&lt;/script&gt; 中的所有元素按照其在 &lt;script type=&quot;math/tex&quot;&gt;S_1&lt;/script&gt; 中的出现顺序依次出现在另一个序列 &lt;script type=&quot;math/tex&quot;&gt;S_2&lt;/script&gt; 中，则称 &lt;script type=&quot;math/tex&quot;&gt;S_1&lt;/script&gt; 为 &lt;script type=&quot;math/tex&quot;&gt;S_2&lt;/script&gt; 的&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%AD%90%E5%BA%8F%E5%88%97&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;子序列&lt;/a&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;子序列不要求位置的连续性（即，元素相邻），只要相对顺序不变即可。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;若给定一个序列集合（数量大于或等于2，但通常为两个序列），则这些序列所共同拥有的子序列，称为&lt;strong&gt;公共子序列&lt;/strong&gt;。而在这些公共子序列中长度最长的子序列则称为该序列集合的&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;最长公共子序列&lt;/a&gt;（Longest Common Sequence, LCS）。&lt;/p&gt;
&lt;p&gt;本例所要求的便是求解任意两个序列的最长公共子序列（可能存在多个不同的序列），并打印其长度及其其中的任意一个序列。&lt;br&gt;
    
    </summary>
    
      <category term="算法分析" scheme="https://flytreeleft.github.io/categories/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/"/>
    
    
      <category term="动态规划" scheme="https://flytreeleft.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="最长公共子序列" scheme="https://flytreeleft.github.io/tags/%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>算法分析：求解最大子段和</title>
    <link href="https://flytreeleft.github.io/algorithm-calculating-maximum-interval-sum/"/>
    <id>https://flytreeleft.github.io/algorithm-calculating-maximum-interval-sum/</id>
    <published>2018-10-05T03:19:00.000Z</published>
    <updated>2019-10-07T15:53:09.793Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;算法分析系列文章中的代码可被任何人无偿使用于任何场景且无需注明来源也不必在使用前征得本文作者同意。&lt;/p&gt;
&lt;p&gt;算法分析系列文章旨在传播准确、完整、简洁、易懂、规范的代码实现，并传授基本的编程思想和良好的编码习惯与技巧。&lt;/p&gt;
&lt;p&gt;若文章中的代码存在问题或逻辑错误，请通过邮件等形式（见文章结尾）告知于本文作者以便及时修正错误或改进代码。&lt;/p&gt;
&lt;p&gt;算法系列文章不可避免地会参考和学习众多网友的成果，在行文风格、内容及求解思路上也会进行借鉴，如有侵权嫌疑，请联系本文作者。&lt;/p&gt;
&lt;p&gt;PS：若为转载该文章，请务必注明来源，本站点欢迎大家转载。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;p&gt;给定一个&lt;strong&gt;整数&lt;/strong&gt;（正负数不限）序列 $a_1, a_2, a_3, …, a_n$ ，从该序列中选取任意&lt;strong&gt;相邻&lt;/strong&gt;的一段求和（简称为「子段和」），求解该序列的&lt;strong&gt;最大子段和&lt;/strong&gt;。注：若整个序列的所有元素均为负数，则其最大子段和固定为0。&lt;/p&gt;
&lt;p&gt;例如，序列&lt;code&gt;[64, -24, 88, -39, -54, 16]&lt;/code&gt;的最大子段和为&lt;code&gt;128&lt;/code&gt;（= &lt;code&gt;64 + (-24) + 88&lt;/code&gt;）。&lt;br&gt;
    
    </summary>
    
      <category term="算法分析" scheme="https://flytreeleft.github.io/categories/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/"/>
    
    
      <category term="动态规划" scheme="https://flytreeleft.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="最大子段和" scheme="https://flytreeleft.github.io/tags/%E6%9C%80%E5%A4%A7%E5%AD%90%E6%AE%B5%E5%92%8C/"/>
    
      <category term="分治法" scheme="https://flytreeleft.github.io/tags/%E5%88%86%E6%B2%BB%E6%B3%95/"/>
    
      <category term="穷举法" scheme="https://flytreeleft.github.io/tags/%E7%A9%B7%E4%B8%BE%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法分析：求解斐波那契数列</title>
    <link href="https://flytreeleft.github.io/algorithm-calculating-fibonacci-numbers/"/>
    <id>https://flytreeleft.github.io/algorithm-calculating-fibonacci-numbers/</id>
    <published>2018-10-04T05:58:17.000Z</published>
    <updated>2019-10-07T15:53:09.793Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;算法分析系列文章中的代码可被任何人无偿使用于任何场景且无需注明来源也不必在使用前征得本文作者同意。&lt;/p&gt;
&lt;p&gt;算法分析系列文章旨在传播准确、完整、简洁、易懂、规范的代码实现，并传授基本的编程思想和良好的编码习惯与技巧。&lt;/p&gt;
&lt;p&gt;若文章中的代码存在问题或逻辑错误，请通过邮件等形式（见文章结尾）告知于本文作者以便及时修正错误或改进代码。&lt;/p&gt;
&lt;p&gt;算法系列文章不可避免地会参考和学习众多网友的成果，在行文风格、内容及求解思路上也会进行借鉴，如有侵权嫌疑，请联系本文作者。&lt;/p&gt;
&lt;p&gt;PS：若为转载该文章，请务必注明来源，本站点欢迎大家转载。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;p&gt;从0和1开始，之后的每一个数均为前两个数的和，这样性质的数依次排列，便称为&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;斐波那契数列&lt;/a&gt;。即形成如下数列形式：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, ...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;用数学公式表示该数列即为：&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;
F(n) = \begin{cases}
0,                      &amp; n = 0 \\
1,                      &amp; n = 1 \\
F(n - 1) + F(n - 2),    &amp; n &gt;= 2
\end{cases}&lt;/script&gt;&lt;p&gt;本案例所要解决的就是：给定一个整数&lt;code&gt;n&lt;/code&gt;，求解斐波那契数列中第&lt;code&gt;n&lt;/code&gt;项的数值。注意，&lt;code&gt;0&lt;/code&gt;表示第零项，而不是第一项。&lt;br&gt;
    
    </summary>
    
      <category term="算法分析" scheme="https://flytreeleft.github.io/categories/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/"/>
    
    
      <category term="动态规划" scheme="https://flytreeleft.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="斐波那契" scheme="https://flytreeleft.github.io/tags/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91/"/>
    
      <category term="Fibonacci" scheme="https://flytreeleft.github.io/tags/Fibonacci/"/>
    
  </entry>
  
  <entry>
    <title>算法分析：分治法求解给定集合中的众数及其重数</title>
    <link href="https://flytreeleft.github.io/algorithm-using-divide-and-conquer-method-to-find-the-mode-in-a-set/"/>
    <id>https://flytreeleft.github.io/algorithm-using-divide-and-conquer-method-to-find-the-mode-in-a-set/</id>
    <published>2018-09-19T13:38:34.000Z</published>
    <updated>2019-10-07T15:53:09.793Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;算法分析系列文章中的代码可被任何人无偿使用于任何场景且无需注明来源也不必在使用前征得本文作者同意。&lt;/p&gt;
&lt;p&gt;算法分析系列文章旨在传播准确、完整、简洁、易懂、规范的代码实现，并传授基本的编程思想和良好的编码习惯与技巧。&lt;/p&gt;
&lt;p&gt;若文章中的代码存在问题或逻辑错误，请通过邮件等形式（见文章结尾）告知于本文作者以便及时修正错误或改进代码。&lt;/p&gt;
&lt;p&gt;算法系列文章不可避免地会参考和学习众多网友的成果，在行文风格、内容及求解思路上也会进行借鉴，如有侵权嫌疑，请联系本文作者。&lt;/p&gt;
&lt;p&gt;PS：若为转载该文章，请务必注明来源，本站点欢迎大家转载。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;p&gt;给定含有n个元素的多重集合&lt;code&gt;S&lt;/code&gt;，每个元素在&lt;code&gt;S&lt;/code&gt;中&lt;u&gt;出现的次数&lt;/u&gt;称为该元素的&lt;strong&gt;重数&lt;/strong&gt;。多重集&lt;code&gt;S&lt;/code&gt;中&lt;u&gt;重数最大的元素&lt;/u&gt;称为&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E4%BC%97%E6%95%B0_(%E6%95%B0%E5%AD%A6)&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;众数&lt;/a&gt;（&lt;strong&gt;mode&lt;/strong&gt;）。&lt;/p&gt;
&lt;p&gt;例如，&lt;code&gt;S={1，2，2，2，3，5}&lt;/code&gt;，则，多重集&lt;code&gt;S&lt;/code&gt;的众数是&lt;code&gt;2&lt;/code&gt;，其重数为&lt;code&gt;3&lt;/code&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注：众数可能存在多个。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本案例要求采用&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%88%86%E6%B2%BB%E6%B3%95&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;分治法&lt;/a&gt;求解给定集合中的众数及其重数，存在多个众数时选择第一个即可。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;分治法，即，把一个复杂的问题分成两个或更多的相同或相似的子问题，直到最后子问题可以简单的直接求解，原问题的解即子问题的解的合并。（引用自「维基百科」）&lt;br&gt;
    
    </summary>
    
      <category term="算法分析" scheme="https://flytreeleft.github.io/categories/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/"/>
    
    
      <category term="分治法" scheme="https://flytreeleft.github.io/tags/%E5%88%86%E6%B2%BB%E6%B3%95/"/>
    
      <category term="众数" scheme="https://flytreeleft.github.io/tags/%E4%BC%97%E6%95%B0/"/>
    
      <category term="重数" scheme="https://flytreeleft.github.io/tags/%E9%87%8D%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>记一次惊心动魄的CentOS系统升级经历</title>
    <link href="https://flytreeleft.github.io/a-horrible-os-upgrading-for-centos/"/>
    <id>https://flytreeleft.github.io/a-horrible-os-upgrading-for-centos/</id>
    <published>2018-02-15T01:47:42.000Z</published>
    <updated>2019-10-07T15:53:09.793Z</updated>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;How-to-use-yum-history-to-roll-back-an-update&quot;&gt;&lt;a href=&quot;#How-to-use-yum-history-to-roll-back-an-update&quot; class=&quot;headerlink&quot; title=&quot;Ho
      
    
    </summary>
    
      <category term="运维管理" scheme="https://flytreeleft.github.io/categories/%E8%BF%90%E7%BB%B4%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="CentOS" scheme="https://flytreeleft.github.io/tags/CentOS/"/>
    
      <category term="系统升级" scheme="https://flytreeleft.github.io/tags/%E7%B3%BB%E7%BB%9F%E5%8D%87%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>Nginx特例场景配置</title>
    <link href="https://flytreeleft.github.io/the-special-case-configuration-of-nginx/"/>
    <id>https://flytreeleft.github.io/the-special-case-configuration-of-nginx/</id>
    <published>2018-02-05T12:30:47.000Z</published>
    <updated>2019-10-07T15:53:09.793Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文所使用的相关代码片段可从 &lt;a href=&quot;https://github.com/flytreeleft/docker-nginx-gateway&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/flytreeleft/docker-nginx-gateway&lt;/a&gt; 得到完整内容。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Nginx随机展示自定义错误页面&quot;&gt;&lt;a href=&quot;#Nginx随机展示自定义错误页面&quot; class=&quot;headerlink&quot; title=&quot;Nginx随机展示自定义错误页面&quot;&gt;&lt;/a&gt;Nginx随机展示自定义错误页面&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Source code: &lt;a href=&quot;https://github.com/flytreeleft/docker-nginx-gateway/tree/master/config/error-pages&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/flytreeleft/docker-nginx-gateway/tree/master/config/error-pages&lt;/a&gt;&lt;br&gt;Custom error pages: &lt;a href=&quot;https://github.com/flytreeleft/docker-nginx-gateway/tree/master/examples/epage.d/all&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/flytreeleft/docker-nginx-gateway/tree/master/examples/epage.d/all&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;关键字&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;随机展示多个错误页面&lt;/li&gt;
&lt;li&gt;Nginx自定义错误页面&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在访问HTTP站点时最容易出现的错误就是404，于是就有许多非常有个性的404错误页面。而为我们自己的站点放置一些简洁、清爽的错误页面，在资源再利用的前提下，也将为我们自身增加不少好感和亲和力。&lt;/p&gt;
&lt;p&gt;这里将要介绍的便是如何为我们的站点配置自定义错误页面，并同时支持为相同错误随机展示不同的错误页面。&lt;/p&gt;
    
    </summary>
    
      <category term="运维管理" scheme="https://flytreeleft.github.io/categories/%E8%BF%90%E7%BB%B4%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="Nginx配置" scheme="https://flytreeleft.github.io/tags/Nginx%E9%85%8D%E7%BD%AE/"/>
    
      <category term="Nginx over Squid" scheme="https://flytreeleft.github.io/tags/Nginx-over-Squid/"/>
    
      <category term="Nginx防火墙穿透" scheme="https://flytreeleft.github.io/tags/Nginx%E9%98%B2%E7%81%AB%E5%A2%99%E7%A9%BF%E9%80%8F/"/>
    
      <category term="HTTPS代理HTTP资源" scheme="https://flytreeleft.github.io/tags/HTTPS%E4%BB%A3%E7%90%86HTTP%E8%B5%84%E6%BA%90/"/>
    
      <category term="Nginx自定义错误页面" scheme="https://flytreeleft.github.io/tags/Nginx%E8%87%AA%E5%AE%9A%E4%B9%89%E9%94%99%E8%AF%AF%E9%A1%B5%E9%9D%A2/"/>
    
  </entry>
  
  <entry>
    <title>未来社会形态畅想</title>
    <link href="https://flytreeleft.github.io/the-future-social-formation/"/>
    <id>https://flytreeleft.github.io/the-future-social-formation/</id>
    <published>2017-12-10T05:49:57.000Z</published>
    <updated>2019-10-07T15:53:09.793Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;The post isn’t finished yet, it will be updated anytime!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;无现金社会&quot;&gt;&lt;a href=&quot;#无现金社会&quot; class=&quot;headerlink&quot; title=&quot;无现金社会&quot;&gt;&lt;/a&gt;无现金社会&lt;/h2&gt;&lt;p&gt;提要：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;比特币、比特交易网络&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.ethereum.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;以太坊&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.iotachina.com/what-is-iota&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;IOTA&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.iotachina.com/ruhezhaohuiiotayue.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;如何找回IOTA余额&lt;/a&gt;：可以从中了解转账机制与流程&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="社会形态" scheme="https://flytreeleft.github.io/categories/%E7%A4%BE%E4%BC%9A%E5%BD%A2%E6%80%81/"/>
    
      <category term="未来世界" scheme="https://flytreeleft.github.io/categories/%E7%A4%BE%E4%BC%9A%E5%BD%A2%E6%80%81/%E6%9C%AA%E6%9D%A5%E4%B8%96%E7%95%8C/"/>
    
    
      <category term="无现金社会" scheme="https://flytreeleft.github.io/tags/%E6%97%A0%E7%8E%B0%E9%87%91%E7%A4%BE%E4%BC%9A/"/>
    
      <category term="无中心化" scheme="https://flytreeleft.github.io/tags/%E6%97%A0%E4%B8%AD%E5%BF%83%E5%8C%96/"/>
    
      <category term="万物互联" scheme="https://flytreeleft.github.io/tags/%E4%B8%87%E7%89%A9%E4%BA%92%E8%81%94/"/>
    
  </entry>
  
  <entry>
    <title>作恶行为清单</title>
    <link href="https://flytreeleft.github.io/the-evil-behaviors/"/>
    <id>https://flytreeleft.github.io/the-evil-behaviors/</id>
    <published>2017-12-04T13:50:19.000Z</published>
    <updated>2019-10-07T15:53:09.793Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;列举日常和网络中所发现的软件、应用、服务等的「作恶」行为，将其永久钉在「耻辱柱」上。有条件的或有候选方案的，应主动弃用之！&lt;br&gt;坚持开放、坚持自由。点击下载&lt;a href=&quot;http://mirror.lihnidos.org/GNU/savannah/blug/fsfs-zh/fsfs-zh.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;自由软件自由社会.pdf&lt;/a&gt;&lt;br&gt;就事论事，不针对个人、企业、平台，挖掘现象本质，努力尝试寻找更优方案&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;为逼迫用户使用客户端而阉割Web端的基本功能&quot;&gt;&lt;a href=&quot;#为逼迫用户使用客户端而阉割Web端的基本功能&quot; class=&quot;headerlink&quot; title=&quot;为逼迫用户使用客户端而阉割Web端的基本功能&quot;&gt;&lt;/a&gt;为逼迫用户使用客户端而阉割Web端的基本功能&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;案例： &lt;a href=&quot;https://2.taobao.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;闲鱼&lt;/a&gt;Web端隐藏搜索框&lt;/li&gt;
&lt;li&gt;来源： &lt;a href=&quot;https://www.appinn.com/xianyu-search-box/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.appinn.com/xianyu-search-box/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;评语： 若欲达KPI，必先「中二自宫」
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>软件开发最佳实践</title>
    <link href="https://flytreeleft.github.io/the-better-software-development-practice/"/>
    <id>https://flytreeleft.github.io/the-better-software-development-practice/</id>
    <published>2017-12-04T07:32:07.000Z</published>
    <updated>2019-10-07T15:53:09.793Z</updated>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;任何&lt;strong&gt;局部优化&lt;/strong&gt;都是在浪费生命&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;不要仅凭感觉去做性能和代码优化或者是重构代码，一定要&lt;u&gt;以性能测试和监控分析结果为依据&lt;/u&gt;，重点优化和改进关键代码和影响常用功能的代码。&lt;/p&gt;
&lt;p&gt;需要认识到和牢记的是，局部的小改进对业务整体而言是毫无意义的，只有从全局角度所做的改进才是可感知且有价值的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;不要原地打转：开发工作不要阻塞在单一技术点上，以完成业务功能为首要目标，不影响整体架构的技术难点可利用空闲时间解决&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;出现任何问题都始终保持&lt;strong&gt;就事论事&lt;/strong&gt;的态度，不要带有个人情绪，不要在未查明根本原因的情况下将问题归咎于个人能力、品行或态度，应优先考虑提升项目管理、工作分配、人员激励、运维管理等制度和服务&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="开发规范" scheme="https://flytreeleft.github.io/categories/%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/"/>
    
    
  </entry>
  
  <entry>
    <title>软件开发行为准则</title>
    <link href="https://flytreeleft.github.io/the-software-development-criterion/"/>
    <id>https://flytreeleft.github.io/the-software-development-criterion/</id>
    <published>2017-12-04T05:06:31.000Z</published>
    <updated>2019-10-07T15:53:09.793Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;The post isn’t finished yet, it will be updated anytime!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;谨慎对待用户隐私&quot;&gt;&lt;a href=&quot;#谨慎对待用户隐私&quot; class=&quot;headerlink&quot; title=&quot;谨慎对待用户隐私&quot;&gt;&lt;/a&gt;谨慎对待用户隐私&lt;/h2&gt;&lt;p&gt;提要：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不是仅用户确认后的数据才算是「用户隐私」，任何与用户相关的数据都应该「默认」视为用户隐私，&lt;u&gt;不需要任何形式的确认&lt;/u&gt;，&lt;br&gt;而只有经过用户确认和同意的数据方可用作其他用途，且前提必须是明确告知数据为何要做此用途，以及将被如何利用、涉及哪些风险等&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="开发规范" scheme="https://flytreeleft.github.io/categories/%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/"/>
    
      <category term="职业道德" scheme="https://flytreeleft.github.io/categories/%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/%E8%81%8C%E4%B8%9A%E9%81%93%E5%BE%B7/"/>
    
    
      <category term="隐私" scheme="https://flytreeleft.github.io/tags/%E9%9A%90%E7%A7%81/"/>
    
  </entry>
  
  <entry>
    <title>如何突破自己的瓶颈？</title>
    <link href="https://flytreeleft.github.io/how-to-break-out-of-your-limit/"/>
    <id>https://flytreeleft.github.io/how-to-break-out-of-your-limit/</id>
    <published>2017-12-03T03:13:03.000Z</published>
    <updated>2019-10-07T15:53:09.793Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;The post isn’t finished yet, it will be updated anytime!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;以旁观者角度审视自己&quot;&gt;&lt;a href=&quot;#以旁观者角度审视自己&quot; class=&quot;headerlink&quot; title=&quot;以旁观者角度审视自己&quot;&gt;&lt;/a&gt;以旁观者角度审视自己&lt;/h2&gt;&lt;p&gt;提要：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;勇敢面对自己，正视自己的缺点&lt;/li&gt;
&lt;li&gt;客观分析自己的好的、坏的甚至是邪恶的想法，不好的想法切不可影响到他人，需要自我消化&lt;/li&gt;
&lt;li&gt;人无完人，对于非理性情绪不要过分压抑，在不影响他人的情况下采取各种积极或消极的方式去释放这些情绪&lt;ul&gt;
&lt;li&gt;消极的释放方式所要达到的目的是推翻重建，进入全新的境界，从而从另一个视角看待原来的情绪和行为&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="自我剖析" scheme="https://flytreeleft.github.io/categories/%E8%87%AA%E6%88%91%E5%89%96%E6%9E%90/"/>
    
      <category term="人性探索" scheme="https://flytreeleft.github.io/categories/%E8%87%AA%E6%88%91%E5%89%96%E6%9E%90/%E4%BA%BA%E6%80%A7%E6%8E%A2%E7%B4%A2/"/>
    
    
      <category term="自我" scheme="https://flytreeleft.github.io/tags/%E8%87%AA%E6%88%91/"/>
    
      <category term="静心" scheme="https://flytreeleft.github.io/tags/%E9%9D%99%E5%BF%83/"/>
    
      <category term="优越感" scheme="https://flytreeleft.github.io/tags/%E4%BC%98%E8%B6%8A%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>Git使用案例</title>
    <link href="https://flytreeleft.github.io/git-usage-cases/"/>
    <id>https://flytreeleft.github.io/git-usage-cases/</id>
    <published>2017-05-28T14:24:15.000Z</published>
    <updated>2019-10-07T15:53:09.793Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;拆分子目录到新仓库&quot;&gt;&lt;a href=&quot;#拆分子目录到新仓库&quot; class=&quot;headerlink&quot; title=&quot;拆分子目录到新仓库&quot;&gt;&lt;/a&gt;拆分子目录到新仓库&lt;/h2&gt;&lt;h3 id=&quot;场景&quot;&gt;&lt;a href=&quot;#场景&quot; class=&quot;headerlink&quot; title=&quot;场景&quot;&gt;&lt;/a&gt;场景&lt;/h3&gt;&lt;p&gt;通常为便于项目开发和调试，开发前期会将多个组件放在同一仓库中，而当各个组件的功能结构和代码逐渐区域稳定后，&lt;br&gt;便需要将其拆分出来进行独立开发和管理，以便于与其他项目共享组件。&lt;/p&gt;
&lt;p&gt;此时，不仅需要将组件所在目录内的代码全部拆分到单独的仓库，同时，还需要确保历史记录能够完整保留。&lt;/p&gt;
    
    </summary>
    
      <category term="开发工具" scheme="https://flytreeleft.github.io/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="git" scheme="https://flytreeleft.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Hello world!</title>
    <link href="https://flytreeleft.github.io/hello-world/"/>
    <id>https://flytreeleft.github.io/hello-world/</id>
    <published>2017-05-14T10:44:19.000Z</published>
    <updated>2019-10-07T15:53:09.793Z</updated>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;Hello world!&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;alert(&lt;span class=&quot;string&quot;&gt;&#39;Hello world!&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
