{"pages":[{"title":"About me","permalink":"https://flytreeleft.github.io/about/index.html","text":"Nothing more!"},{"title":"Categories","permalink":"https://flytreeleft.github.io/categories/index.html","text":""},{"title":"Simple words for me and you","permalink":"https://flytreeleft.github.io/quotes/index.html","text":"There is no retribution only cause and result.这世间没有「报应」，只有「因果」。 The other’s success isn’t yours, but failure will be.成功者的成功不会是你的成功，失败者的失败必然是你的失败。"},{"title":"Tags","permalink":"https://flytreeleft.github.io/tags/index.html","text":""}],"posts":[{"title":"Nginx特例场景配置","permalink":"https://flytreeleft.github.io/the-special-case-configuration-of-nginx/","text":"Nginx代理第三方http站点静态资源文件关键字： HTTPS反向代理HTTP静态资源 单页面Markdown编写与渲染方案 Nginx反向代理重定向拦截处理 这几天为部门搭建好了Maven仓库，为了便于指导部门同事能够准确配置并启用私有仓库，然后就打算写一份使用说明文档。 我不太喜欢写Word，也好几年几乎没用过了，一般都是直接写在部门的Wiki系统上。不过，一份简单的文档写到Wiki上又不太方便查阅，于是找了找可以在单个HTML里写Markdown并直接渲染展示的方案。 很快我就找到了Strapdown Zeta，其对Mardown的支持较为全面，并且使用很简单，还提供多套主题可自由切换。需要提到的是该库为Strapdown的衍生与改进版本，而Strapdown已经很长时间未更新了，选择Strapdown Zeta也是看重其活跃度。 在Strapdown Zeta的支持下仅需在&lt;xmp&gt;&lt;/xmp&gt;标签中编写Markdown并在最后引入 http://cdn.ztx.io/strapdown/strapdown.min.js 脚本即可。可惜的是，作者提供的该站点并未启用HTTPS，而我们在Let’s Encrypt的帮助下已经对部门的所有站点启用了HTTPS。这样，若在页面中引用非HTTPS资源，浏览器默认将阻止该资源的下载。 显然，这里不能直接在页面中引入该脚本，但是我也不愿再在站点上部署除使用文档之外的其他文件，就仅仅一个HTML文件即可，css什么的都不要有。 百般思索后，突然想到Internet Archive可以代理访问其他站点的页面，那我也可以专门为第三方静态资源搭建一个代理服务，该站点自身是HTTPS的，其在服务端获取到目标资源再返回给浏览器，这样该资源也就走的是HTTPS，既不用在服务器上存储这些资源，也可以自由代理其他第三方资源，而且不用管目标是不是HTTPS，甚至还可以代理一些无法访问到的资源。简单、经济、又实惠！:) 于是动手！这里假设代理站点为https://static.example.com，并构造代理链接为https://static.example.com/*/&lt;target url&gt;形式，这种结构可以方便Nginx做Location匹配，同时在使用和修改上均十分简单，我们不用改变目标资源的URL地址。 这里直接放出完整的配置：123456789101112131415161718192021222324252627282930313233343536373839server &#123; listen 443 ssl; listen [::]:443 ssl; server_name static.example.com; include /etc/nginx/vhost.d/static.example.com/01_ssl.conf; # https://static.example.com/*/http://others.com/asset.js -&gt; http://others.com/asset.js ## https://www.mediasuite.co.nz/blog/proxying-s3-downloads-nginx/ location ~* ^/\\*/(http[s]?):?/(.*?)/(.*)$ &#123; # Note: Remove the directive 'internal;' to accept the external requests, # otherwise it will return 404 for the external requests. # See http://nginx.org/en/docs/http/ngx_http_core_module.html#internal set $backend_protocol $1; set $backend_host $2; set $backend_path $3; set $backend_uri $backend_host/$backend_path$is_args$args; set $backend_url $backend_protocol://$backend_uri; # Headers for the remote server, unset Authorization and Cookie for security reasons. proxy_set_header Host $backend_host; proxy_set_header Authorization ''; proxy_set_header Cookie ''; # Stops the local disk from being written to (just forwards data through) proxy_max_temp_file_size 0; proxy_pass $backend_url; proxy_intercept_errors on; error_page 301 302 307 = @handle_backend_redirect; &#125; # Nginx Embedded Variables: http://nginx.org/en/docs/varindex.html location @handle_backend_redirect &#123; return 302 $scheme://$host/*/$upstream_http_location; &#125;&#125; 该配置参考的是Using NGINX’s X-Accel with Remote URLs。这里没有做特别的改动，主要是针对我们的实际需求做了些调整： 去掉了internal;指令，该指令是限制仅能在Nginx内部做该代理请求，而我们是需要外部直接获取到目标资源的，因此，需要去掉该指令，否则，外部访问时将始终为404； 针对目标URL地址存在重定向问题，在@handle_backend_redirect中，我又将重定向地址（其对应变量$upstream_http_location）再次进行代理，这样无论目标跳转多少次，代理站点均能获取到最终的返回内容，而不是在浏览器中又突然跳到另一个HTTP链接了； 最后提醒大家一点是，在网络中对安全要时刻保持警惕，尽可能降低敏感数据泄漏的风险，因此，这里切忌不要将客户端的Authorization和Cookie转发到目标站点了。 Nginx通过Squid穿透防火墙关键字： Nginx http_proxy：http_proxy为Linux中配置启用正向代理的环境变量，很多命令可识别该变量并通过所设定的代理地址请求目标资源 Nginx防火墙穿透 Nginx over Squid Squid behind Nginx Nginx bypass firewall via Squid 在前面提到，为了将HTTP请求转换为HTTPS请求，我专门搭建了个静态文件代理站点。刚开始访问还很正常，可后来便发现公司网关阻止了服务器对外部网站的访问，导致编写的文档无法渲染。 因此，我便考虑在Nginx服务端通过Squid（其他代理服务也可）再做一次代理以穿透公司的防火墙，确保静态资源的代理不再出现问题。 在多次尝试以及搜索网络资料后终于发现How to make an existing caching Nginx proxy use another proxy to bypass a firewall?所提到的实现方法。 在原配置的基础上综合改进后，得到新的配置内容如下：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455server &#123; listen 443 ssl; listen [::]:443 ssl; server_name static.example.com; include /etc/nginx/vhost.d/static.example.com/01_ssl.conf; # https://static.example.com/*/http://others.com/asset.js -&gt; http://others.com/asset.js ## https://www.mediasuite.co.nz/blog/proxying-s3-downloads-nginx/ location ~* ^/\\*/(http[s]?):?/(.*?)/(.*)$ &#123; # Note: Remove the directive 'internal;' to accept the external requests, # otherwise it will return 404 for the external requests. # See http://nginx.org/en/docs/http/ngx_http_core_module.html#internal set $backend_protocol $1; set $backend_host $2; set $backend_path $3; set $backend_uri $backend_host/$backend_path$is_args$args; set $backend_url $backend_protocol://$backend_uri; # Headers for the remote server, unset Authorization and Cookie for security reasons. proxy_set_header Host $backend_host; proxy_set_header Authorization ''; proxy_set_header Cookie ''; # Stops the local disk from being written to (just forwards data through) proxy_max_temp_file_size 0; # Forward the target to the squid proxy ## https://serverfault.com/questions/583743/how-to-make-an-existing-caching-nginx-proxy-use-another-proxy-to-bypass-a-firewa#683955 ## Hide the reponse header to protect the backend proxy ### http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_hide_header proxy_hide_header Via; proxy_hide_header X-Cache; proxy_hide_header X-Cache-Hits; proxy_hide_header X-Cache-Lookup; proxy_hide_header X-Fastly-Request-ID; proxy_hide_header X-Served-By; proxy_hide_header X-Timer; rewrite ^(.*)$ \"://$backend_uri\" break; rewrite ^(.*)$ \"$backend_protocol$1\" break; proxy_pass http://&lt;squid ip&gt;:3128; # Proxy to the target directly #proxy_pass $backend_url; proxy_intercept_errors on; error_page 301 302 307 = @handle_backend_redirect; &#125; # Nginx Embedded Variables: http://nginx.org/en/docs/varindex.html location @handle_backend_redirect &#123; return 302 $scheme://$host/*/$upstream_http_location; &#125;&#125; 这里需要特别注意的是： 这里做了两次rewrite是为了确保能够准确将目标URL地址附加到Squid的代理地址中以构成http://&lt;squid ip&gt;:3128/&lt;target url&gt;形式，同时，规避了因在rewrite的替换字符串中包含http://、https://或$scheme而导致重定向的问题； 同样为了安全考虑，这里隐藏了Squid的几个响应头，避免客户端得到Squid的真实IP地址而产生潜在的攻击风险； Nginx反向代理Nexus3的不同类型仓库关键字： Nginx反向代理 Nexus3不同类型仓库映射独立域名 Nexus3同时支持多种类型的资源存储，比如，Docker镜像、Maven依赖包、NPM等，不过，不同类型的资源访问方式和使用惯例是不一致的，因此，为每类资源提供符合惯例的仓库地址，再将请求转发到Nexus3仓库，对使用者而言将更加有好。 为此，本例针对Docker、Maven和NPM仓库分别给出Nginx的反向代理配置。 首先确定几个子站点的域名为如下形式： https://repo.example.com：Nexus3服务访问地址 https://mvn.example.com：Maven仓库访问地址 https://npm.example.com：NPM仓库地址 https://dcr.example.com：Docker镜像访问地址 https://repo.example.com的反向代理配置123456789101112131415server &#123; listen 443 ssl; listen [::]:443 ssl; server_name repo.example.com; include /etc/nginx/vhost.d/repo.example.com/01_ssl.conf; proxy_cache off; location / &#123; # Avoid to get address resolve error when starting set $nexus3 http://&lt;nexus3 ip&gt;:&lt;nexus3 web port&gt;; proxy_pass $nexus3; &#125;&#125; 对https://repo.example.com的配置很简单，直接将请求反向代理到Nexus3的Web接口即可。这里仅需要注意以下几点： 为了避免Nginx缓存导致资源的元数据（metadata）不能及时更新，所以，这里启用了proxy_cache off;以关闭代理缓存。当然，也可以根据实际情况仅对某些类的文件关闭缓存 Nginx在解析配置时会对proxy_pass的目标域名地址进行解析，若是解析失败则会导致Nginx启动异常，因此，这里采用变量方式将解析延迟到需要时，从而避免启动失败 https://mvn.example.com的反向代理配置需要科普一下的是，在Nexus3中访问某个仓库内的资源的URL结构为http://&lt;nexus3&gt;/#browse/browse/components:&lt;repo&gt;/，访问某个资源的URL结构为http://&lt;nexus3&gt;/repository/&lt;repo&gt;/&lt;asset path&gt;。其中，&lt;repo&gt;为仓库名称，所有类型的仓库均会有hosted（私有存储）、proxy（代理外部仓库）和group（组合同类仓库）三种模式。 为了规范内部和外部访问并便于进行权限控制（如，外部帐号不允许访问hosted中的源码等），这里创建了以下几个仓库： maven-hosted-releases：存储内部产品发布包。部署发布包时，向该仓库发送更新请求 maven-hosted-snapshots：存储内部产品开发快照包。部署快照包时，向该仓库发送更新请求 maven-hosted：maven-hosted-*的组合仓库。在Maven客户端更新依赖时，从该仓库下载内部产品的发布包或快照包 maven-&lt;3rd repo url&gt;：对第三方仓库的代理仓库，&lt;3rd repo url&gt;为站点域名，比如，maven-apache.org。也可以按其他规范命名，只要能友好区分不同仓库即可 maven-public：所有maven-&lt;3rd repo url&gt;的组合仓库。用于统一下载第三方的依赖包 然后，我们期望在访问以下URL链接时，能够将请求转发到对应的资源上： GET https://mvn.example.com/public/&lt;asset&gt; -&gt; https://repo.example.com/repository/maven-public/&lt;asset&gt; GET https://mvn.example.com/hosted/&lt;asset&gt; -&gt; https://repo.example.com/repository/maven-hosted/&lt;asset&gt; GET https://mvn.example.com/releases/&lt;asset&gt; -&gt; https://repo.example.com/repository/maven-hosted/&lt;asset&gt; GET https://mvn.example.com/snapshots/&lt;asset&gt; -&gt; https://repo.example.com/repository/maven-hosted/&lt;asset&gt; POST https://mvn.example.com/releases/&lt;asset&gt; -&gt; https://repo.example.com/repository/maven-hosted-releases/&lt;asset&gt; POST https://mvn.example.com/snapshots/&lt;asset&gt; -&gt; https://repo.example.com/repository/maven-hosted-snapshots/&lt;asset&gt; 根据以上规范和需求，https://mvn.example.com的最终配置如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445server &#123; listen 443 ssl; listen [::]:443 ssl; server_name mvn.example.com; include /etc/nginx/vhost.d/mvn.example.com/01_ssl.conf; # Redirect to the maven repository (named as 'maven-public') of Nexus3 location = / &#123; return 302 $scheme://repo.example.com/#browse/browse/components:maven-public/; &#125; # Redirect to the target asset of Nexus3 location ~* ^/repository/maven-.+$ &#123; return 301 $scheme://repo.example.com$request_uri; &#125; # Disable cache of assets proxy_cache off; proxy_read_timeout 300; proxy_connect_timeout 300; location / &#123; set $nexus3 http://&lt;nexus3 ip&gt;:&lt;nexus3 web port&gt;; # NOTE: rewrite and proxy_pass should be put in the same block ## http://nginx.org/en/docs/http/ngx_http_rewrite_module.html#rewrite # web browse or `mvn compile` if ($request_method ~* \"^GET|HEAD$\") &#123; rewrite ^/public/(.*) /repository/maven-public/$1 break; rewrite ^/hosted/(.*) /repository/maven-hosted/$1 break; rewrite ^/releases/(.*) /repository/maven-hosted/$1 break; rewrite ^/snapshots/(.*) /repository/maven-hosted/$1 break; proxy_pass $nexus3; break; &#125; # `mvn deploy` if ($request_method ~* \"^POST|PUT$\") &#123; rewrite ^/(releases|snapshots)/(.*) /repository/maven-hosted-$1/$2 break; proxy_pass $nexus3; break; &#125; &#125;&#125; 这里需要注意以下几点： 在前两个location匹配后均跳转到https://repo.example.com，因为，这两个地址的请求可认为只能是从浏览器发出的，直接跳转到Nexus3可让访问者了解我们使用的是Nexus3系统，从而尽快熟悉该系统，完全没有必要将Nexus3代理到https://mvn.example.com域名下 return 301代表固定跳转，浏览器后续访问相同URL时将直接跳转到指定的目标，而不会再向服务器发送请求；而return 302为临时跳转，浏览器的后续访问依然会向服务器发送请求。对= /做临时跳转是因为我们可能会在该URL下放些说明文档之类的页面，如果做固定跳转，那么若后续支持该需求则只能在客户端清空浏览器Cookie后方能生效，对使用者会造成一定困扰 看过Maven代码可以发现其使用的HttpClient库向仓库发送HTTP请求，所以，只需要对$request_method做匹配，将读请求转发到maven-pulic和maven-hosted两个组合仓库中，而将写请求转发到maven-hosted-*仓库即可 剩下的就是调整Maven settings.xml。对普通的仅做依赖下载更新的配置为（仅列出主要内容，请按实际需求修改）：12345678910111213141516171819202122232425262728293031323334353637383940414243444546&lt;!-- https://maven.apache.org/settings.html --&gt;&lt;settings&gt; &lt;servers&gt; &lt;server&gt; &lt;!-- Associated with &lt;repository/&gt; and &lt;pluginRepository/&gt; --&gt; &lt;id&gt;your-repo-public&lt;/id&gt; &lt;username&gt;&lt;/username&gt; &lt;password&gt;&lt;/password&gt; &lt;/server&gt; &lt;server&gt; &lt;id&gt;your-repo-hosted&lt;/id&gt; &lt;username&gt;&lt;/username&gt; &lt;password&gt;&lt;/password&gt; &lt;/server&gt; &lt;/servers&gt; &lt;profiles&gt; &lt;profile&gt; &lt;id&gt;your-repo&lt;/id&gt; &lt;repositories&gt; &lt;repository&gt; &lt;id&gt;your-repo-public&lt;/id&gt; &lt;url&gt;https://mvn.example.com/public/&lt;/url&gt; &lt;releases&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/releases&gt; &lt;snapshots&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/snapshots&gt; &lt;/repository&gt; &lt;repository&gt; &lt;id&gt;your-repo-hosted&lt;/id&gt; &lt;url&gt;https://mvn.example.com/hosted/&lt;/url&gt; &lt;releases&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/releases&gt; &lt;snapshots&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/snapshots&gt; &lt;/repository&gt; &lt;/repositories&gt; &lt;pluginRepositories&gt; &lt;pluginRepository&gt; &lt;id&gt;your-repo-public&lt;/id&gt; &lt;url&gt;https://mvn.example.com/public/&lt;/url&gt; &lt;releases&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/releases&gt; &lt;snapshots&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/snapshots&gt; &lt;/pluginRepository&gt; &lt;/pluginRepositories&gt; &lt;/profile&gt; &lt;/profiles&gt; &lt;activeProfiles&gt; &lt;activeProfile&gt;your-repo&lt;/activeProfile&gt; &lt;/activeProfiles&gt;&lt;/settings&gt; 而对需要向仓库部署包的配置则为（仅列出主要内容，请按实际需求修改）：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768&lt;!-- https://maven.apache.org/settings.html --&gt;&lt;settings&gt; &lt;servers&gt; &lt;server&gt; &lt;!-- Associated with &lt;repository/&gt; and &lt;pluginRepository/&gt; --&gt; &lt;id&gt;public&lt;/id&gt; &lt;username&gt;&lt;/username&gt; &lt;password&gt;&lt;/password&gt; &lt;/server&gt; &lt;server&gt; &lt;id&gt;releases&lt;/id&gt; &lt;username&gt;&lt;/username&gt; &lt;password&gt;&lt;/password&gt; &lt;/server&gt; &lt;server&gt; &lt;id&gt;snapshots&lt;/id&gt; &lt;username&gt;&lt;/username&gt; &lt;password&gt;&lt;/password&gt; &lt;/server&gt; &lt;server&gt; &lt;id&gt;thirdparty&lt;/id&gt; &lt;username&gt;&lt;/username&gt; &lt;password&gt;&lt;/password&gt; &lt;/server&gt; &lt;/servers&gt; &lt;profiles&gt; &lt;profile&gt; &lt;id&gt;your-repo&lt;/id&gt; &lt;repositories&gt; &lt;repository&gt; &lt;id&gt;public&lt;/id&gt; &lt;url&gt;https://mvn.example.com/public/&lt;/url&gt; &lt;releases&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/releases&gt; &lt;snapshots&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/snapshots&gt; &lt;/repository&gt; &lt;repository&gt; &lt;id&gt;releases&lt;/id&gt; &lt;url&gt;https://mvn.example.com/releases/&lt;/url&gt; &lt;releases&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/releases&gt; &lt;snapshots&gt;&lt;enabled&gt;false&lt;/enabled&gt;&lt;/snapshots&gt; &lt;/repository&gt; &lt;repository&gt; &lt;id&gt;snapshots&lt;/id&gt; &lt;url&gt;https://mvn.example.com/snapshots/&lt;/url&gt; &lt;releases&gt;&lt;enabled&gt;false&lt;/enabled&gt;&lt;/releases&gt; &lt;snapshots&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/snapshots&gt; &lt;/repository&gt; &lt;repository&gt; &lt;id&gt;thirdparty&lt;/id&gt; &lt;url&gt;https://mvn.example.com/thirdparty/&lt;/url&gt; &lt;releases&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/releases&gt; &lt;snapshots&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/snapshots&gt; &lt;/repository&gt; &lt;/repositories&gt; &lt;pluginRepositories&gt; &lt;pluginRepository&gt; &lt;id&gt;public&lt;/id&gt; &lt;url&gt;https://mvn.example.com/public/&lt;/url&gt; &lt;releases&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/releases&gt; &lt;snapshots&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/snapshots&gt; &lt;/pluginRepository&gt; &lt;/pluginRepositories&gt; &lt;/profile&gt; &lt;/profiles&gt; &lt;activeProfiles&gt; &lt;activeProfile&gt;your-repo&lt;/activeProfile&gt; &lt;/activeProfiles&gt;&lt;/settings&gt; 注意，Maven在更新时是按照settings.xml中定义的仓库顺序依次查找依赖直到内置的central仓库，若在某个仓库中找到依赖则停止查找。因此，需要注意调整仓库的位置以避免因依赖同名而导致下载的内容与预期的不同。 https://npm.example.com的反向代理配置https://npm.example.com与https://mvn.example.com的规划和注意事项基本一致，只是npm-hosted仓库直接使用hosted模式，因为NPM依赖包没有快照版本，而npm-public仓库依然为group模式，用于组合多个第三方仓库。 以下为对https://npm.example.com的完整配置： 12345678910111213141516171819202122232425262728293031323334353637383940414243server &#123; listen 443 ssl; listen [::]:443 ssl; server_name npm.example.com; include /etc/nginx/vhost.d/npm.example.com/01_ssl.conf; # Redirect to the maven repository (named as 'npm-public') of Nexus3 location = / &#123; return 302 $scheme://repo.example.com/#browse/browse/components:npm-public/; &#125; # Redirect to the target asset of Nexus3 location ~* ^/repository/npm-.+$ &#123; return 301 $scheme://repo.example.com$request_uri; &#125; # Disable cache of assets proxy_cache off; proxy_read_timeout 60; proxy_connect_timeout 60; location / &#123; set $nexus3 http://&lt;nexus3 ip&gt;:&lt;nexus3 web port&gt;; # NOTE: rewrite and proxy_pass should be put in the same block ## http://nginx.org/en/docs/http/ngx_http_rewrite_module.html#rewrite # web browse or `npm install` if ($request_method ~* \"^GET$\") &#123; rewrite ^/(.+) /repository/npm-public/$1 break; proxy_pass $nexus3; break; &#125; # `npm publish` if ($request_method ~* \"^PUT|DELETE$\") &#123; rewrite ^/(.+) /repository/npm-hosted/$1 break; proxy_pass $nexus3; break; &#125; &#125;&#125; https://dcr.example.com的反向代理配置在Nexus3中，Docker类型的仓库需要使用不同的端口进行访问，创建仓库时需要为仓库自行设定一个HTTP端口号，然后再通过Nginx将读写请求转发到不同的端口上。 这里创建一个hosted模式的仓库docker-hosted用于docker push镜像，创建一个group模式的仓库docker-public用于组合多个第三方镜像仓库。 最终，针对https://dcr.example.com的Nginx配置如下： 12345678910111213141516171819202122232425262728293031323334353637server &#123; listen 443 ssl; listen [::]:443 ssl; server_name dcr.example.com; include /etc/nginx/vhost.d/dcr.example.com/01_ssl.conf; # Disable cache of assets proxy_cache off; proxy_read_timeout 600; proxy_connect_timeout 600; location / &#123; if ($http_user_agent !~* \"^docker/.+$\") &#123; return 301 $scheme://repo.example.com/#browse/browse/components:docker-public$request_uri; &#125; set $nexus3 http://&lt;nexus3 ip&gt;; # docker pull dcr.example.com/xx-xx set $repo_url $nexus3:&lt;docker-public port&gt;; # https://github.com/moby/moby/blob/7061b0f748c29ffd1e6852cdc5dd11f90840eb1c/daemon/logger/awslogs/cloudwatchlogs_test.go#L71 # https://github.com/moby/moby/blob/master/client/image_pull.go # https://github.com/moby/moby/blob/master/client/image_push.go # NOTE: rewrite and proxy_pass should be put in the same block ## http://nginx.org/en/docs/http/ngx_http_rewrite_module.html#rewrite # docker push dcr.example.com/xx-xx if ($request_method ~* \"^HEAD|POST|PUT|DELETE|PATCH$\") &#123; set $repo_url $nexus3:&lt;docker-hosted port&gt;; &#125; proxy_pass $repo_url; &#125;&#125; 这里同样需注意以下几个问题： Docker发送的HTTP请求中User Agent包含docker字符串，因此，如果$http_user_agent中没有这个字符串，则视为浏览器访问，直接跳转到https://repo.example.com 从Docker的源码中可以发现HTTP Method为HEAD、POST、PUT、DELETE、PATCH均与镜像变更（新增、删除、打标签、更新等）有关，因此，需要将这些请求均转发到docker-hosted仓库"},{"title":"未来社会形态畅想","permalink":"https://flytreeleft.github.io/the-future-social-formation/","text":"The post isn’t finished yet, it will be updated anytime! 无现金社会提要： 比特币、比特交易网络 以太坊 IOTA 如何找回IOTA余额：可以从中了解转账机制与流程 自由工作提要： 为个人价值体现、兴趣、探索未知而工作，而不是为了生活和生存 社会基础能够保障个人衣食无忧，确保个人在任何时刻都无需担心温饱和居住问题，从而有精力专注于思考和探索上 种植、生产、制造、输送流程实现全自动化、机械化 自由选择工作时间、工作地点，不为特定的个人、团体、组织、企业工作，仅为达到某个目标而做事并获得对等回报 万物互联提要： 联网的每个设备既为内容消费端，也是内容存储端，同时也是网络热点，附近的设备可随时且自由地连接在一起 基于内容进行网络访问，而不再基于IP或域名，任何端点都可能含有所需内容，就近选择并从该端点下载内容即可，内容原始发布端将无关紧要 分布式、无中心化的基础网络，不再需要路由器、交换机、服务器等中心设备 初始阶段需要通过ISP打通各个闭环网络（闭环的连接设备群组），当多个闭环网络连接形成足够大的闭环后，设备之间的通信将无需ISP的支持 家用路由器等可自由共享网络，助推「万物网」的形成"},{"title":"作恶行为清单","permalink":"https://flytreeleft.github.io/the-evil-behaviors/","text":"列举日常和网络中所发现的软件、应用、服务等的「作恶」行为，将其永久钉在「耻辱柱」上。有条件的或有候选方案的，应主动弃用之！坚持开放、坚持自由。点击下载自由软件自由社会.pdf就事论事，不针对个人、企业、平台，挖掘现象本质，努力尝试寻找更优方案 为逼迫用户使用客户端而阉割Web端的基本功能 案例： 闲鱼Web端隐藏搜索框 来源： https://www.appinn.com/xianyu-search-box/ 评语： 若欲达KPI，必先「中二自宫」 封闭平台之间因为利益互怼，以用户为筹码逼迫对方作出让步 案例： 谷歌Youtube禁止亚马逊Echo访问 来源： http://www.ifanr.com/951314 相关： 360与QQ大战、菜鸟与顺丰互怼 评语： 用户在我手，天下跟我走。看不惯？你咬我呀！ 观点： 在「封闭平台」中，用户从一开始便是平台的筹码，当平台「自认为」利益受到其他平台威胁时，便会不惜以损害用户体验的方式进行反击，其平日讨好用户的伪善面目便暴露无疑。平台越大，心眼越小，不安全感越严重，思路越单一，解决问题的方式越是直接粗暴。"},{"title":"软件开发最佳实践","permalink":"https://flytreeleft.github.io/the-better-software-development-practice/","text":"The post isn’t finished yet, it will be updated anytime!"},{"title":"软件开发行为准则","permalink":"https://flytreeleft.github.io/the-software-development-criterion/","text":"The post isn’t finished yet, it will be updated anytime! 谨慎对待用户隐私提要： 不是仅用户确认后的数据才算是「用户隐私」，任何与用户相关的数据都应该「默认」视为用户隐私，不需要任何形式的确认，而只有经过用户确认和同意的数据方可用作其他用途，且前提必须是明确告知数据为何要做次用途，以及将被如何利用、涉及哪些风险等 努力降低总体开发和使用成本提要： 总体成本等于所有个人的时间成本与财力物力之总和 提供到达/完成目标的最短操作路径 提供详细的文档（开发、设计、使用），备注相关知识来源链接，从最终使用者角度考虑使用流程、会遇到的困难和疑问、期望的快捷方式 将当前关注点在一页（一屏）中展示；直接到达操作按钮； 从开发者与最终用户的角度思考各个关注点，直接提供所需信息、接口、说明以及软件功能 不是一眼就明了其意义的图标需提供文字提示或说明，或者直接使用文字"},{"title":"如何突破自己的瓶颈？","permalink":"https://flytreeleft.github.io/how-to-break-out-of-your-limit/","text":"The post isn’t finished yet, it will be updated anytime! 以旁观者角度审视自己提要： 勇敢面对自己，正视自己的缺点 客观分析自己的好的、坏的甚至是邪恶的想法，不好的想法切不可影响到他人，需要自我消化 人无完人，对于非理性情绪不要过分压抑，在不影响他人的情况下采取各种积极或消极的方式去释放这些情绪 消极的释放方式所要达到的目的是推翻重建，进入全新的境界，从而从另一个视角看待原来的情绪和行为 理性看待他人的评论、观点和建议，保持就事论事的态度，切忌带有个人情绪，更不要被别人带着走（影响个人情绪、怀疑个人价值观等等）提要： 若无法静心并保持客观，那就禁用评论，不与人争论，专注于自己的思考方向，但需多接触不同观点，及时调整，不可过于执念 开放心态，放下恩怨是非，求同存异 事物的美好在于不同，不同的观点、思想的碰撞才能产生激烈的火花，而消灭差异最终只会沦为「行尸走肉」 「尊重你说话的权利，但也保留我的个人意见」 没有绝对的对错，对错都是相对的，在不同身份、不同环境、不同角度甚至可能发生反转。依据当前已知信息作出相对合理的选择，并在实践过程中不断调整 专注于探索自己的生活方式和方向，不羡慕别人的生活，先过好自己的提要： 时常在朋友圈、新闻、他人口中看到或听到某某光鲜亮丽、幸福美满、事业猛进，而自己依然处于迷茫、混沌、一人吃饱全家不饿的状态，心里倍感失落、感觉就是一loser，进而嫉妒别人，甚而诅咒他人 那你需要静下来分析，如何形成当前局面，自己真正需要的是什么，自己在生活的路上做了什么 别人都在幸福的路上忙碌奔波，而你却有如此闲心去妒嫉别人的生活？ 人人都有自己的活法，也有不同的满足，找到属于自己的，并聚焦于此，为此而忙碌，心无杂念 以“出世”的态度去观察他人和自己，不要觉得自己过得不如意就希望全世界都得与你一起面对种种不如意，从他人的不幸中去寻找优越感，将会使自己越来越失败、愤恨、怀疑自己。不断战胜、超越自己才是正途 始终保持内心的平静，避免外界对自己的诱惑和干扰，要有自己的坚守，纯粹的名与利终究是带不走的 沉下心来专注于自己的事情，朝着自己认为可行的方向前行，也许会失败，但在行进过程中同样也能学到很多东西，所以，不要一开始就因为害怕失败而不去做，先勇敢地去做，快速尝试以快速失败或成功 对所见、所听、所接触的事、物、人，取其精华去其糟泊，吸收有用可取的方式，探索本质，获得处事之道提要： 有些人就是人生路上的“小怪兽”，有些人是良师益友 随时准备两件事情，以避免当前事情完成后不知道该继续做什么的困境准备一份阅读书籍列表，在无所事事时，避免无目的的刷网页，转而看书会更加有益"},{"title":"Git使用案例","permalink":"https://flytreeleft.github.io/git-usage-cases/","text":"拆分子目录到新仓库场景通常为便于项目开发和调试，开发前期会将多个组件放在同一仓库中，而当各个组件的功能结构和代码逐渐区域稳定后，便需要将其拆分出来进行独立开发和管理，以便于与其他项目共享组件。 此时，不仅需要将组件所在目录内的代码全部拆分到单独的仓库，同时，还需要确保历史记录能够完整保留。 操作1234567891011121314151617# Clone the repository that contains the subfolder.git clone https://github.com/USERNAME/REPOSITORY-NAMEcd REPOSITORY-NAME# To filter out the subfolder from the rest of the files in the repository## FOLDER-NAME: The folder within your project that you'd like to create a separate repository from.## BRANCH-NAME: The default branch for your current project, for example, 'master' or 'gh-pages'git filter-branch --prune-empty --subdirectory-filter FOLDER-NAME BRANCH-NAME# Change the existing remote 'origin' (or other name) URL to the new repository URLgit remote set-url origin https://github.com/USERNAME/NEW-REPOSITORY-NAME.git# [Optional] Change BRANCH-NAME to the default branch (e.g. 'master') of the new repositorygit branch -m BRANCH-NAME master# Push your changes to the new repositorygit push -u origin master 注意： 在第二步操作后，当前目录将会只剩下子目录中的文件 最好在新的目录中进行上述操作：可以直接clone，也可以从复制已有项目到其他目录 参考 Splitting a subfolder out into a new repository 修改变更提交人的信息场景基于项目长远发展考虑，将某个具有实用价值且吸引力极大的项目开源，需要将项目从公司内部仓库开放到Github上，但相关开发人员在两个系统中所用帐号不一致，为了便于issue交流以及PR提交，这时，需要更改历史中的提交人信息。 其实，大多数时候，很可能是要弃用内部仓库并将工作全部移到公共仓库时才有这么做的需求，其余情况并不需要这么做。 操作 部分替换： 12345678910git filter-branch --commit-filter \\ 'if [ \"$GIT_AUTHOR_NAME\" = \"OldAuthor Name\" ]; then \\ export GIT_AUTHOR_NAME=\"Author Name\"; \\ export GIT_AUTHOR_EMAIL=authorEmail@example.com; \\ export GIT_COMMITTER_NAME=\"Commmiter Name\"; \\ export GIT_COMMITTER_EMAIL=commiterEmail@example.com; \\ fi; \\ git commit-tree \"$@\" '# Push to the branch 'master' of the existing repositorygit push --force origin master 全部替换： 12345678git filter-branch --commit-filter \\ 'export GIT_AUTHOR_NAME=\"Author Name\"; \\ export GIT_AUTHOR_EMAIL=authorEmail@example.com; \\ export GIT_COMMITTER_NAME=\"Commmiter Name\"; \\ export GIT_COMMITTER_EMAIL=commiterEmail@example.com; \\ git commit-tree \"$@\" '# Push to the branch 'master' of the existing repositorygit push --force origin master 注意： 若出现类似Cannot create a new backup. A previous backup already exists in refs/original/. Force overwriting the backup with -f的异常提示，则需要在filter-branch命令中添加选项-f，即git filter-branch -f，以强制进行修改 如果提交的分支是受保护的，则在提交时会出现remote: GitLab: You are not allowed to force push code to a protected branch on this project.的错误信息，此时，需要调整仓库设置，临时取消对目标分支的保护 参考 Could I change my name and surname in all previous commits? 迁移子分支至新仓库场景某个项目仓库中可能存在多个功能特性（features）分支，在一段时候后，基于产品功能规划和开发维护等方面的考虑，需要将某些特性分支独立成新的项目或子项目，将其迁移到新的仓库中。 操作12345678# Push 'feature-branch' to the branch 'master' (or others) of new repositorygit push url://to/new/repository.git feature-branch:master# [Optional] Delete the 'feature-branch' from current repositorygit branch -d feature-branch# Clone codes from new repositorygit clone url://to/new/repository.git feature-branch 参考 How do I move a Git branch out into its own repository? 修改历史提交备注信息场景在拆分子目录和迁移子分支两个场景中，在新仓库中的历史提交记录的备注信息可能存在与项目不相关的信息或者包含原始项目中的一些敏感内容。这个时候，就可能需要修改这些备注信息。 当然，也可能是因为发现以前的提交备注中包含错别字或者表达不清晰，为了避免对其他人产生误导或困惑，将提交的备注信息予以纠正也是很有必要的。 操作 获取提交ID并Rebase到该提交 12345# List histories and get the commit id which should be modifiedgit log# Rebase to 3 commits before the specified commit (e.g. 'ce0ac37c83')git rebase --interactive ce0ac37c83~3 将提交所在行开始处的pick修改为edit 提交并应用修改 123456789# New commit messagegit commit --amend -m \"fix that the dragging preview can not be shown\"# Apply the changes and return to HEADgit rebase --continue# Push to the branch 'master' of the existing repository## Make sure that the remote branch 'master' is unprotectedgit push --force origin master 注意： 如果需要放弃修改，则运行命令git rebase --abort 若直接rebase到目标commit，则该提交不会显示在可修改清单内，故，需选择从其之前的第N个（e.g. ~3）提交开始 若提交至非空的仓库，需确保目标分支不是受保护（protected）的 在应用修改后，git将从修改位置开始重新构建commit tree，因此，从该位置开始到HEAD的commit id均会发生变化，但原始commit tree依然存在，通过git diff ce0ac37c83等可看到该提交的变更情况 参考 How to modify existing, unpushed commits?"},{"title":"Hello world!","permalink":"https://flytreeleft.github.io/hello-world/","text":"1System.out.println(\"Hello world!\"); 1alert('Hello world!'); 1echo \"Hello world!\""}]}