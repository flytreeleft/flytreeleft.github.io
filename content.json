{"pages":[{"title":"About me","permalink":"https://flytreeleft.github.io/about/index.html","text":"Nothing more!"},{"title":"Categories","permalink":"https://flytreeleft.github.io/categories/index.html","text":""},{"title":"Tags","permalink":"https://flytreeleft.github.io/tags/index.html","text":""}],"posts":[{"title":"作恶行为清单","permalink":"https://flytreeleft.github.io/the-evil-behaviors/","text":"列举日常和网络中所发现的软件、应用、服务等的「作恶」行为，将其永久钉在「耻辱柱」上。有条件的或有候选方案的，应主动弃用之！坚持开放、坚持自由。点击下载自由软件自由社会.pdf 为逼迫用户使用客户端而阉割Web端的基本功能 案例： 闲鱼Web端隐藏搜索框 来源： https://www.appinn.com/xianyu-search-box/ 评语： 若欲达KPI，必先「中二自宫」"},{"title":"软件开发最佳实践","permalink":"https://flytreeleft.github.io/the-better-software-development-practice/","text":"The post isn’t finished yet, it will be updated anytime!"},{"title":"软件开发行为准则","permalink":"https://flytreeleft.github.io/the-software-development-criterion/","text":"The post isn’t finished yet, it will be updated anytime! 不是仅用户确认后的数据才算是「用户隐私」，任何与用户相关的数据都应该「默认」视为用户隐私，不需要任何形式的确认，而只有经过用户确认和同意的数据方可用作其他用途，且前提必须是明确告知数据为何要做次用途，以及将被如何利用、涉及哪些风险等"},{"title":"如何突破自己的瓶颈？","permalink":"https://flytreeleft.github.io/how-to-break-out-of-your-limit/","text":"The post isn’t finished yet, it will be updated anytime! 以旁观者角度审视自己 理性看待他人的评论、观点和建议，保持就事论事的态度，切忌带有个人情绪，更不要被别人带着走（影响个人情绪、怀疑个人价值观等等） 若无法静心并保持客观，那就禁用评论，不与人争论，专注于自己的思考方向，但需多接触不同观点，及时调整，不可过于执念 专注于探索自己的生活方式和方向，不羡慕别人的生活，先过好自己的 时常在朋友圈、新闻、他人口中看到或听到某某光鲜亮丽、幸福美满、事业猛进，而自己依然处于迷茫、混沌、一人吃饱全家不饿的状态，心里倍感失落、感觉就是一loser，进而嫉妒别人，甚而诅咒他人 那你需要静下来分析，如何形成当前局面，自己真正需要的是什么，自己在生活的路上做了什么 别人都在幸福的路上忙碌奔波，而你却有如此闲心去妒嫉别人的生活？ 人人都有自己的活法，也有不同的满足，找到属于自己的，并聚焦于此，为此而忙碌，心无杂念 以“出世”的态度去观察他人和自己，不要觉得自己过得不如意就希望全世界都得与你一起面对种种不如意，从他人的不幸中去寻找优越感，将会使自己越来越失败、愤恨、怀疑自己。不断战胜、超越自己才是正途 对所见、所听、所接触的事、物、人，取其精华去其糟泊，吸收有用可取的方式，探索本质，获得处事之道 有些人就是人生路上的“小怪兽”，有些人是良师益友"},{"title":"Git使用案例","permalink":"https://flytreeleft.github.io/git-usage-cases/","text":"拆分子目录到新仓库场景通常为便于项目开发和调试，开发前期会将多个组件放在同一仓库中，而当各个组件的功能结构和代码逐渐区域稳定后，便需要将其拆分出来进行独立开发和管理，以便于与其他项目共享组件。 此时，不仅需要将组件所在目录内的代码全部拆分到单独的仓库，同时，还需要确保历史记录能够完整保留。 操作1234567891011121314151617# Clone the repository that contains the subfolder.git clone https://github.com/USERNAME/REPOSITORY-NAMEcd REPOSITORY-NAME# To filter out the subfolder from the rest of the files in the repository## FOLDER-NAME: The folder within your project that you'd like to create a separate repository from.## BRANCH-NAME: The default branch for your current project, for example, 'master' or 'gh-pages'git filter-branch --prune-empty --subdirectory-filter FOLDER-NAME BRANCH-NAME# Change the existing remote 'origin' (or other name) URL to the new repository URLgit remote set-url origin https://github.com/USERNAME/NEW-REPOSITORY-NAME.git# [Optional] Change BRANCH-NAME to the default branch (e.g. 'master') of the new repositorygit branch -m BRANCH-NAME master# Push your changes to the new repositorygit push -u origin master 注意： 在第二步操作后，当前目录将会只剩下子目录中的文件 最好在新的目录中进行上述操作：可以直接clone，也可以从复制已有项目到其他目录 参考 Splitting a subfolder out into a new repository 修改变更提交人的信息场景基于项目长远发展考虑，将某个具有实用价值且吸引力极大的项目开源，需要将项目从公司内部仓库开放到Github上，但相关开发人员在两个系统中所用帐号不一致，为了便于issue交流以及PR提交，这时，需要更改历史中的提交人信息。 其实，大多数时候，很可能是要弃用内部仓库并将工作全部移到公共仓库时才有这么做的需求，其余情况并不需要这么做。 操作 部分替换： 12345678910git filter-branch --commit-filter \\ 'if [ \"$GIT_AUTHOR_NAME\" = \"OldAuthor Name\" ]; then \\ export GIT_AUTHOR_NAME=\"Author Name\"; \\ export GIT_AUTHOR_EMAIL=authorEmail@example.com; \\ export GIT_COMMITTER_NAME=\"Commmiter Name\"; \\ export GIT_COMMITTER_EMAIL=commiterEmail@example.com; \\ fi; \\ git commit-tree \"$@\" '# Push to the branch 'master' of the existing repositorygit push --force origin master 全部替换： 12345678git filter-branch --commit-filter \\ 'export GIT_AUTHOR_NAME=\"Author Name\"; \\ export GIT_AUTHOR_EMAIL=authorEmail@example.com; \\ export GIT_COMMITTER_NAME=\"Commmiter Name\"; \\ export GIT_COMMITTER_EMAIL=commiterEmail@example.com; \\ git commit-tree \"$@\" '# Push to the branch 'master' of the existing repositorygit push --force origin master 注意： 若出现类似Cannot create a new backup. A previous backup already exists in refs/original/. Force overwriting the backup with -f的异常提示，则需要在filter-branch命令中添加选项-f，即git filter-branch -f，以强制进行修改 如果提交的分支是受保护的，则在提交时会出现remote: GitLab: You are not allowed to force push code to a protected branch on this project.的错误信息，此时，需要调整仓库设置，临时取消对目标分支的保护 参考 Could I change my name and surname in all previous commits? 迁移子分支至新仓库场景某个项目仓库中可能存在多个功能特性（features）分支，在一段时候后，基于产品功能规划和开发维护等方面的考虑，需要将某些特性分支独立成新的项目或子项目，将其迁移到新的仓库中。 操作12345678# Push 'feature-branch' to the branch 'master' (or others) of new repositorygit push url://to/new/repository.git feature-branch:master# [Optional] Delete the 'feature-branch' from current repositorygit branch -d feature-branch# Clone codes from new repositorygit clone url://to/new/repository.git feature-branch 参考 How do I move a Git branch out into its own repository? 修改历史提交备注信息场景在拆分子目录和迁移子分支两个场景中，在新仓库中的历史提交记录的备注信息可能存在与项目不相关的信息或者包含原始项目中的一些敏感内容。这个时候，就可能需要修改这些备注信息。 当然，也可能是因为发现以前的提交备注中包含错别字或者表达不清晰，为了避免对其他人产生误导或困惑，将提交的备注信息予以纠正也是很有必要的。 操作 获取提交ID并Rebase到该提交 12345# List histories and get the commit id which should be modifiedgit log# Rebase to 3 commits before the specified commit (e.g. 'ce0ac37c83')git rebase --interactive ce0ac37c83~3 将提交所在行开始处的pick修改为edit 提交并应用修改 123456789# New commit messagegit commit --amend -m \"fix that the dragging preview can not be shown\"# Apply the changes and return to HEADgit rebase --continue# Push to the branch 'master' of the existing repository## Make sure that the remote branch 'master' is unprotectedgit push --force origin master 注意： 如果需要放弃修改，则运行命令git rebase --abort 若直接rebase到目标commit，则该提交不会显示在可修改清单内，故，需选择从其之前的第N个（e.g. ~3）提交开始 若提交至非空的仓库，需确保目标分支不是受保护（protected）的 在应用修改后，git将从修改位置开始重新构建commit tree，因此，从该位置开始到HEAD的commit id均会发生变化，但原始commit tree依然存在，通过git diff ce0ac37c83等可看到该提交的变更情况 参考 How to modify existing, unpushed commits?"},{"title":"Hello world!","permalink":"https://flytreeleft.github.io/hello-world/","text":"1System.out.println(\"Hello world!\"); 1alert('Hello world!'); 1echo \"Hello world!\""}]}