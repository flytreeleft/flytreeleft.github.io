<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[算法分析：求解最长公共子序列]]></title>
      <url>/algorithm-finding-the-longest-common-sequence/</url>
      <content type="html"><![CDATA[<blockquote>
<p>算法分析系列文章中的代码可被任何人无偿使用于任何场景且无需注明来源也不必在使用前征得本文作者同意。</p>
<p>算法分析系列文章旨在传播准确、完整、简洁、易懂、规范的代码实现，并传授基本的编程思想和良好的编码习惯与技巧。</p>
<p>若文章中的代码存在问题或逻辑错误，请通过邮件等形式（见文章结尾）告知于本文作者以便及时修正错误或改进代码。</p>
<p>PS：若为转载该文章，请务必注明来源，本站点欢迎大家转载。</p>
</blockquote>
<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><a id="more"></a>
<h2 id="求解方案"><a href="#求解方案" class="headerlink" title="求解方案"></a>求解方案</h2><h3 id="动态规划法"><a href="#动态规划法" class="headerlink" title="动态规划法"></a>动态规划法</h3><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://blog.csdn.net/v_JULY_v/article/details/6110269" target="_blank" rel="noopener">动态规划算法解最长公共子序列LCS问题</a>：详细讲解了动态规划法的实现过程并给出了对空间复杂度进行优化后的实现代码</li>
<li><a href="https://blog.csdn.net/hrn1216/article/details/51534607" target="_blank" rel="noopener">动态规划最长公共子序列过程图解</a>：图例丰富有助于理解求解的动态过程</li>
</ul>
<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>以下为完整的各方案代码，并包含性能测试：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 算法分析 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> 最长公共子序列 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[算法分析：求解最大子段和]]></title>
      <url>/algorithm-calculating-maximum-interval-sum/</url>
      <content type="html"><![CDATA[<blockquote>
<p>算法分析系列文章中的代码可被任何人无偿使用于任何场景且无需注明来源也不必在使用前征得本文作者同意。</p>
<p>算法分析系列文章旨在传播准确、完整、简洁、易懂、规范的代码实现，并传授基本的编程思想和良好的编码习惯与技巧。</p>
<p>若文章中的代码存在问题或逻辑错误，请通过邮件等形式（见文章结尾）告知于本文作者以便及时修正错误或改进代码。</p>
<p>PS：若为转载该文章，请务必注明来源，本站点欢迎大家转载。</p>
</blockquote>
<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>给定一个<strong>整数</strong>（正负数不限）序列 $a_1, a_2, a_3, …, a_n$ ，从该序列中选取任意<strong>相邻</strong>的一段求和（简称为「子段和」），求解该序列的<strong>最大子段和</strong>。注：若整个序列的所有元素均为负数，则其最大子段和固定为0。</p>
<p>例如，序列<code>[64, -24, 88, -39, -54, 16]</code>的最大子段和为<code>128</code>（= <code>64 + (-24) + 88</code>）。<br><a id="more"></a></p>
<h2 id="求解方案"><a href="#求解方案" class="headerlink" title="求解方案"></a>求解方案</h2><h3 id="穷举法"><a href="#穷举法" class="headerlink" title="穷举法"></a>穷举法</h3><p>穷举法就是从 $a_0$ 开始依次计算 <script type="math/tex">a_0, a_0 + a_1, a_0 + a_1 + a_2, a_0 + a_1 + ... + a_n</script> 并取其中的最大值，再从 $a_1$ 开始依次计算 <script type="math/tex">a_1, a_1 + a_2, a_1 + a_2 + ... + a_n</script> 并取其中的最大值，以此往复，直到 $a_n$ 为止，并取每次计算过程中的最大值，得到的最终结果即为所求。</p>
<p>该穷举过程用代码实现即为：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">SubseqSum</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> value; <span class="comment">// 序列区间求和后的值</span></span><br><span class="line">    <span class="keyword">int</span> start; <span class="comment">// 求和区间的开始位置</span></span><br><span class="line">    <span class="keyword">int</span> end; <span class="comment">// 求和区间的结束位置</span></span><br><span class="line">&#125; SubseqSum;</span><br><span class="line"></span><br><span class="line"><span class="function">SubseqSum <span class="title">max_subseq_sum_force</span><span class="params">(<span class="keyword">int</span> seq[], <span class="keyword">int</span> seq_len)</span> </span>&#123;</span><br><span class="line">    SubseqSum max_sum = &#123; .value = <span class="number">0</span>, .start = <span class="number">0</span>, .end = <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> max_sum_value = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; seq_len; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; seq_len; j++) &#123;</span><br><span class="line">            <span class="comment">// 计算从i到j这个区间的和</span></span><br><span class="line">            <span class="keyword">int</span> sum_value = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = i; k &lt;= j; k++) &#123;</span><br><span class="line">                sum_value += seq[k];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 当i到j的区间的和大于当前已记录的最大子段和时，更新该最大子段和为该区间的和</span></span><br><span class="line">            <span class="keyword">if</span> (sum_value &gt; max_sum_value) &#123;</span><br><span class="line">                max_sum_value = sum_value;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 更新最大子段和的结果及其求和区间</span></span><br><span class="line">                max_sum.value = max_sum_value;</span><br><span class="line">                max_sum.start = i;</span><br><span class="line">                max_sum.end = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max_sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意：</p>
<ul>
<li>这里定义了结构体<code>SubseqSum</code>用于同时记录子段和及其求和区间，可便于对最终结果进行人工复查以验证代码的正确性</li>
<li>在<code>for</code>、<code>if ... else ...</code>等分支中即使仅有一行代码，甚至没有代码（如，<code>while (true) {}</code>），也不要省略花括号（<code>{}</code>），这是避免代码混乱、提升代码可读性和准确性的前提</li>
<li>通过指针类型的参数来获取函数内部的过程数据（如，<code>int max_subseq_sum(int seq[], int seq_len, int &amp;begin, int &amp;end) {...}</code>）的方式不是一种良好的编码习惯。虽然，许多编程语言的函数不支持返回多值，但通过结构体等方式可以更好地达到目的（甚至好于返回多值），最终的代码也会更易阅读和理解</li>
</ul>
<p>本例用到了三层循环，其时间复杂度为 $O(n^3)$ 。但仔细分析后可以发现，在第三层循环中，从 $i$ 到 $j$ 区间的和会被重复计算多次，即，存在计算序列 <script type="math/tex">a_i, a_i + a_{i+1}, a_i + a_{i+1} + a_{i+2}, a_i + a_{i+1} + ... + a_{j-1} + a_j</script> ，而实际上， <script type="math/tex">a_i + ... + a_{j-1}</script> 已经被计算过了，没有必要再重复计算，若将其存放在变量 $tmp$ 中（即， <script type="math/tex">tmp = a_i + a_{i+1} + ... + a_{j-1}</script> ），则计算 <script type="math/tex">a_i + a_{i+1} + ... + a_{j-1} + a_j</script> 的值，等效于计算 <script type="math/tex">tmp + a_j</script> 的值。</p>
<p>按照以上思路，可将上面的穷举实现改进为如下代码（时间复杂度为 $O(n^2)$ ）：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">SubseqSum</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> value; <span class="comment">// 序列区间求和后的值</span></span><br><span class="line">    <span class="keyword">int</span> start; <span class="comment">// 求和区间的开始位置</span></span><br><span class="line">    <span class="keyword">int</span> end; <span class="comment">// 求和区间的结束位置</span></span><br><span class="line">&#125; SubseqSum;</span><br><span class="line"></span><br><span class="line"><span class="function">SubseqSum <span class="title">max_subseq_sum_force_adv</span><span class="params">(<span class="keyword">int</span> seq[], <span class="keyword">int</span> seq_len)</span> </span>&#123;</span><br><span class="line">    SubseqSum max_sum = &#123; .value = <span class="number">0</span>, .start = <span class="number">0</span>, .end = <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> max_sum_value = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; seq_len; i++) &#123;</span><br><span class="line">        <span class="comment">// 通过sum_value记录从i到j-1这个区间的和，</span></span><br><span class="line">        <span class="comment">// 当求解i到j区间的和时，其便等效于sum_value+seq[j]</span></span><br><span class="line">        <span class="keyword">int</span> sum_value = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; seq_len; j++) &#123;</span><br><span class="line">            sum_value += seq[j];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (sum_value &gt; max_sum_value) &#123;</span><br><span class="line">                max_sum_value = sum_value;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 更新最大子段和的结果及其求和区间</span></span><br><span class="line">                max_sum.value = max_sum_value;</span><br><span class="line">                max_sum.start = i;</span><br><span class="line">                max_sum.end = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max_sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="分治法"><a href="#分治法" class="headerlink" title="分治法"></a>分治法</h3><blockquote>
<p>分治法，即，把一个复杂的问题分成两个或更多的相同或相似的子问题，直到最后子问题可以简单的直接求解，原问题的解即子问题的解的合并。（引用自「维基百科」）</p>
</blockquote>
<p>通过分治法的思想，可以将序列 <script type="math/tex">a_1, a_2, ..., a_n</script> <strong>等分</strong>为两部分，即， <script type="math/tex">a_1, a_2, ..., a_{\frac{n}{2}}</script> （称为<strong>左子序列</strong>） 与 <script type="math/tex">a_{\frac{n}{2}+1}, a_{\frac{n}{2}+2}, ..., a_n</script> （称为<strong>右子序列</strong>） 两个子序列，再分别求解这两个子序列的最大子段和。最终原序列的最大子段和的求解便存在以下情况：</p>
<ul>
<li>原序列的最大子段和等于左子序列的最大子段和</li>
<li>原序列的最大子段和等于右子序列的最大子段和</li>
<li>原序列的最大子段和为 <script type="math/tex">\sum_{k=i}^{j} a_k</script> ，其中， <script type="math/tex">1 \leq i \leq \frac{n}{2}, \frac{n}{2}+1 \leq j \leq n</script></li>
</ul>
<p>前两种情况通过递归可以得到结果，而对于第三种情况，可以从 $\frac{n}{2}$ 和 $\frac{n}{2}+1$ 开始分别向左右两边求和，即，定义如下表达式：</p>
<script type="math/tex; mode=display">
\begin{align}
s1 &= \max_{1 \leq i \leq \frac{n}{2}} \bigg\{ \sum_{k=\frac{n}{2}}^{i} a_k \bigg\} & \Leftrightarrow s1 &= \max\bigg\{ a_{\frac{n}{2}}, a_{\frac{n}{2}} + a_{\frac{n}{2}-1}, ..., a_{\frac{n}{2}} + a_{\frac{n}{2}-1} + ... + a_2 + a_1 \bigg\}, i=i-1 \rightarrow 1 \\
s2 &= \max_{\frac{n}{2}+1 \leq j \leq n} \bigg\{ \sum_{k=\frac{n}{2}+1}^{j} a_k \bigg\} & \Leftrightarrow s2 &= \max\bigg\{ a_{\frac{n}{2}+1}, a_{\frac{n}{2}+1} + a_{\frac{n}{2}+2}, ..., a_{\frac{n}{2}+1} + a_{\frac{n}{2}+2} + ... + a_{n-1} + a_n \bigg\}, j=j+1 \rightarrow n
\end{align}</script><p>则 <script type="math/tex">s1+s2</script> 即为第三种情况的最优解。注意，为了准确传达出向左右两边<strong>推进</strong>求和的过程，这里对求和公式做了变换，让 $k$ 始终从中间位置（即 <script type="math/tex">\frac{n}{2}</script> 和 <script type="math/tex">\frac{n}{2}+1</script> 处）开始向 <script type="math/tex">i</script> 递减或向 <script type="math/tex">j</script> 递增。</p>
<p>根据以上分析可编写其实现代码为（时间复杂度为 $O(n\log n)$ ）：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">SubseqSum</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> value; <span class="comment">// 序列区间求和后的值</span></span><br><span class="line">    <span class="keyword">int</span> start; <span class="comment">// 求和区间的开始位置</span></span><br><span class="line">    <span class="keyword">int</span> end; <span class="comment">// 求和区间的结束位置</span></span><br><span class="line">&#125; SubseqSum;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> num0, <span class="keyword">int</span> num1)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num0 &gt; num1 ? num0 : num1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">SubseqSum <span class="title">max_subseq_sum_divide</span><span class="params">(<span class="keyword">int</span> seq[], <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (left == right) &#123;</span><br><span class="line">        <span class="keyword">return</span> (SubseqSum) &#123;</span><br><span class="line">            .value = max(<span class="number">0</span>, seq[left]),</span><br><span class="line">            .start = left,</span><br><span class="line">            .end = left</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> center = (left + right) / <span class="number">2</span>;</span><br><span class="line">    <span class="comment">// 计算左边区间的最大子段和</span></span><br><span class="line">    SubseqSum left_max_sum = max_subseq_sum_divide(seq, left, center);</span><br><span class="line">    <span class="comment">// 计算右边区间的最大子段和</span></span><br><span class="line">    SubseqSum right_max_sum = max_subseq_sum_divide(seq, center + <span class="number">1</span>, right);</span><br><span class="line">    <span class="comment">// 计算从中间位置向左右区间的最大子段和</span></span><br><span class="line">    SubseqSum center_max_sum = max_subseq_sum_divide_for_center(seq, center, left, right);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 三个部分的最大结果即为所求的最大子段和</span></span><br><span class="line">    SubseqSum max_sum = center_max_sum;</span><br><span class="line">    <span class="keyword">if</span>(max_sum.value &lt; left_max_sum.value) &#123;</span><br><span class="line">        max_sum = left_max_sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(max_sum.value &lt; right_max_sum.value) &#123;</span><br><span class="line">        max_sum = right_max_sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max_sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从中间位置开始对该位置左右两边子段进行求和</span></span><br><span class="line"><span class="function">SubseqSum <span class="title">max_subseq_sum_divide_for_center</span><span class="params">(<span class="keyword">int</span> seq[], <span class="keyword">int</span> center, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">    SubseqSum max_sum = &#123; .value = <span class="number">0</span>, .start = center, .end = center &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// [left, ..., center, center + 1, ..., right]</span></span><br><span class="line">    <span class="comment">//           &lt;-- i       j --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 先从center开始向左推进以计算左边子段求和的最大值：</span></span><br><span class="line">    <span class="comment">// - i记录的是左边求和区间的左边界（右边界为center）</span></span><br><span class="line">    <span class="comment">// - 只有求和结果（left_sum_value）大于0才会推进</span></span><br><span class="line">    <span class="keyword">int</span> left_sum_value = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> left_max_sum_value = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = center; i &gt;= left; i--) &#123;</span><br><span class="line">        left_sum_value += seq[i];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (left_sum_value &gt; left_max_sum_value) &#123;</span><br><span class="line">            left_max_sum_value = left_sum_value;</span><br><span class="line">            max_sum.start = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 再从center+1开始向右推进以计算右边子段求和的最大值：</span></span><br><span class="line">    <span class="comment">// - j记录的是右边求和区间的右边界（左边界为center+1）</span></span><br><span class="line">    <span class="comment">// - 只有求和结果（right_sum_value）大于0才会推进</span></span><br><span class="line">    <span class="keyword">int</span> right_sum_value = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> right_max_sum_value = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = center + <span class="number">1</span>; j &lt;= right; j++) &#123;</span><br><span class="line">        right_sum_value += seq[j];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(right_sum_value &gt; right_max_sum_value) &#123;</span><br><span class="line">            right_max_sum_value = right_sum_value;</span><br><span class="line">            max_sum.end = j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最后所求的子段和为左右两个子段的 最大求和值 之和</span></span><br><span class="line">    <span class="keyword">int</span> max_sum_value = left_max_sum_value + right_max_sum_value;</span><br><span class="line"></span><br><span class="line">    max_sum.value = max_sum_value;</span><br><span class="line">    <span class="comment">// 子段求和未向左推进（向左求和的结果依然为0）但向右推进（向右求和的结果大于0）了，</span></span><br><span class="line">    <span class="comment">// 则表示求和区间应该从右边开始</span></span><br><span class="line">    <span class="keyword">if</span> (left_max_sum_value == <span class="number">0</span> &amp;&amp; right_max_sum_value &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        max_sum.start = center + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 子段求和未向右推进（向右求和的结果依然为0）但向左推进（向左求和的结果大于0）了，</span></span><br><span class="line">    <span class="comment">// 则表示求和区间应该从左边开始</span></span><br><span class="line">    <span class="keyword">if</span> (right_max_sum_value == <span class="number">0</span> &amp;&amp; left_max_sum_value &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        max_sum.end = center;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 而若向左/向右均没有推进，则保持原地不动</span></span><br><span class="line">    <span class="keyword">if</span> (left_max_sum_value == <span class="number">0</span> &amp;&amp; right_max_sum_value == <span class="number">0</span>) &#123;</span><br><span class="line">        max_sum.start = max_sum.end = center;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> max_sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意：</p>
<ul>
<li>在实现代码中将上面提到的第三种情况提取出来以便对该特例进行独立分析，也避免了对前面的主过程的阅读和分析造成的干扰</li>
<li>在<code>max_subseq_sum_divide_for_center</code>的最后需要对求和区间的起止位置进行修正，具体内容见代码注释</li>
</ul>
<h3 id="动态规划法"><a href="#动态规划法" class="headerlink" title="动态规划法"></a>动态规划法</h3><p>在应用该方法之前，先来看看其数学的推导过程。</p>
<p>假设存在序列 $a_1, a_2, a_3, …, a_n$ ，记 $b_j$ 表示该序列从 $1$ 到 $j$ 的区间内的最大子段和，则其可用如下公式表示：</p>
<script type="math/tex; mode=display">
b_j = \max_{1 \leq i \leq j} \bigg\{ \sum_{k=i}^{j} a_k \bigg\}, 1 \leq j \leq n</script><p>也就是以下等式成立：</p>
<script type="math/tex; mode=display">
\begin{align}
b_1 &= a_1 \\
b_2 &= \max\{ a_1 + a_2, a_2 \} \\
b_3 &= \max\{ a_1 + a_2 + a_3, a_2 + a_3, a_3 \}
\end{align}</script><p>因此，求解整个序列的最大子段和 $F(n)$ 的数学公式即为：</p>
<script type="math/tex; mode=display">
F(n) = \max_{1 \leq i \leq j \leq n} \bigg\{ \sum_{k=i}^{j} a_k \bigg\} = \max_{1 \leq j \leq n} \Bigg\{ \max_{1 \leq i \leq j} \bigg\{ \sum_{k=i}^{j} a_k \bigg\} \Bigg\} = \max_{1 \leq j \leq n}\{ b_j \}</script><p>也就是说，要求解整个序列的最大子段和，可以转化为计算从 $1$ 到 $n$ 的区间内的 $b_j$ （ $1 \leq j \leq n$ ） 的最大值。</p>
<p>而 $b_j$ 可以用递归表达式表示为：</p>
<script type="math/tex; mode=display">
b_j = \max\{ b_{j - 1} + a_j, a_j \}, 1 \leq j \leq n</script><p>但是，当 <script type="math/tex">b_{j-1}</script> 小于等于0时，无论 <script type="math/tex">a_j</script> 为正还是负，最终 <script type="math/tex">b_{j-1}+a_j</script> 都将小于 <script type="math/tex">a_j</script> ，这时将有 <script type="math/tex">b_j=a_j</script> 成立，因此，最终 <script type="math/tex">b_j</script> 可表示为：</p>
<script type="math/tex; mode=display">
b_j = \begin{cases}
b_{j - 1} + a_j,    & b_{j - 1} > 0 \\
a_j,                & b_{j - 1} \leq 0
\end{cases}
, 1 \leq j \leq n</script><p>以上推导过程需要仔细阅读和分析，在完全掌握该推导过程后，便可很容易编写出对应的求解代码（时间复杂度为 $O(n)$ ），即：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_SEQ_LEN 1000</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">SubseqSum</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> value; <span class="comment">// 序列区间求和后的值</span></span><br><span class="line">    <span class="keyword">int</span> start; <span class="comment">// 求和区间的开始位置</span></span><br><span class="line">    <span class="keyword">int</span> end; <span class="comment">// 求和区间的结束位置</span></span><br><span class="line">&#125; SubseqSum;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> num0, <span class="keyword">int</span> num1)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num0 &gt; num1 ? num0 : num1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">SubseqSum <span class="title">max_subseq_sum_dynamic_programming</span><span class="params">(<span class="keyword">int</span> seq[], <span class="keyword">int</span> seq_len)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 求和序列：存放子段求和的中间结果，开始元素为传入序列的第0项</span></span><br><span class="line">    <span class="keyword">int</span> seq_sum[MAX_SEQ_LEN] = &#123; seq[<span class="number">0</span>] &#125;;</span><br><span class="line">    SubseqSum max_sum = &#123; .value = max(<span class="number">0</span>, seq_sum[<span class="number">0</span>]), .start = <span class="number">0</span>, .end = <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> max_sum_value = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> expected_sum_start = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; seq_len; j++) &#123;</span><br><span class="line">        <span class="comment">// 向左看，若前面已计算的子段和大于0，则加上当前项后，可能会得到更大的子段和，</span></span><br><span class="line">        <span class="comment">// 即对应公式中的“b[j] = b[j-1] + a[j]”分支</span></span><br><span class="line">        <span class="keyword">if</span> (seq_sum[j - <span class="number">1</span>] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            seq_sum[j] = seq_sum[j - <span class="number">1</span>] + seq[j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 而若前面已计算的子段和小于0，则丢弃该结果，从当前位置开始重新计算子段和，</span></span><br><span class="line">        <span class="comment">// 即对应公式中的“b[j] = a[j]”分支</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            seq_sum[j] = seq[j];</span><br><span class="line">            <span class="comment">// 但新的子段和不一定大于当前已得到的最大子段和，</span></span><br><span class="line">            <span class="comment">// 故，需临时存放该新子段的开始位置，待最大子段和被更新后再更新其所在的子段区间</span></span><br><span class="line">            expected_sum_start = j;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这里取公式中的“b[j]”的最大值</span></span><br><span class="line">        <span class="keyword">if</span> (seq_sum[j] &gt; max_sum_value) &#123;</span><br><span class="line">            max_sum_value = seq_sum[j];</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 应用新的子段和，并更新该子段的开始和结束位置</span></span><br><span class="line">            max_sum.value = max_sum_value;</span><br><span class="line">            max_sum.start = expected_sum_start;</span><br><span class="line">            max_sum.end = j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max_sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://www.cnblogs.com/youxin/p/3405268.html" target="_blank" rel="noopener">最大子段和问题总结</a>：涉及穷举法、分治法、动态规划法及改进</li>
<li><a href="https://blog.csdn.net/Netown_Ethereal/article/details/23865151" target="_blank" rel="noopener">动态规划之最大子段和</a>：对动态规划法的公式讲解较为详细</li>
<li><a href="https://blog.csdn.net/ccDLlyy/article/details/52244504" target="_blank" rel="noopener">最大子段和(分治与动态规划典例)</a>：对分治法讲解较为详细</li>
</ul>
<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>以下为完整的各方案代码，并包含性能测试：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/time.h&gt; // for gettimeofday()</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt; // for time()</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_SEQ_LEN 1000</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">SubseqSum</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> value; <span class="comment">// 序列区间求和后的值</span></span><br><span class="line">    <span class="keyword">int</span> start; <span class="comment">// 求和区间的开始位置</span></span><br><span class="line">    <span class="keyword">int</span> end; <span class="comment">// 求和区间的结束位置</span></span><br><span class="line">&#125; SubseqSum;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">current_timestamp</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> num0, <span class="keyword">int</span> num1)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_random_sequence</span><span class="params">(<span class="keyword">int</span> seq[], <span class="keyword">int</span> len)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_sequence</span><span class="params">(<span class="keyword">int</span> seq[], <span class="keyword">int</span> len)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum_subseq</span><span class="params">(<span class="keyword">int</span> seq[], <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">SubseqSum <span class="title">max_subseq_sum_force</span><span class="params">(<span class="keyword">int</span> seq[], <span class="keyword">int</span> seq_len)</span></span>;</span><br><span class="line"><span class="function">SubseqSum <span class="title">max_subseq_sum_force_adv</span><span class="params">(<span class="keyword">int</span> seq[], <span class="keyword">int</span> seq_len)</span></span>;</span><br><span class="line"><span class="function">SubseqSum <span class="title">max_subseq_sum_divide</span><span class="params">(<span class="keyword">int</span> seq[], <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span>;</span><br><span class="line"><span class="function">SubseqSum <span class="title">max_subseq_sum_divide_for_center</span><span class="params">(<span class="keyword">int</span> seq[], <span class="keyword">int</span> center, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span>;</span><br><span class="line"><span class="function">SubseqSum <span class="title">max_subseq_sum_dynamic_programming</span><span class="params">(<span class="keyword">int</span> seq[], <span class="keyword">int</span> seq_len)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> seq_len = <span class="number">50</span>;</span><br><span class="line">    <span class="keyword">int</span> seq[MAX_SEQ_LEN];</span><br><span class="line">    init_random_sequence(seq, seq_len);</span><br><span class="line">    <span class="comment">// int seq[] = &#123;-31, 95, 62, -45, 13, 31, -77, 22, 94, -65, -67, 50, -66, 28, -98, -34, -97, -66, -84, 87, 32, -28, 43, -75, -64, 24, 88, 39, -54, -16, 89, 82, -81, 45, 61, -62, -51, -4, -41, -32, -21, -37, 32, 63, -44, -39, -30, -19, 71, 77&#125;;</span></span><br><span class="line">    <span class="comment">// int seq[] = &#123;-5, 11, -4, 13, -4, -2&#125;;</span></span><br><span class="line">    <span class="comment">// int seq[] = &#123;0, 0, 0, 0, 0, 0&#125;; // 不同方法得到的求和区间会不同</span></span><br><span class="line">    <span class="comment">// int seq_len = sizeof(seq) / sizeof(seq[0]);</span></span><br><span class="line">    SubseqSum max_sum;</span><br><span class="line">    <span class="keyword">double</span> start_time, end_time;</span><br><span class="line"></span><br><span class="line">    print_sequence(seq, seq_len);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n以上序列的最大子段和为:\n"</span>);</span><br><span class="line"></span><br><span class="line">    start_time = current_timestamp();</span><br><span class="line">    max_sum = max_subseq_sum_force(seq, seq_len);</span><br><span class="line">    end_time = current_timestamp();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"- 穷举算法        : %d (求和区间: [%d, %d] +=&gt;&gt; %d), 耗时: %f毫秒\n"</span></span><br><span class="line">                , max_sum.value</span><br><span class="line">                , max_sum.start, max_sum.end</span><br><span class="line">                , sum_subseq(seq, max_sum.start, max_sum.end)</span><br><span class="line">                , end_time - start_time);</span><br><span class="line"></span><br><span class="line">    start_time = current_timestamp();</span><br><span class="line">    max_sum = max_subseq_sum_force_adv(seq, seq_len);</span><br><span class="line">    end_time = current_timestamp();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"- 穷举算法(改进版): %d (求和区间: [%d, %d] +=&gt;&gt; %d), 耗时: %f毫秒\n"</span></span><br><span class="line">                , max_sum.value</span><br><span class="line">                , max_sum.start, max_sum.end</span><br><span class="line">                , sum_subseq(seq, max_sum.start, max_sum.end)</span><br><span class="line">                , end_time - start_time);</span><br><span class="line"></span><br><span class="line">    start_time = current_timestamp();</span><br><span class="line">    max_sum = max_subseq_sum_divide(seq, <span class="number">0</span>, seq_len - <span class="number">1</span>);</span><br><span class="line">    end_time = current_timestamp();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"- 分治算法        : %d (求和区间: [%d, %d] +=&gt;&gt; %d), 耗时: %f毫秒\n"</span></span><br><span class="line">                , max_sum.value</span><br><span class="line">                , max_sum.start, max_sum.end</span><br><span class="line">                , sum_subseq(seq, max_sum.start, max_sum.end)</span><br><span class="line">                , end_time - start_time);</span><br><span class="line"></span><br><span class="line">    start_time = current_timestamp();</span><br><span class="line">    max_sum = max_subseq_sum_dynamic_programming(seq, seq_len);</span><br><span class="line">    end_time = current_timestamp();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"- 动态规划算法    : %d (求和区间: [%d, %d] +=&gt;&gt; %d), 耗时: %f毫秒\n"</span></span><br><span class="line">                , max_sum.value</span><br><span class="line">                , max_sum.start, max_sum.end</span><br><span class="line">                , sum_subseq(seq, max_sum.start, max_sum.end)</span><br><span class="line">                , end_time - start_time);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 穷举（蛮力）法求解</span></span><br><span class="line"><span class="function">SubseqSum <span class="title">max_subseq_sum_force</span><span class="params">(<span class="keyword">int</span> seq[], <span class="keyword">int</span> seq_len)</span> </span>&#123;</span><br><span class="line">    SubseqSum max_sum = &#123; .value = <span class="number">0</span>, .start = <span class="number">0</span>, .end = <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> max_sum_value = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; seq_len; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; seq_len; j++) &#123;</span><br><span class="line">            <span class="comment">// 计算从i到j这个区间的和</span></span><br><span class="line">            <span class="keyword">int</span> sum_value = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = i; k &lt;= j; k++) &#123;</span><br><span class="line">                sum_value += seq[k];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 当i到j的区间的和大于当前已记录的最大子段和时，更新该最大子段和为该区间的和</span></span><br><span class="line">            <span class="keyword">if</span> (sum_value &gt; max_sum_value) &#123;</span><br><span class="line">                max_sum_value = sum_value;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 更新最大子段和的结果及其求和区间</span></span><br><span class="line">                max_sum.value = max_sum_value;</span><br><span class="line">                max_sum.start = i;</span><br><span class="line">                max_sum.end = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max_sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 穷举法（改进版）求解</span></span><br><span class="line"><span class="function">SubseqSum <span class="title">max_subseq_sum_force_adv</span><span class="params">(<span class="keyword">int</span> seq[], <span class="keyword">int</span> seq_len)</span> </span>&#123;</span><br><span class="line">    SubseqSum max_sum = &#123; .value = <span class="number">0</span>, .start = <span class="number">0</span>, .end = <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> max_sum_value = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; seq_len; i++) &#123;</span><br><span class="line">        <span class="comment">// 通过sum_value记录从i到j-1这个区间的和，</span></span><br><span class="line">        <span class="comment">// 当求解i到j区间的和时，其便等效于sum_value+seq[j]</span></span><br><span class="line">        <span class="keyword">int</span> sum_value = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; seq_len; j++) &#123;</span><br><span class="line">            sum_value += seq[j];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (sum_value &gt; max_sum_value) &#123;</span><br><span class="line">                max_sum_value = sum_value;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 更新最大子段和的结果及其求和区间</span></span><br><span class="line">                max_sum.value = max_sum_value;</span><br><span class="line">                max_sum.start = i;</span><br><span class="line">                max_sum.end = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max_sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 分治法求解</span></span><br><span class="line"><span class="function">SubseqSum <span class="title">max_subseq_sum_divide</span><span class="params">(<span class="keyword">int</span> seq[], <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (left == right) &#123;</span><br><span class="line">        <span class="keyword">return</span> (SubseqSum) &#123;</span><br><span class="line">            .value = max(<span class="number">0</span>, seq[left]),</span><br><span class="line">            .start = left,</span><br><span class="line">            .end = left</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> center = (left + right) / <span class="number">2</span>;</span><br><span class="line">    <span class="comment">// 计算左边区间的最大子段和</span></span><br><span class="line">    SubseqSum left_max_sum = max_subseq_sum_divide(seq, left, center);</span><br><span class="line">    <span class="comment">// 计算右边区间的最大子段和</span></span><br><span class="line">    SubseqSum right_max_sum = max_subseq_sum_divide(seq, center + <span class="number">1</span>, right);</span><br><span class="line">    <span class="comment">// 计算从中间位置向左右区间的最大子段和</span></span><br><span class="line">    SubseqSum center_max_sum = max_subseq_sum_divide_for_center(seq, center, left, right);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 三个部分的最大结果即为所求的最大子段和</span></span><br><span class="line">    SubseqSum max_sum = center_max_sum;</span><br><span class="line">    <span class="keyword">if</span>(max_sum.value &lt; left_max_sum.value) &#123;</span><br><span class="line">        max_sum = left_max_sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(max_sum.value &lt; right_max_sum.value) &#123;</span><br><span class="line">        max_sum = right_max_sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max_sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 分治法求解：从中间位置开始对该位置左右两边子段进行求和</span></span><br><span class="line"><span class="function">SubseqSum <span class="title">max_subseq_sum_divide_for_center</span><span class="params">(<span class="keyword">int</span> seq[], <span class="keyword">int</span> center, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">    SubseqSum max_sum = &#123; .value = <span class="number">0</span>, .start = center, .end = center &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// [left, ..., center, center + 1, ..., right]</span></span><br><span class="line">    <span class="comment">//           &lt;-- i       j --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 先从center开始向左推进以计算左边子段求和的最大值：</span></span><br><span class="line">    <span class="comment">// - i记录的是左边求和区间的左边界（右边界为center）</span></span><br><span class="line">    <span class="comment">// - 只有求和结果（left_sum_value）大于0才会推进</span></span><br><span class="line">    <span class="keyword">int</span> left_sum_value = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> left_max_sum_value = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = center; i &gt;= left; i--) &#123;</span><br><span class="line">        left_sum_value += seq[i];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (left_sum_value &gt; left_max_sum_value) &#123;</span><br><span class="line">            left_max_sum_value = left_sum_value;</span><br><span class="line">            max_sum.start = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 再从center+1开始向右推进以计算右边子段求和的最大值：</span></span><br><span class="line">    <span class="comment">// - j记录的是右边求和区间的右边界（左边界为center+1）</span></span><br><span class="line">    <span class="comment">// - 只有求和结果（right_sum_value）大于0才会推进</span></span><br><span class="line">    <span class="keyword">int</span> right_sum_value = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> right_max_sum_value = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = center + <span class="number">1</span>; j &lt;= right; j++) &#123;</span><br><span class="line">        right_sum_value += seq[j];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(right_sum_value &gt; right_max_sum_value) &#123;</span><br><span class="line">            right_max_sum_value = right_sum_value;</span><br><span class="line">            max_sum.end = j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最后所求的子段和为左右两个子段的 最大求和值 之和</span></span><br><span class="line">    <span class="keyword">int</span> max_sum_value = left_max_sum_value + right_max_sum_value;</span><br><span class="line"></span><br><span class="line">    max_sum.value = max_sum_value;</span><br><span class="line">    <span class="comment">// 子段求和未向左推进（向左求和的结果依然为0）但向右推进（向右求和的结果大于0）了，</span></span><br><span class="line">    <span class="comment">// 则表示求和区间应该从右边开始</span></span><br><span class="line">    <span class="keyword">if</span> (left_max_sum_value == <span class="number">0</span> &amp;&amp; right_max_sum_value &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        max_sum.start = center + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 子段求和未向右推进（向右求和的结果依然为0）但向左推进（向左求和的结果大于0）了，</span></span><br><span class="line">    <span class="comment">// 则表示求和区间应该从左边开始</span></span><br><span class="line">    <span class="keyword">if</span> (right_max_sum_value == <span class="number">0</span> &amp;&amp; left_max_sum_value &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        max_sum.end = center;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 而若向左/向右均没有推进，则保持原地不动</span></span><br><span class="line">    <span class="keyword">if</span> (left_max_sum_value == <span class="number">0</span> &amp;&amp; right_max_sum_value == <span class="number">0</span>) &#123;</span><br><span class="line">        max_sum.start = max_sum.end = center;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> max_sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 动态规划法求解</span></span><br><span class="line"><span class="function">SubseqSum <span class="title">max_subseq_sum_dynamic_programming</span><span class="params">(<span class="keyword">int</span> seq[], <span class="keyword">int</span> seq_len)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 求和序列：存放子段求和的中间结果，开始元素为传入序列的第0项</span></span><br><span class="line">    <span class="keyword">int</span> seq_sum[MAX_SEQ_LEN] = &#123; seq[<span class="number">0</span>] &#125;;</span><br><span class="line">    SubseqSum max_sum = &#123; .value = max(<span class="number">0</span>, seq_sum[<span class="number">0</span>]), .start = <span class="number">0</span>, .end = <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> max_sum_value = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> expected_sum_start = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; seq_len; j++) &#123;</span><br><span class="line">        <span class="comment">// 向左看，若前面已计算的子段和大于0，则加上当前项后，可能会得到更大的子段和，</span></span><br><span class="line">        <span class="comment">// 即对应公式中的“b[j] = b[j-1] + a[j]”分支</span></span><br><span class="line">        <span class="keyword">if</span> (seq_sum[j - <span class="number">1</span>] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            seq_sum[j] = seq_sum[j - <span class="number">1</span>] + seq[j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 而若前面已计算的子段和小于0，则丢弃该结果，从当前位置开始重新计算子段和，</span></span><br><span class="line">        <span class="comment">// 即对应公式中的“b[j] = a[j]”分支</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            seq_sum[j] = seq[j];</span><br><span class="line">            <span class="comment">// 但新的子段和不一定大于当前已得到的最大子段和，</span></span><br><span class="line">            <span class="comment">// 故，需临时存放该新子段的开始位置，待最大子段和被更新后再更新其所在的子段区间</span></span><br><span class="line">            expected_sum_start = j;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这里取公式中的“b[j]”的最大值</span></span><br><span class="line">        <span class="keyword">if</span> (seq_sum[j] &gt; max_sum_value) &#123;</span><br><span class="line">            max_sum_value = seq_sum[j];</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 应用新的子段和，并更新该子段的开始和结束位置</span></span><br><span class="line">            max_sum.value = max_sum_value;</span><br><span class="line">            max_sum.start = expected_sum_start;</span><br><span class="line">            max_sum.end = j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max_sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> num0, <span class="keyword">int</span> num1)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num0 &gt; num1 ? num0 : num1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取当前系统时间的毫秒值</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">current_timestamp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">te</span>;</span></span><br><span class="line">    gettimeofday(&amp;te, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> msec = te.tv_sec * <span class="number">1000.0</span> + (te.tv_usec / <span class="number">1000.0</span>);</span><br><span class="line">    <span class="keyword">return</span> msec;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_random_sequence</span><span class="params">(<span class="keyword">int</span> seq[], <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// https://www.geeksforgeeks.org/rand-and-srand-in-ccpp/</span></span><br><span class="line">    srand(time(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="comment">// 取0-100之间的数并随机产生正负</span></span><br><span class="line">        seq[i] = (<span class="keyword">int</span>) (rand() * <span class="number">1.0</span> / RAND_MAX * <span class="number">100</span>) * (rand() % <span class="number">2</span> == <span class="number">0</span> ? <span class="number">1</span> : <span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_sequence</span><span class="params">(<span class="keyword">int</span> seq[], <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> columns = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%3d: %3d, "</span>, i, seq[i]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((i + <span class="number">1</span>) % columns == <span class="number">0</span> &amp;&amp; i &lt; len - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum_subseq</span><span class="params">(<span class="keyword">int</span> seq[], <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = (start &lt; end ? start : end); i &lt;= (end &gt; start ? end : start); i++) &#123;</span><br><span class="line">        sum += seq[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 算法分析 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> 分治法 </tag>
            
            <tag> 最大子段和 </tag>
            
            <tag> 穷举法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[算法分析：求解斐波那契数列]]></title>
      <url>/algorithm-calculating-fibonacci-numbers/</url>
      <content type="html"><![CDATA[<blockquote>
<p>算法分析系列文章中的代码可被任何人无偿使用于任何场景且无需注明来源也不必在使用前征得本文作者同意。</p>
<p>算法分析系列文章旨在传播准确、完整、简洁、易懂、规范的代码实现，并传授基本的编程思想和良好的编码习惯与技巧。</p>
<p>若文章中的代码存在问题或逻辑错误，请通过邮件等形式（见文章结尾）告知于本文作者以便及时修正错误或改进代码。</p>
<p>PS：若为转载该文章，请务必注明来源，本站点欢迎大家转载。</p>
</blockquote>
<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>从0和1开始，之后的每一个数均为前两个数的和，这样性质的数依次排列，便称为<a href="https://zh.wikipedia.org/wiki/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97" target="_blank" rel="noopener">斐波那契数列</a>。即形成如下数列形式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, ...</span><br></pre></td></tr></table></figure>
<p>用数学公式表示该数列即为：</p>
<script type="math/tex; mode=display">
F(n) = \begin{cases}
0,                      & n = 0 \\
1,                      & n = 1 \\
F(n - 1) + F(n - 2),    & n >= 2
\end{cases}</script><p>本案例所要解决的就是：给定一个整数<code>n</code>，求解斐波那契数列中第<code>n</code>项的数值。注意，<code>0</code>表示第零项，而不是第一项。<br><a id="more"></a></p>
<h2 id="求解方案"><a href="#求解方案" class="headerlink" title="求解方案"></a>求解方案</h2><h3 id="递归法"><a href="#递归法" class="headerlink" title="递归法"></a>递归法</h3><p>从斐波那契数列的数学公式可以很直观地想到通过<a href="https://zh.wikipedia.org/wiki/%E9%80%92%E5%BD%92" target="_blank" rel="noopener">递归</a>方法来求解（这里仅为代码片断，详细的见<a href="#附录">附录</a>）：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">uint64_t</span> fibonacci_recursion(<span class="keyword">uint32_t</span> n) &#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fibonacci_recursion(n - <span class="number">1</span>) + fibonacci_recursion(n - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意：</p>
<ul>
<li>这里定义数列的数值为<code>uint64_t</code>类型，其所能表示的最大值大于<code>int</code>类型的数据，从而便于计算更大长度的数列</li>
</ul>
<p>以上递归过程可以用下图展示（以<code>n=9</code>为例）：</p>
<p><img src="https://www.plantuml.com/plantuml/png/SoWkIImgISaluKh9J2zABCXGS5Uevb80WZHBXUYSnAJK75ibDmrBJQLOg6XycWMIX0MoX3cIX3cA3lnoPaXoPYW6ufSpHP8pHJ4JlrOBedGJey84IOK9I0Kiw7Jj80hH-EPS23FWQe32M4ND48hD8S8GQx6AcYAP39D1k1Id748ZGZ6QNg0IWYfCk6gv75BpKe092G00" alt="递归法求解斐波那契数列"></p>
<details>
<summary>Show graph description</summary>
<pre>
@startdot
digraph G {
    f9 [label="F(9)"]
    f9_f8 [label="F(8)"]
    f9_f7 [label="F(7)"]
    f9_f8_f7 [label="F(7)"]
    f9_f8_f6 [label="F(6)"]
    f9_f7_f6 [label="F(6)"]
    f9_f7_f5 [label="F(5)"]
    f9_f8_f7_f6 [label="F(6)"]
    f9_f8_f7_f5 [label="F(5)"]
    f9_f8_f7_f6_f5 [label="F(5)"]
    f9_f8_f7_f6_f4 [label="F(4)"]

    f9 -> f9_f8
    f9 -> f9_f7

    f9_f8 -> f9_f8_f7
    f9_f8 -> f9_f8_f6

    f9_f7 -> f9_f7_f6
    f9_f7 -> f9_f7_f5

    f9_f8_f7 -> f9_f8_f7_f6
    f9_f8_f7 -> f9_f8_f7_f5

    f9_f8_f7_f6 -> f9_f8_f7_f6_f5
    f9_f8_f7_f6 -> f9_f8_f7_f6_f4
}
@enddot
</pre>
</details>

<p>从上图可以看出来，整个过程就是在计算<a href="https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91" target="_blank" rel="noopener">二叉树</a>的根节点的数值（=左节点数值+右节点数值）。遍历所有节点的时间复杂度为 $O(2^n)$ ，该时间复杂度也就是递归的时间复杂度。</p>
<h3 id="动态规划法"><a href="#动态规划法" class="headerlink" title="动态规划法"></a>动态规划法</h3><p>从以上递归方案可以发现，在计算过程中出现了大量的重复计算，比如，在计算<code>F(9)</code>时需要计算<code>F(8)</code>与<code>F(7)</code>，而计算<code>F(8)</code>时，又要重新计算<code>F(7)</code>。而如果我们将<code>F(7)</code>的计算结果保留下来，则当<code>F(8)</code>计算完毕后，便可直接通过记录下来的<code>F(7)</code>与<code>F(8)</code>求和得到<code>F(9)</code>的结果。也就免去了对二叉树右子树的遍历过程，只需要自顶向下一直沿着左子树做遍历即可，所需时间为二叉树的高度<code>n</code>，时间复杂度也就变为 $O(n)$ 。</p>
<p>而对于包含重复求解的过程，采用<a href="https://zh.wikipedia.org/wiki/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92" target="_blank" rel="noopener">动态规划法</a>可以很好地避免该问题。</p>
<blockquote>
<p>动态规划在查找有很多<strong>重叠子问题</strong>的情况的最优解时有效。它将问题重新组合成子问题。为了避免多次解决这些子问题，它们的结果都逐渐被计算并被保存，从简单的问题直到整个问题都被解决。因此，动态规划保存递归时的结果，因而不会在解决同样的问题时花费时间。（引用自「维基百科」）</p>
</blockquote>
<p>以下为采用动态规划法的求解代码：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// uint64_t所能表示的最大整数为18446744073709551615,</span></span><br><span class="line"><span class="comment">// 而数列的第94项将大于该数，故，这里限定最大只能求解第93项的数值，</span></span><br><span class="line"><span class="comment">// 不过，由于数组索引为0的位置表示的为数列的第0项，故，数组的实际长度应为n+1，</span></span><br><span class="line"><span class="comment">// 而索引位置为n的元素即为数列的第n项数值</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_FIBONACCI_SIZE 94</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">uint64_t</span> fibonacci_dynamic_programming(<span class="keyword">uint32_t</span> n) &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">uint64_t</span> fibonacci[MAX_FIBONACCI_SIZE] = &#123;<span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 数列的第n项不为0时，便可认定为已经计算过该项的值，直接返回，无需继续计算</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (fibonacci[n] != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> fibonacci[n];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 按照数列的数据公式递归求解第n项的值，并将其记录在数组中，这样，在左递归完成后，便不会再继续右递归了</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        fibonacci[n] = fibonacci_dynamic_programming(n - <span class="number">1</span>) + fibonacci_dynamic_programming(n - <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">return</span> fibonacci[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意：</p>
<ul>
<li>这里采用C语言中的<strong>静态局部变量</strong>（<code>fibonacci</code>）来记录过程数据，可避免从外部传递数组，以提高接口的<strong>内聚性</strong>。若需要打印数列的所有项的数值，则可从外部传入数组，再将各项结果存储在该数组中，最后按序打印即可</li>
</ul>
<h3 id="迭代法"><a href="#迭代法" class="headerlink" title="迭代法"></a>迭代法</h3><blockquote>
<p>可能有同学会将该方法视为动态规划法的迭代版本，但是，本文却不是很赞同。</p>
<p>虽然，在该迭代过程中有存储数列前一项的计算结果，但其与动态规划存在的一个不同是，动态规划中所存储的计算结果不是立即被使用的，其是在遇到对相同项求值时才被调用的，且对其也可能存在多次调用的情况，而迭代过程中的计算结果只会被使用一次而且是立即使用。</p>
<p>所以，本文将这两种视为不同且独立的方法。</p>
</blockquote>
<p>其实，如果不考虑数学公式所造成的误导性以及对相关算法的学习的角度，而仅从对数列的描述来看，最直接的求解方法应该是迭代（即，循环）方式。因为，<strong>从第2项开始，数列的每项数值均为前两项的和</strong>。用代码表示即为：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">uint64_t</span> fibonacci_loop(<span class="keyword">uint32_t</span> n) &#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 数列的第n项</span></span><br><span class="line">        <span class="keyword">uint64_t</span> fib_n = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 数列的第n-1项，初始为第1项，值为1</span></span><br><span class="line">        <span class="keyword">uint64_t</span> fib_n_1 = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 数列的第n-2项，初始为第0项，值为0</span></span><br><span class="line">        <span class="keyword">uint64_t</span> fib_n_2 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 开始状态：</span></span><br><span class="line">        <span class="comment">// [...................n_2....n_1...n.....]</span></span><br><span class="line">        <span class="comment">//                      |      |    |</span></span><br><span class="line">        <span class="comment">// [0, 1, 1, 2, 3, 5, n - 2, n - 1, n, ...]</span></span><br><span class="line">        <span class="comment">// 向右平移后：</span></span><br><span class="line">        <span class="comment">// [.........................n_2...n_1..n.]</span></span><br><span class="line">        <span class="comment">//                            |     |</span></span><br><span class="line">        <span class="comment">// [0, 1, 1, 2, 3, 5, n - 2, n - 1, n, ...]</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">uint32_t</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="comment">// 数列的第n项 = 数列的第n-1项 + 数列的第n-2项</span></span><br><span class="line">            fib_n = fib_n_1 + fib_n_2;</span><br><span class="line">            <span class="comment">// 向右平移1项，即，</span></span><br><span class="line">            <span class="comment">// 上一次计算的第n-1项作为下一次计算的第n-2项，</span></span><br><span class="line">            <span class="comment">// 上一次计算的第n项作为下一次计算的第n-1项</span></span><br><span class="line">            fib_n_2 = fib_n_1;</span><br><span class="line">            fib_n_1 = fib_n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fib_n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从时间复杂度来看，该方法与动态规划法是一样的，二者的时间复杂度均为 $O(n)$ ，只是，从代码性能来看，迭代方式的空间复杂度为 $O(0)$ ，而且，由于递归需要消耗内存的<strong>栈空间</strong>并且调用过程中存在变量入栈出栈操作，因此，递归的性能会稍低于迭代的方式。</p>
<p>但是，在实际应用中，递归方式的代码会比迭代方式的代码更加直观和易读，并且其性能损耗一般可以忽略，故通常，以递归方式编写代码会更好。除非，递归的层次太深（数千上万级别的），造成线程栈空间不足时（线程的栈空间一般为固定大小，且多为几KB），这时，应该采用迭代（循环）方案去做代码实现。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://www.numberempire.com/fibonaccinumbers.php" target="_blank" rel="noopener">Fibonacci Numbers Generator</a>：计算斐波那契数列的站点，最大可计算数列第10000项的数值（有2090位数字）</li>
<li><a href="http://www.maths.surrey.ac.uk/hosted-sites/R.Knott/Fibonacci/fibtable.html" target="_blank" rel="noopener">The Fibonacci series</a>：列出了从0到300的斐波那契数列，可参照该数列检查以上代码计算结果的准确性</li>
<li><a href="https://en.wikibooks.org/wiki/C_Programming/stdint.h#Exact-width_integer_types" target="_blank" rel="noopener">C Programming/stdint.h</a>：C语言的整形类型及所表示的数值范围</li>
<li><a href="https://stackoverflow.com/questions/9225567/how-to-print-a-int64-t-type-in-c/9225648#answer-16221208" target="_blank" rel="noopener">How to print a int64_t type in C</a>：如何通过<code>printf</code>打印<code>uint64_t</code>类型的值 - <code>printf(&quot;a=%jd\n&quot;, a);</code></li>
<li><a href="https://www.cnblogs.com/python27/archive/2011/11/25/2261980.html" target="_blank" rel="noopener">【算法02】3种方法求解斐波那契数列</a>：可以了解和掌握矩阵乘法求解斐波那契数列</li>
<li><a href="http://web.ift.uib.no/Teori/KURS/WRK/TeX/symALL.html" target="_blank" rel="noopener">LaTeX Math Symbols</a></li>
</ul>
<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>以下为完整的各方案代码，并包含性能测试：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// uint64_t所能表示的最大整数为18446744073709551615,</span></span><br><span class="line"><span class="comment">// 而数列的第94项将大于该数，故，这里限定最大只能求解第93项的数值，</span></span><br><span class="line"><span class="comment">// 不过，由于数组索引为0的位置表示的为数列的第0项，故，数组的实际长度应为n+1，</span></span><br><span class="line"><span class="comment">// 而索引位置为n的元素即为数列的第n项数值</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_FIBONACCI_SIZE 94</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">current_timestamp</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">uint64_t</span> fibonacci_recursion(<span class="keyword">uint32_t</span> n);</span><br><span class="line"><span class="keyword">uint64_t</span> fibonacci_dynamic_programming(<span class="keyword">uint32_t</span> n);</span><br><span class="line"><span class="keyword">uint64_t</span> fibonacci_loop(<span class="keyword">uint32_t</span> n);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">uint64_t</span> fib = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">double</span> start_time, end_time;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//printf("Max uint64_t: %ju\n", UINT64_MAX);</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入斐波那契数列长度: "</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">if</span> (n &gt;= MAX_FIBONACCI_SIZE) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"得到所求数列长度为%d, 但本系统支持的最大长度为%d\n"</span>, n, MAX_FIBONACCI_SIZE - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"斐波那契数列的第%d个数为:\n"</span>, n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">40</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"- 递归算法    : 无解（求值过于耗时！）\n"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        start_time = current_timestamp();</span><br><span class="line">        fib = fibonacci_recursion(n);</span><br><span class="line">        end_time = current_timestamp();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"- 递归算法    : %ju, 耗时: %f毫秒\n"</span>, fib, end_time - start_time);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Note：需要通过格式控制符 %ju 来打印uint64_t类型的数据，</span></span><br><span class="line">    <span class="comment">// 否则，会出现因精度丢失而造成输出不准确的问题</span></span><br><span class="line">    start_time = current_timestamp();</span><br><span class="line">    fib = fibonacci_dynamic_programming(n);</span><br><span class="line">    end_time = current_timestamp();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"- 动态规划算法: %ju, 耗时: %f毫秒\n"</span>, fib, end_time - start_time);</span><br><span class="line"></span><br><span class="line">    start_time = current_timestamp();</span><br><span class="line">    fib = fibonacci_loop(n);</span><br><span class="line">    end_time = current_timestamp();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"- 迭代算法    : %ju, 耗时: %f毫秒\n"</span>, fib, end_time - start_time);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 递归法求解</span></span><br><span class="line"><span class="keyword">uint64_t</span> fibonacci_recursion(<span class="keyword">uint32_t</span> n) &#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fibonacci_recursion(n - <span class="number">1</span>) + fibonacci_recursion(n - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 动态规划法（Dynamic programming）求解</span></span><br><span class="line"><span class="keyword">uint64_t</span> fibonacci_dynamic_programming(<span class="keyword">uint32_t</span> n) &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">uint64_t</span> fibonacci[MAX_FIBONACCI_SIZE] = &#123;<span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 数列的第n项不为0时，便可认定为已经计算过该项的值，直接返回，无需继续计算</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (fibonacci[n] != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> fibonacci[n];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 按照数列的数据公式递归求解第n项的值，并将其记录在数组中，这样，在左递归完成后，便不会再继续右递归了</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        fibonacci[n] = fibonacci_dynamic_programming(n - <span class="number">1</span>) + fibonacci_dynamic_programming(n - <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">return</span> fibonacci[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 迭代法求解</span></span><br><span class="line"><span class="keyword">uint64_t</span> fibonacci_loop(<span class="keyword">uint32_t</span> n) &#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 数列的第n项</span></span><br><span class="line">        <span class="keyword">uint64_t</span> fib_n = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 数列的第n-1项，初始为第1项，值为1</span></span><br><span class="line">        <span class="keyword">uint64_t</span> fib_n_1 = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 数列的第n-2项，初始为第0项，值为0</span></span><br><span class="line">        <span class="keyword">uint64_t</span> fib_n_2 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 开始状态：</span></span><br><span class="line">        <span class="comment">// [...................n_2....n_1...n.....]</span></span><br><span class="line">        <span class="comment">//                      |      |    |</span></span><br><span class="line">        <span class="comment">// [0, 1, 1, 2, 3, 5, n - 2, n - 1, n, ...]</span></span><br><span class="line">        <span class="comment">// 向右平移后：</span></span><br><span class="line">        <span class="comment">// [.........................n_2...n_1..n.]</span></span><br><span class="line">        <span class="comment">//                            |     |</span></span><br><span class="line">        <span class="comment">// [0, 1, 1, 2, 3, 5, n - 2, n - 1, n, ...]</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">uint32_t</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="comment">// 数列的第n项 = 数列的第n-1项 + 数列的第n-2项</span></span><br><span class="line">            fib_n = fib_n_1 + fib_n_2;</span><br><span class="line">            <span class="comment">// 向右平移1项，即，</span></span><br><span class="line">            <span class="comment">// 上一次计算的第n-1项作为下一次计算的第n-2项，</span></span><br><span class="line">            <span class="comment">// 上一次计算的第n项作为下一次计算的第n-1项</span></span><br><span class="line">            fib_n_2 = fib_n_1;</span><br><span class="line">            fib_n_1 = fib_n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fib_n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取当前系统时间的毫秒值</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">current_timestamp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">te</span>;</span></span><br><span class="line">    gettimeofday(&amp;te, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> msec = te.tv_sec * <span class="number">1000.0</span> + (te.tv_usec / <span class="number">1000.0</span>);</span><br><span class="line">    <span class="keyword">return</span> msec;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 算法分析 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> 斐波那契 </tag>
            
            <tag> Fibonacci </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[算法分析：分治法求解给定集合中的众数及其重数]]></title>
      <url>/algorithm-using-divide-and-conquer-method-to-find-the-mode-in-a-set/</url>
      <content type="html"><![CDATA[<blockquote>
<p>算法分析系列文章中的代码可被任何人无偿使用于任何场景且无需注明来源也不必在使用前征得本文作者同意。</p>
<p>算法分析系列文章旨在传播准确、完整、简洁、易懂、规范的代码实现，并传授基本的编程思想和良好的编码习惯与技巧。</p>
<p>若文章中的代码存在问题或逻辑错误，请通过邮件等形式（见文章结尾）告知于本文作者以便及时修正错误或改进代码。</p>
<p>PS：若为转载该文章，请务必注明来源，本站点欢迎大家转载。</p>
</blockquote>
<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>给定含有n个元素的多重集合<code>S</code>，每个元素在<code>S</code>中<u>出现的次数</u>称为该元素的<strong>重数</strong>。多重集<code>S</code>中<u>重数最大的元素</u>称为<a href="https://zh.wikipedia.org/wiki/%E4%BC%97%E6%95%B0_(%E6%95%B0%E5%AD%A6)" target="_blank" rel="noopener">众数</a>（<strong>mode</strong>）。</p>
<p>例如，<code>S={1，2，2，2，3，5}</code>，则，多重集<code>S</code>的众数是<code>2</code>，其重数为<code>3</code>。</p>
<blockquote>
<p>注：众数可能存在多个。</p>
</blockquote>
<p>本案例要求采用<a href="https://zh.wikipedia.org/wiki/%E5%88%86%E6%B2%BB%E6%B3%95" target="_blank" rel="noopener">分治法</a>求解给定集合中的众数及其重数，存在多个众数时选择第一个即可。</p>
<blockquote>
<p>分治法，即，把一个复杂的问题分成两个或更多的相同或相似的子问题，直到最后子问题可以简单的直接求解，原问题的解即子问题的解的合并。（引用自「维基百科」）<br><a id="more"></a></p>
</blockquote>
<h2 id="求解思路"><a href="#求解思路" class="headerlink" title="求解思路"></a>求解思路</h2><p>分治法求解的基本思路就是将集合分成几个小部分，依次查找每个部分中的众数，再从每个部分中取出重数最大的数，该数即为所求解的众数。</p>
<p>在分治求解过程中，当枢轴元素（<strong>pivot</strong>）所在位置的左右两侧剩余的数据量均小于<code>pivot</code>的重数时，则求解结束且所求的众数即为<code>pivot</code>的值。</p>
<h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> g_mode; <span class="comment">// 众数值</span></span><br><span class="line"><span class="keyword">int</span> g_cnt = <span class="number">0</span>; <span class="comment">// 众数的重数值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 优先声明相关函数定义以便于按照阅读先后顺序排列函数实现</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">divide_find_mode</span><span class="params">(<span class="keyword">int</span> data[], <span class="keyword">int</span> start_index, <span class="keyword">int</span> end_index)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sort_and_find_pivot</span><span class="params">(<span class="keyword">int</span> data[], <span class="keyword">int</span> start_index, <span class="keyword">int</span> end_index)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap_element</span><span class="params">(<span class="keyword">int</span> data[], <span class="keyword">int</span> index_0, <span class="keyword">int</span> index_1)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//int data[] = &#123;'a', 'a', 'b', 'b', 'b', '1', '2', '1'&#125;;</span></span><br><span class="line">    <span class="keyword">int</span> data[] = &#123;<span class="number">2</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">1</span>&#125;;</span><br><span class="line">    <span class="comment">//int data[] = &#123;10&#125;;</span></span><br><span class="line">    <span class="comment">//int data[] = &#123;1, 2, 3&#125;;</span></span><br><span class="line">    <span class="comment">//int data[] = &#123;1, 2, 2, 2, 3, 3, 5, 6, 6, 6, 6&#125;;</span></span><br><span class="line">    <span class="comment">//int data[] = &#123;1, 2, 7, 7, 3, 5&#125;;</span></span><br><span class="line">    <span class="comment">//int data[] = &#123;3, 6, 7, 6, 4, 5&#125;;</span></span><br><span class="line">    <span class="keyword">int</span> len = <span class="keyword">sizeof</span>(data) / <span class="keyword">sizeof</span>(data[<span class="number">0</span>]);</span><br><span class="line">    divide_find_mode(data, <span class="number">0</span>, len - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"众数为: %d, 且其重数为: %d\n"</span>, g_mode, g_cnt);</span><br><span class="line">    <span class="comment">// 当集合元素为char类型时，使用以下方式输出结果</span></span><br><span class="line">    <span class="comment">//printf("众数为: %c, 且其重数为: %d\n", g_mode, g_cnt);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 采用分治法查找集合data在指定范围（[start_index, end_index]区间）内的众数及其重数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">divide_find_mode</span><span class="params">(<span class="keyword">int</span> data[], <span class="keyword">int</span> start_index, <span class="keyword">int</span> end_index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pivot_index = sort_and_find_pivot(data, start_index, end_index);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从右边开始统计与pivot相等的元素个数（包括pivot本身）</span></span><br><span class="line">    <span class="keyword">int</span> pivot_cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = start_index; i &lt;= pivot_index; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (data[i] == data[pivot_index]) &#123;</span><br><span class="line">            pivot_cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 记录重数最大的元素及其重数值</span></span><br><span class="line">    <span class="keyword">if</span> (pivot_cnt &gt; g_cnt) &#123;</span><br><span class="line">        g_mode = data[pivot_index];</span><br><span class="line">        g_cnt = pivot_cnt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 若左边剩余元素数量大于当前的重数值，则继续寻找左边剩余元素（范围为[start_index, pivot_index - 1]）中的众数</span></span><br><span class="line">    <span class="comment">// 左边剩余元素数量 = 当前众数位置左移一位（pivot_index - 1） - 查询的开始位置序号 + 1</span></span><br><span class="line">    <span class="comment">// 如，数组&#123;1, 2, 3, 4， 5&#125;中3（其序号为2）左边剩余元素数量为2（即，2 - 1 - 0 + 1）</span></span><br><span class="line">    <span class="keyword">if</span> ((pivot_index - <span class="number">1</span>) - start_index + <span class="number">1</span> &gt; pivot_cnt) &#123;</span><br><span class="line">        divide_find_mode(data, start_index, pivot_index - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 若右边剩余元素数量大于当前的重数值，则继续寻找右边剩余元素（范围为[pivot_index + 1, end_index]）中的众数</span></span><br><span class="line">    <span class="comment">// 右边剩余元素数量 = 查询的结束位置序号 - 当前众数位置右移一位（pivot_index + 1） + 1</span></span><br><span class="line">    <span class="comment">// 如，数组&#123;1, 2, 3, 4， 5&#125;中3（其序号为2）右边剩余元素数量为2（即，4 - (2 + 1) + 1）</span></span><br><span class="line">    <span class="keyword">if</span> (end_index - (pivot_index + <span class="number">1</span>) + <span class="number">1</span> &gt; pivot_cnt) &#123;</span><br><span class="line">        divide_find_mode(data, pivot_index + <span class="number">1</span>, end_index);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在集合data的指定范围（[start_index, end_index]区间）内选择一个枢轴元素（pivot）并进行排序，</span></span><br><span class="line"><span class="comment">// 以确保在该范围内pivot左边的元素均小于或等于pivot，而右边的则均大于pivot</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sort_and_find_pivot</span><span class="params">(<span class="keyword">int</span> data[], <span class="keyword">int</span> start_index, <span class="keyword">int</span> end_index)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 取开始位置的元素作为枢轴元素</span></span><br><span class="line">    <span class="keyword">int</span> pivot = data[start_index];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> left_index = start_index;</span><br><span class="line">    <span class="keyword">int</span> right_index = end_index;</span><br><span class="line">    <span class="comment">// 从两边向中间推进以调整元素位置，最终确保左边的元素小于或等于pivot，而右边的元素大于pivot</span></span><br><span class="line">    <span class="keyword">while</span> (left_index &lt; right_index) &#123;</span><br><span class="line">        <span class="comment">// 从右边向中间推进直到遇到小于或等于pivot的元素</span></span><br><span class="line">        <span class="keyword">while</span> (left_index &lt; right_index &amp;&amp; data[right_index] &gt; pivot) &#123;</span><br><span class="line">            right_index--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 从左边向中间推进直到遇到大于pivot的元素</span></span><br><span class="line">        <span class="keyword">while</span> (left_index &lt; right_index &amp;&amp; data[left_index] &lt;= pivot) &#123;</span><br><span class="line">            left_index++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将 左边大于pivot的元素 与 右边小于或等于pivot的元素 交换位置</span></span><br><span class="line">        swap_element(data, left_index, right_index);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Note：在排序过程中start_index位置的元素是不会变动位置的（其必然等于pivot），</span></span><br><span class="line">    <span class="comment">// 而left_index位置的元素为最后一个小于或等于pivot的元素，</span></span><br><span class="line">    <span class="comment">// 这时交换二者位置后，便可确保pivot左边的元素均小于或等于pivot了</span></span><br><span class="line">    swap_element(data, start_index, left_index);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> left_index;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 交换集合data中两个指定元素位置（index_0与index_1）的数据</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap_element</span><span class="params">(<span class="keyword">int</span> data[], <span class="keyword">int</span> index_0, <span class="keyword">int</span> index_1)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = data[index_0];</span><br><span class="line"></span><br><span class="line">    data[index_0] = data[index_1];</span><br><span class="line">    data[index_1] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上代码应该能够很容易看懂。这里主要强调以下几点：</p>
<ul>
<li>对外传播的代码应该尽量降低阅读者的理解难度以及<strong>时间成本</strong></li>
<li>变量名、函数名一定要能够清晰、准确地传达出其所代表的东西以及其职能，不要简单使用<code>i</code>、<code>j</code>等无意义的名称，更不要使用语义不清甚至是错误的单词</li>
<li>函数实现代码一般按照调用先后顺序和重要性进行排列以便于阅读并突出关键实现等</li>
<li>注释主要用于阐明流程、算法机制和原理、特殊代码技巧以及在调整或改进时需特别注意的事项等内容，切记不要对代码本身进行说明，说明也不要<strong>又臭又长</strong>。PS：本文为了能让刚入门的开发者看懂并阐述算法机制和过程，所以，注释写得比较详细，在实际开发中可以默认视为阅读者具备相关的算法基础，从而无需再对算法进行注释说明</li>
<li>一般通过<code>sizeof(data) / sizeof(data[0])</code>方式动态计算数组长度</li>
</ul>
<h2 id="实现改进"><a href="#实现改进" class="headerlink" title="实现改进"></a>实现改进</h2><p>上面的代码在调用<code>sort_and_find_pivot()</code>后存在一次遍历以获得<code>pivot</code>的重数（<code>pivot_cnt</code>），但实际上在<code>sort_and_find_pivot()</code>排序过程中已经存在等值比较，在这个时候是可以顺便得到<code>pivot</code>的重数的，只是限于C语言的函数只能返回一个值的约束而无法同时返回其重数。不过，C语言提供结构体类型，故而，可以通过在<code>sort_and_find_pivot()</code>后返回结构体的方式以避免不必要的遍历。</p>
<p>以下为改进后的代码：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">Mode</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> value; <span class="comment">// 众数值</span></span><br><span class="line">    <span class="keyword">int</span> count; <span class="comment">// 众数重复次数，即重数</span></span><br><span class="line">    <span class="keyword">int</span> index; <span class="comment">// 主要用于在查找pivot时记录其最终位置</span></span><br><span class="line">&#125; Mode;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 优先声明相关函数定义以便于按照阅读先后顺序排列函数实现</span></span><br><span class="line"><span class="function">Mode <span class="title">divide_find_mode</span><span class="params">(<span class="keyword">int</span> data[], <span class="keyword">int</span> start_index, <span class="keyword">int</span> end_index)</span></span>;</span><br><span class="line"><span class="function">Mode <span class="title">sort_and_find_pivot</span><span class="params">(<span class="keyword">int</span> data[], <span class="keyword">int</span> start_index, <span class="keyword">int</span> end_index)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap_element</span><span class="params">(<span class="keyword">int</span> data[], <span class="keyword">int</span> index_0, <span class="keyword">int</span> index_1)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compare_mode</span><span class="params">(Mode mode_0, Mode mode_1)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//int data[] = &#123;'a', 'a', 'b', 'b', 'b', '1', '2', '1'&#125;;</span></span><br><span class="line">    <span class="keyword">int</span> data[] = &#123;<span class="number">2</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">1</span>&#125;;</span><br><span class="line">    <span class="comment">//int data[] = &#123;10&#125;;</span></span><br><span class="line">    <span class="comment">//int data[] = &#123;1, 2, 3&#125;;</span></span><br><span class="line">    <span class="comment">//int data[] = &#123;1, 2, 2, 2, 3, 3, 5, 6, 6, 6, 6&#125;;</span></span><br><span class="line">    <span class="comment">//int data[] = &#123;1, 2, 7, 7, 3, 5&#125;;</span></span><br><span class="line">    <span class="comment">//int data[] = &#123;3, 6, 7, 6, 4, 5&#125;;</span></span><br><span class="line">    <span class="keyword">int</span> len = <span class="keyword">sizeof</span>(data) / <span class="keyword">sizeof</span>(data[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    Mode mode = divide_find_mode(data, <span class="number">0</span>, len - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"众数为: %d, 且其重数为: %d\n"</span>, mode.value, mode.count);</span><br><span class="line">    <span class="comment">// 当集合元素为char类型时，使用以下方式输出结果</span></span><br><span class="line">    <span class="comment">//printf("众数为: %c, 且其重数为: %d\n", mode.value, mode.count);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 采用分治法查找集合data在指定范围（[start_index, end_index]区间）内的众数及其重数</span></span><br><span class="line"><span class="function">Mode <span class="title">divide_find_mode</span><span class="params">(<span class="keyword">int</span> data[], <span class="keyword">int</span> start_index, <span class="keyword">int</span> end_index)</span> </span>&#123;</span><br><span class="line">    Mode pivot = sort_and_find_pivot(data, start_index, end_index);</span><br><span class="line"></span><br><span class="line">    Mode mode = pivot;</span><br><span class="line">    <span class="comment">// 若左边剩余元素数量大于当前的重数值，则继续寻找左边剩余元素（范围为[start_index, pivot.index - 1]）中的众数</span></span><br><span class="line">    <span class="comment">// 左边剩余元素数量 = 当前众数位置左移一位（pivot.index - 1） - 查询的开始位置序号 + 1</span></span><br><span class="line">    <span class="comment">// 如，数组&#123;1, 2, 3, 4， 5&#125;中3（其序号为2）左边剩余元素数量为2（即，2 - 1 - 0 + 1）</span></span><br><span class="line">    <span class="keyword">if</span> ((pivot.index - <span class="number">1</span>) - start_index + <span class="number">1</span> &gt; pivot.count) &#123;</span><br><span class="line">        Mode m = divide_find_mode(data, start_index, pivot.index - <span class="number">1</span>);</span><br><span class="line">        mode = compare_mode(m, mode) &gt; <span class="number">0</span> ? m : mode;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 若右边剩余元素数量大于当前的重数值，则继续寻找右边剩余元素（范围为[pivot.index + 1, end_index]）中的众数</span></span><br><span class="line">    <span class="comment">// 右边剩余元素数量 = 查询的结束位置序号 - 当前众数位置右移一位（pivot.index + 1） + 1</span></span><br><span class="line">    <span class="comment">// 如，数组&#123;1, 2, 3, 4， 5&#125;中3（其序号为2）右边剩余元素数量为2（即，4 - (2 + 1) + 1）</span></span><br><span class="line">    <span class="keyword">if</span> (end_index - (pivot.index + <span class="number">1</span>) + <span class="number">1</span> &gt; pivot.count) &#123;</span><br><span class="line">        Mode m = divide_find_mode(data, pivot.index + <span class="number">1</span>, end_index);</span><br><span class="line">        mode = compare_mode(m, mode) &gt; <span class="number">0</span> ? m : mode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> mode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在集合data的指定范围（[start_index, end_index]区间）内选择一个枢轴元素（pivot）并进行排序，</span></span><br><span class="line"><span class="comment">// 以确保在该范围内pivot左边的元素均小于或等于pivot，而右边的则均大于pivot</span></span><br><span class="line"><span class="function">Mode <span class="title">sort_and_find_pivot</span><span class="params">(<span class="keyword">int</span> data[], <span class="keyword">int</span> start_index, <span class="keyword">int</span> end_index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left_index = start_index;</span><br><span class="line">    <span class="keyword">int</span> right_index = end_index;</span><br><span class="line"></span><br><span class="line">    Mode pivot = &#123;</span><br><span class="line">        <span class="comment">// 取开始位置的元素作为枢轴元素</span></span><br><span class="line">        .value = data[start_index],</span><br><span class="line">        <span class="comment">// 当只有一个元素时，则不会进行排序，也就不会有等值判断，故，count将始终为1</span></span><br><span class="line">        .count = left_index == right_index ? <span class="number">1</span> : <span class="number">0</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从两边向中间推进以调整元素位置，最终确保左边的元素小于或等于pivot，而右边的元素大于pivot</span></span><br><span class="line">    <span class="keyword">while</span> (left_index &lt; right_index) &#123;</span><br><span class="line">        <span class="comment">// 从右边向中间推进直到遇到小于或等于pivot的元素</span></span><br><span class="line">        <span class="keyword">while</span> (left_index &lt; right_index &amp;&amp; data[right_index] &gt; pivot.value) &#123;</span><br><span class="line">            right_index--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (left_index &lt; right_index &amp;&amp; data[right_index] == pivot.value) &#123;</span><br><span class="line">            pivot.count++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从左边向中间推进直到遇到大于pivot的元素</span></span><br><span class="line">        <span class="keyword">while</span> (left_index &lt; right_index &amp;&amp; data[left_index] &lt;= pivot.value) &#123;</span><br><span class="line">            <span class="keyword">if</span> (data[left_index] == pivot.value) &#123;</span><br><span class="line">                pivot.count++;</span><br><span class="line">            &#125;</span><br><span class="line">            left_index++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将 左边大于pivot的元素 与 右边小于或等于pivot的元素 交换位置</span></span><br><span class="line">        swap_element(data, left_index, right_index);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Note：在排序过程中start_index位置的元素是不会变动位置的（其必然等于pivot），</span></span><br><span class="line">    <span class="comment">// 而left_index位置的元素为最后一个小于或等于pivot的元素，</span></span><br><span class="line">    <span class="comment">// 这时交换二者位置后，便可确保pivot左边的元素均小于或等于pivot了</span></span><br><span class="line">    swap_element(data, start_index, left_index);</span><br><span class="line"></span><br><span class="line">    pivot.index = left_index;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> pivot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 交换集合data中两个指定元素位置（index_0与index_1）的数据</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap_element</span><span class="params">(<span class="keyword">int</span> data[], <span class="keyword">int</span> index_0, <span class="keyword">int</span> index_1)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index_0 == index_1) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> temp = data[index_0];</span><br><span class="line"></span><br><span class="line">    data[index_0] = data[index_1];</span><br><span class="line">    data[index_1] = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compare_mode</span><span class="params">(Mode mode_0, Mode mode_1)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> mode_0.count - mode_1.count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里主要强调以下几点：</p>
<ul>
<li>在离调用最近的位置处声明变量，避免变量声明位置与第一次使用位置相隔太远</li>
<li>结构体数据的初始化采用<a href="https://gcc.gnu.org/onlinedocs/gcc/Designated-Inits.html" target="_blank" rel="noopener">(ANSI) C99</a>方式以便于阅读，如，<code>struct point p = { .y = yvalue, .x = xvalue };</code></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 算法分析 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 分治法 </tag>
            
            <tag> 众数 </tag>
            
            <tag> 重数 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[记一次惊心动魄的CentOS系统升级经历]]></title>
      <url>/a-horrible-os-upgrading-for-centos/</url>
      <content type="html"><![CDATA[<h2 id="How-to-use-yum-history-to-roll-back-an-update"><a href="#How-to-use-yum-history-to-roll-back-an-update" class="headerlink" title="How to use yum history to roll back an update"></a><a href="https://access.redhat.com/solutions/64069" target="_blank" rel="noopener">How to use yum history to roll back an update</a></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># List all update histories</span></span><br><span class="line">yum <span class="built_in">history</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Undo the specified transaction</span></span><br><span class="line">yum <span class="built_in">history</span> undo &lt;transaction ID&gt;</span><br></pre></td></tr></table></figure>
<h2 id="Fix-‘has-missing-requires-of’"><a href="#Fix-‘has-missing-requires-of’" class="headerlink" title="Fix ‘has missing requires of’"></a><a href="https://www.linuxquestions.org/questions/linux-server-73/yum-update-errors-4175534903/#post5323670" target="_blank" rel="noopener">Fix ‘has missing requires of’</a></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cp -a /var/lib/rpm /var/lib/rpm.bak</span><br><span class="line">cp -a /var/lib/yum /var/lib/yum.bak</span><br><span class="line"></span><br><span class="line">yum check \</span><br><span class="line">    | grep <span class="string">"has missing requires of"</span> \</span><br><span class="line">    | awk <span class="string">'&#123;print $1&#125;'</span> \</span><br><span class="line">    | sed -E <span class="string">"s/^[0-9]+://g"</span> \</span><br><span class="line">    | <span class="keyword">while</span> <span class="built_in">read</span> p; <span class="keyword">do</span> rpm -e --nodeps <span class="variable">$p</span>; <span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<h2 id="Fix-‘is-a-duplicate-with’"><a href="#Fix-‘is-a-duplicate-with’" class="headerlink" title="Fix ‘is a duplicate with’"></a><a href="https://community.centminmod.com/threads/yum-duplicates-problem.13129/#post-55753" target="_blank" rel="noopener">Fix ‘is a duplicate with’</a></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">cp -a /var/lib/rpm /var/lib/rpm.bak</span><br><span class="line">cp -a /var/lib/yum /var/lib/yum.bak</span><br><span class="line"></span><br><span class="line">yum check \</span><br><span class="line">    | grep <span class="string">"is a duplicate with"</span> \</span><br><span class="line">    | awk <span class="string">'&#123;print $1&#125;'</span> \</span><br><span class="line">    | sed -E <span class="string">"s/^[0-9]+://g"</span> \</span><br><span class="line">    | <span class="keyword">while</span> <span class="built_in">read</span> p; <span class="keyword">do</span> rpm -e --justdb --nodeps <span class="variable">$p</span>; <span class="keyword">done</span></span><br><span class="line">yum update</span><br><span class="line"></span><br><span class="line"><span class="comment"># If 'yum update' still get some duplicated packages, just running the following commands</span></span><br><span class="line"><span class="comment">## yum update | grep "is a duplicate with" | awk '&#123;print $1&#125;' | sed -E "s/^[0-9]+://g" | while read p; do rpm -e --justdb --nodeps $p; done</span></span><br><span class="line"><span class="comment">## yum update</span></span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 运维管理 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> 系统升级 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Nginx特例场景配置]]></title>
      <url>/the-special-case-configuration-of-nginx/</url>
      <content type="html"><![CDATA[<blockquote>
<p>本文所使用的相关代码片段可从 <a href="https://github.com/flytreeleft/docker-nginx-gateway" target="_blank" rel="noopener">https://github.com/flytreeleft/docker-nginx-gateway</a> 得到完整内容。</p>
</blockquote>
<h2 id="Nginx随机展示自定义错误页面"><a href="#Nginx随机展示自定义错误页面" class="headerlink" title="Nginx随机展示自定义错误页面"></a>Nginx随机展示自定义错误页面</h2><blockquote>
<p>Source code: <a href="https://github.com/flytreeleft/docker-nginx-gateway/tree/master/config/error-pages" target="_blank" rel="noopener">https://github.com/flytreeleft/docker-nginx-gateway/tree/master/config/error-pages</a><br>Custom error pages: <a href="https://github.com/flytreeleft/docker-nginx-gateway/tree/master/examples/epage.d/all" target="_blank" rel="noopener">https://github.com/flytreeleft/docker-nginx-gateway/tree/master/examples/epage.d/all</a></p>
</blockquote>
<p><strong>关键字</strong>：</p>
<ul>
<li>随机展示多个错误页面</li>
<li>Nginx自定义错误页面</li>
</ul>
<p>在访问HTTP站点时最容易出现的错误就是404，于是就有许多非常有个性的404错误页面。而为我们自己的站点放置一些简洁、清爽的错误页面，在资源再利用的前提下，也将为我们自身增加不少好感和亲和力。</p>
<p>这里将要介绍的便是如何为我们的站点配置自定义错误页面，并同时支持为相同错误随机展示不同的错误页面。</p>
<a id="more"></a>
<h3 id="分类展示"><a href="#分类展示" class="headerlink" title="分类展示"></a>分类展示</h3><p>分类展示就是相同类型的错误使用同种风格的错误页面，这里简单分为<code>404</code>、<code>40x</code>（主要为400，401，403）、<code>50x</code>（主要为500，502，503，504），其配置内容如下：</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Obmit the `[=[response]]` syntax to keep the error response code for clients.</span></span><br><span class="line"><span class="comment">## http://nginx.org/en/docs/http/ngx_http_core_module.html#error_page</span></span><br><span class="line"><span class="attribute">error_page</span> <span class="number">404</span>              /<span class="number">404</span>/;</span><br><span class="line"><span class="attribute">error_page</span> <span class="number">400</span> <span class="number">401</span> <span class="number">403</span>      /40x/;</span><br><span class="line"><span class="attribute">error_page</span> <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x/;</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span> /<span class="number">404</span>/ &#123;</span><br><span class="line">    internal;</span><br><span class="line">    <span class="attribute">random_index</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">root</span> /etc/nginx/epage.d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span> /40x/ &#123;</span><br><span class="line">    internal;</span><br><span class="line">    <span class="attribute">random_index</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">root</span> /etc/nginx/epage.d;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Replace the placeholders in response content</span></span><br><span class="line">    <span class="comment"># for showing the corresponding status and message.</span></span><br><span class="line">    <span class="attribute">sub_filter</span> <span class="string">'&#123;&#123;status&#125;&#125;'</span> <span class="string">'<span class="variable">$status</span>'</span>;</span><br><span class="line">    <span class="attribute">sub_filter</span> <span class="string">'&#123;&#123;status_msg&#125;&#125;'</span> <span class="string">'<span class="variable">$status_msg</span>'</span>;</span><br><span class="line">    <span class="attribute">sub_filter_once</span> <span class="literal">off</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span> /50x/ &#123;</span><br><span class="line">    internal;</span><br><span class="line">    <span class="attribute">random_index</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">root</span> /etc/nginx/epage.d;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Replace the placeholders in response content</span></span><br><span class="line">    <span class="comment"># for showing the corresponding status and message.</span></span><br><span class="line">    <span class="attribute">sub_filter</span> <span class="string">'&#123;&#123;status&#125;&#125;'</span> <span class="string">'<span class="variable">$status</span>'</span>;</span><br><span class="line">    <span class="attribute">sub_filter</span> <span class="string">'&#123;&#123;status_msg&#125;&#125;'</span> <span class="string">'<span class="variable">$status_msg</span>'</span>;</span><br><span class="line">    <span class="attribute">sub_filter_once</span> <span class="literal">off</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里将错误页面分别放置于<code>/etc/nginx/epage.d/404/</code>、<code>/etc/nginx/epage.d/40x/</code>、<code>/etc/nginx/epage.d/50x/</code>三个目录中，通过<code>random_index</code>指令可随机从这些目录中选择后缀为<code>html</code>的文件并返回给客户端，也就达到了错误页面随机展示的效果。<strong>注</strong>：1. <a href="http://nginx.org/en/docs/http/ngx_http_core_module.html#internal" target="_blank" rel="noopener">internal</a>指令限制了只能在Nginx内部请求该地址，外部访问将返回404错误；2. 若不需要随机展示的特性，在目录中始终放置一个HTML文件即可。</p>
<p>指令<a href="http://nginx.org/en/docs/http/ngx_http_sub_module.html#sub_filter" target="_blank" rel="noopener">sub_filter</a>用于过滤响应体中的特定字符串并替换为目标字符串。这里主要是替换<code>{{status}}</code>和<code>{{status_msg}}</code>（此为精确匹配，不能含其他字符）两个占位符以显示具体的错误码和错误信息，在错误页面中的合适位置引入这两个占位符即可。另外，<code>$status_msg</code>为与变量<code>$status</code>对应的状态信息，完整的映射关系见<a href="https://gist.github.com/tmthrgd/3504859568e1dba9ee80e260f974a708" target="_blank" rel="noopener">tmthrgd/nginx-status-text.conf</a>。<strong>注</strong>：<code>sub_filter_once off;</code>为启用多次替换，确保页面中所有的占位符均被替换。</p>
<p>在引入该配置时需注意，该配置内容需添加到每个站点（即<code>server {}</code>）配置中，暂时不知道如何进行全局配置。为了方便可将以上内容放到单独的文件中（如，<code>epage.conf</code>）再通过<code>include</code>指令引入该配置。</p>
<h3 id="统一展示"><a href="#统一展示" class="headerlink" title="统一展示"></a>统一展示</h3><p>统一展示就是所有错误都由相同页面展示，不同的只是显示的错误码和错误信息。以下为该方式的配置内容：</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Obmit the `[=[response]]` syntax to keep the error response code for clients.</span></span><br><span class="line"><span class="comment">## http://nginx.org/en/docs/http/ngx_http_core_module.html#error_page</span></span><br><span class="line"><span class="attribute">error_page</span> <span class="number">404</span> <span class="number">400</span> <span class="number">401</span> <span class="number">403</span> <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>    /_/;</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span> /_/ &#123;</span><br><span class="line">    internal;</span><br><span class="line">    <span class="attribute">random_index</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># http://nginx.org/en/docs/http/ngx_http_core_module.html#alias</span></span><br><span class="line">    <span class="comment"># https://stackoverflow.com/questions/10631933/nginx-static-file-serving-confusion-with-root-alias#answer-10647080</span></span><br><span class="line">    <span class="attribute">alias</span> /etc/nginx/epage.d/all/;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Replace the placeholders in response content</span></span><br><span class="line">    <span class="comment"># for showing the corresponding status and message.</span></span><br><span class="line">    <span class="attribute">sub_filter</span> <span class="string">'&#123;&#123;status&#125;&#125;'</span> <span class="string">'<span class="variable">$status</span>'</span>;</span><br><span class="line">    <span class="attribute">sub_filter</span> <span class="string">'&#123;&#123;status_msg&#125;&#125;'</span> <span class="string">'<span class="variable">$status_msg</span>'</span>;</span><br><span class="line">    <span class="attribute">sub_filter_once</span> <span class="literal">off</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里的配置内容和注意事项与<code>分类展示</code>的基本相同，所不同的是，错误页面被放置在<code>/etc/nginx/epage.d/all/</code>目录中，与分类展示的目录独立，从而可按需自由转换展示模式。</p>
<h2 id="Nginx代理第三方http站点静态资源文件"><a href="#Nginx代理第三方http站点静态资源文件" class="headerlink" title="Nginx代理第三方http站点静态资源文件"></a>Nginx代理第三方http站点静态资源文件</h2><p><strong>关键字</strong>：</p>
<ul>
<li>HTTPS反向代理HTTP静态资源</li>
<li>单页面Markdown编写与渲染方案</li>
<li>Nginx反向代理重定向拦截处理</li>
</ul>
<p>这几天为部门搭建好了Maven仓库，为了便于指导部门同事能够准确配置并启用私有仓库，然后就打算写一份使用说明文档。</p>
<p>我不太喜欢写Word，也好几年几乎没用过了，一般都是直接写在部门的<a href="https://www.mediawiki.org/" target="_blank" rel="noopener">Wiki</a>系统上。不过，一份简单的文档写到Wiki上又不太方便查阅，于是找了找可以在单个HTML里写<a href="https://en.wikipedia.org/wiki/Markdown" target="_blank" rel="noopener">Markdown</a>并直接渲染展示的方案。</p>
<p>很快我就找到了<a href="https://github.com/chaitin/strapdown-zeta" target="_blank" rel="noopener">Strapdown Zeta</a>，其对Mardown的支持较为全面，并且使用很简单，还提供多套主题可自由切换。需要提到的是该库为<a href="https://github.com/arturadib/strapdown" target="_blank" rel="noopener">Strapdown</a>的衍生与改进版本，而<code>Strapdown</code>已经很长时间未更新了，选择<code>Strapdown Zeta</code>也是看重其活跃度。</p>
<p>在<code>Strapdown Zeta</code>的支持下仅需在<code>&lt;xmp&gt;&lt;/xmp&gt;</code>标签中编写Markdown并在最后引入 <a href="http://cdn.ztx.io/strapdown/strapdown.min.js" target="_blank" rel="noopener">http://cdn.ztx.io/strapdown/strapdown.min.js</a> 脚本即可。可惜的是，作者提供的该站点并未启用HTTPS，而我们在<a href="https://letsencrypt.org/" target="_blank" rel="noopener">Let’s Encrypt</a>的帮助下已经对部门的所有站点启用了HTTPS。这样，若在页面中引用非HTTPS资源，浏览器默认将阻止该资源的下载。</p>
<p>显然，这里不能直接在页面中引入该脚本，但是我也不愿再在站点上部署除使用文档之外的其他文件，就仅仅一个HTML文件即可，css什么的都不要有。</p>
<p>百般思索后，突然想到<a href="https://archive.org/" target="_blank" rel="noopener">Internet Archive</a>可以代理访问其他站点的页面，那我也可以专门为第三方静态资源搭建一个代理服务，该站点自身是HTTPS的，其在服务端获取到目标资源再返回给浏览器，这样该资源也就走的是HTTPS，既不用在服务器上存储这些资源，也可以自由代理其他第三方资源，而且不用管目标是不是HTTPS，甚至还可以代理一些无法访问到的资源。简单、经济、又实惠！:)</p>
<p>于是动手！这里假设代理站点为<code>https://static.example.com</code>，并构造代理链接为<code>https://static.example.com/*/&lt;target url&gt;</code>形式，这种结构可以方便Nginx做Location匹配，同时在使用和修改上均十分简单，我们不用改变目标资源的URL地址。</p>
<p>这里直接放出完整的配置：<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line">    <span class="attribute">listen</span> [::]:<span class="number">443</span> ssl;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">server_name</span> static.example.com;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">include</span> /etc/nginx/vhost.d/static.example.com/01_ssl.conf;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># https://static.example.com/*/http://others.com/asset.js -&gt; http://others.com/asset.js</span></span><br><span class="line">    <span class="comment">## https://www.mediasuite.co.nz/blog/proxying-s3-downloads-nginx/</span></span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~* ^/\*/(http[s]?):?/(.*?)/(.*)$</span> &#123;</span><br><span class="line">        <span class="comment"># Note: Remove the directive 'internal;' to accept the external requests,</span></span><br><span class="line">        <span class="comment">#       otherwise it will return 404 for the external requests.</span></span><br><span class="line">        <span class="comment">#       See http://nginx.org/en/docs/http/ngx_http_core_module.html#internal</span></span><br><span class="line">        <span class="attribute">set</span> <span class="variable">$backend_protocol</span>   <span class="variable">$1</span>;</span><br><span class="line">        <span class="attribute">set</span> <span class="variable">$backend_host</span>       <span class="variable">$2</span>;</span><br><span class="line">        <span class="attribute">set</span> <span class="variable">$backend_path</span>       <span class="variable">$3</span>;</span><br><span class="line">        <span class="attribute">set</span> <span class="variable">$backend_uri</span>        <span class="variable">$backend_host</span>/<span class="variable">$backend_path</span><span class="variable">$is_args</span><span class="variable">$args</span>;</span><br><span class="line">        <span class="attribute">set</span> <span class="variable">$backend_url</span>        <span class="variable">$backend_protocol</span>://<span class="variable">$backend_uri</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Headers for the remote server, unset Authorization and Cookie for security reasons.</span></span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$backend_host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Authorization <span class="string">''</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Cookie <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Stops the local disk from being written to (just forwards data through)</span></span><br><span class="line">        <span class="attribute">proxy_max_temp_file_size</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">proxy_pass</span> <span class="variable">$backend_url</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">proxy_intercept_errors</span> <span class="literal">on</span>;</span><br><span class="line">        <span class="attribute">error_page</span> <span class="number">301</span> <span class="number">302</span> <span class="number">307</span> = <span class="variable">@handle_backend_redirect</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Nginx Embedded Variables: http://nginx.org/en/docs/varindex.html</span></span><br><span class="line">    <span class="attribute">location</span> <span class="variable">@handle_backend_redirect</span> &#123;</span><br><span class="line">        <span class="attribute">return</span> <span class="number">302</span> <span class="variable">$scheme</span>://<span class="variable">$host</span>/*/<span class="variable">$upstream_http_location</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>该配置参考的是<a href="https://www.mediasuite.co.nz/blog/proxying-s3-downloads-nginx/" target="_blank" rel="noopener">Using NGINX’s X-Accel with Remote URLs</a>。这里没有做特别的改动，主要是针对我们的实际需求做了些调整：</p>
<ul>
<li>去掉了<code>internal;</code>指令，该指令是限制仅能在Nginx内部做该代理请求，而我们是需要外部直接获取到目标资源的，因此，需要去掉该指令，否则，外部访问时将始终为<code>404</code>；</li>
<li>针对目标URL地址存在重定向问题，在<code>@handle_backend_redirect</code>中，我又将重定向地址（其对应变量<code>$upstream_http_location</code>）再次进行代理，这样无论目标跳转多少次，代理站点均能获取到最终的返回内容，而不是在浏览器中又突然跳到另一个HTTP链接了；</li>
</ul>
<p>最后提醒大家一点是，在网络中对安全要时刻保持警惕，尽可能降低敏感数据泄漏的风险，因此，这里切忌不要将客户端的<code>Authorization</code>和<code>Cookie</code>转发到目标站点了。</p>
<h2 id="Nginx通过Squid穿透防火墙"><a href="#Nginx通过Squid穿透防火墙" class="headerlink" title="Nginx通过Squid穿透防火墙"></a>Nginx通过Squid穿透防火墙</h2><blockquote>
<p>Source code: <a href="https://github.com/flytreeleft/docker-nginx-gateway/blob/master/examples/vhost.d/static.example.com.conf" target="_blank" rel="noopener">https://github.com/flytreeleft/docker-nginx-gateway/blob/master/examples/vhost.d/static.example.com.conf</a></p>
</blockquote>
<p><strong>关键字</strong>：</p>
<ul>
<li>Nginx http_proxy：<code>http_proxy</code>为Linux中配置启用正向代理的环境变量，很多命令可识别该变量并通过所设定的代理地址请求目标资源</li>
<li>Nginx防火墙穿透</li>
<li>Nginx over Squid</li>
<li>Squid behind Nginx</li>
<li>Nginx bypass firewall via Squid</li>
</ul>
<p>在前面提到，为了将HTTP请求转换为HTTPS请求，我专门搭建了个静态文件代理站点。刚开始访问还很正常，可后来便发现公司网关阻止了服务器对外部网站的访问，导致编写的文档无法渲染。</p>
<p>因此，我便考虑在Nginx服务端通过Squid（其他代理服务也可）再做一次代理以穿透公司的防火墙，确保静态资源的代理不再出现问题。</p>
<p>在多次尝试以及搜索网络资料后终于发现<a href="https://serverfault.com/questions/583743/how-to-make-an-existing-caching-nginx-proxy-use-another-proxy-to-bypass-a-firewa#683955" target="_blank" rel="noopener">How to make an existing caching Nginx proxy use another proxy to bypass a firewall?</a>所提到的实现方法。</p>
<p>在原配置的基础上综合改进后，得到新的配置内容如下：<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line">    <span class="attribute">listen</span> [::]:<span class="number">443</span> ssl;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">server_name</span> static.example.com;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">include</span> /etc/nginx/vhost.d/static.example.com/01_ssl.conf;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># https://static.example.com/*/http://others.com/asset.js -&gt; http://others.com/asset.js</span></span><br><span class="line">    <span class="comment">## https://www.mediasuite.co.nz/blog/proxying-s3-downloads-nginx/</span></span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~* ^/\*/(http[s]?):?/(.*?)/(.*)$</span> &#123;</span><br><span class="line">        <span class="comment"># Note: Remove the directive 'internal;' to accept the external requests,</span></span><br><span class="line">        <span class="comment">#       otherwise it will return 404 for the external requests.</span></span><br><span class="line">        <span class="comment">#       See http://nginx.org/en/docs/http/ngx_http_core_module.html#internal</span></span><br><span class="line">        <span class="attribute">set</span> <span class="variable">$backend_protocol</span>   <span class="variable">$1</span>;</span><br><span class="line">        <span class="attribute">set</span> <span class="variable">$backend_host</span>       <span class="variable">$2</span>;</span><br><span class="line">        <span class="attribute">set</span> <span class="variable">$backend_path</span>       <span class="variable">$3</span>;</span><br><span class="line">        <span class="attribute">set</span> <span class="variable">$backend_uri</span>        <span class="variable">$backend_host</span>/<span class="variable">$backend_path</span><span class="variable">$is_args</span><span class="variable">$args</span>;</span><br><span class="line">        <span class="attribute">set</span> <span class="variable">$backend_url</span>        <span class="variable">$backend_protocol</span>://<span class="variable">$backend_uri</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Headers for the remote server, unset Authorization and Cookie for security reasons.</span></span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$backend_host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Authorization <span class="string">''</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Cookie <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Stops the local disk from being written to (just forwards data through)</span></span><br><span class="line">        <span class="attribute">proxy_max_temp_file_size</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Forward the target to the squid proxy</span></span><br><span class="line">        <span class="comment">## https://serverfault.com/questions/583743/how-to-make-an-existing-caching-nginx-proxy-use-another-proxy-to-bypass-a-firewa#683955</span></span><br><span class="line">        <span class="comment">## Hide the reponse header to protect the backend proxy</span></span><br><span class="line">        <span class="comment">### http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_hide_header</span></span><br><span class="line">        <span class="attribute">proxy_hide_header</span> Via;</span><br><span class="line">        <span class="attribute">proxy_hide_header</span> X-Cache;</span><br><span class="line">        <span class="attribute">proxy_hide_header</span> X-Cache-Hits;</span><br><span class="line">        <span class="attribute">proxy_hide_header</span> X-Cache-Lookup;</span><br><span class="line">        <span class="attribute">proxy_hide_header</span> X-Fastly-Request-ID;</span><br><span class="line">        <span class="attribute">proxy_hide_header</span> X-Served-By;</span><br><span class="line">        <span class="attribute">proxy_hide_header</span> X-Timer;</span><br><span class="line">        <span class="attribute">rewrite</span><span class="regexp"> ^(.*)$</span>      <span class="string">"://<span class="variable">$backend_uri</span>"</span>           <span class="literal">break</span>;</span><br><span class="line">        <span class="attribute">rewrite</span><span class="regexp"> ^(.*)$</span>      <span class="string">"<span class="variable">$backend_protocol</span><span class="variable">$1</span>"</span>       <span class="literal">break</span>;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://&lt;squid ip&gt;:<span class="number">3128</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Proxy to the target directly</span></span><br><span class="line">        <span class="comment">#proxy_pass $backend_url;</span></span><br><span class="line"></span><br><span class="line">        <span class="attribute">proxy_intercept_errors</span> <span class="literal">on</span>;</span><br><span class="line">        <span class="attribute">error_page</span> <span class="number">301</span> <span class="number">302</span> <span class="number">307</span> = <span class="variable">@handle_backend_redirect</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Nginx Embedded Variables: http://nginx.org/en/docs/varindex.html</span></span><br><span class="line">    <span class="attribute">location</span> <span class="variable">@handle_backend_redirect</span> &#123;</span><br><span class="line">        <span class="attribute">return</span> <span class="number">302</span> <span class="variable">$scheme</span>://<span class="variable">$host</span>/*/<span class="variable">$upstream_http_location</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这里需要特别注意的是：</p>
<ul>
<li>这里做了两次<code>rewrite</code>是为了确保能够准确将目标URL地址附加到Squid的代理地址中以构成<code>http://&lt;squid ip&gt;:3128/&lt;target url&gt;</code>形式，同时，规避了因在<a href="http://nginx.org/en/docs/http/ngx_http_rewrite_module.html#rewrite" target="_blank" rel="noopener">rewrite</a>的替换字符串中包含<code>http://</code>、<code>https://</code>或<code>$scheme</code>而导致重定向的问题；</li>
<li>同样为了安全考虑，这里隐藏了Squid的几个响应头，避免客户端得到Squid的真实IP地址而产生潜在的攻击风险；</li>
</ul>
<h2 id="Nginx反向代理Nexus3的不同类型仓库"><a href="#Nginx反向代理Nexus3的不同类型仓库" class="headerlink" title="Nginx反向代理Nexus3的不同类型仓库"></a>Nginx反向代理Nexus3的不同类型仓库</h2><p><strong>关键字</strong>：</p>
<ul>
<li>Nginx反向代理</li>
<li>Nexus3不同类型仓库映射独立域名</li>
</ul>
<p><a href="https://help.sonatype.com/display/NXRM3" target="_blank" rel="noopener">Nexus3</a>同时支持多种类型的资源存储，比如，Docker镜像、Maven依赖包、NPM等，<br>不过，不同类型的资源访问方式和使用惯例是不一致的，因此，为每类资源提供符合惯例的仓库地址，再将请求转发到Nexus3仓库，对使用者而言将更加有好。</p>
<p>为此，本例针对Docker、Maven和NPM仓库分别给出Nginx的反向代理配置。</p>
<p>首先确定几个子站点的域名为如下形式：</p>
<ul>
<li><code>https://repo.example.com</code>：Nexus3服务访问地址</li>
<li><code>https://mvn.example.com</code>：Maven仓库访问地址</li>
<li><code>https://npm.example.com</code>：NPM仓库地址</li>
<li><code>https://dcr.example.com</code>：Docker镜像访问地址</li>
</ul>
<h3 id="https-repo-example-com的反向代理配置"><a href="#https-repo-example-com的反向代理配置" class="headerlink" title="https://repo.example.com的反向代理配置"></a><code>https://repo.example.com</code>的反向代理配置</h3><blockquote>
<p>Source code: <a href="https://github.com/flytreeleft/docker-nginx-gateway/blob/master/examples/vhost.d/repo.example.com.conf#L15" target="_blank" rel="noopener">https://github.com/flytreeleft/docker-nginx-gateway/blob/master/examples/vhost.d/repo.example.com.conf#L15</a></p>
</blockquote>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line">    <span class="attribute">listen</span> [::]:<span class="number">443</span> ssl;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">server_name</span> repo.example.com;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">include</span> /etc/nginx/vhost.d/repo.example.com/01_ssl.conf;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">proxy_cache</span> <span class="literal">off</span>;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="comment"># Avoid to get address resolve error when starting</span></span><br><span class="line">        <span class="attribute">set</span> <span class="variable">$nexus3</span> http://&lt;nexus3 ip&gt;:&lt;nexus3 web port&gt;;</span><br><span class="line">        <span class="attribute">proxy_pass</span> <span class="variable">$nexus3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对<code>https://repo.example.com</code>的配置很简单，直接将请求反向代理到Nexus3的Web接口即可。这里仅需要注意以下几点：</p>
<ul>
<li>为了避免Nginx缓存导致资源的元数据（<code>metadata</code>）不能及时更新，所以，这里启用了<code>proxy_cache off;</code>以关闭代理缓存。当然，也可以根据实际情况仅对某些类的文件关闭缓存</li>
<li>Nginx在解析配置时会对<code>proxy_pass</code>的目标域名地址进行解析，若是解析失败则会导致Nginx启动异常，因此，这里采用变量方式将解析延迟到需要时，从而避免启动失败</li>
</ul>
<h3 id="https-mvn-example-com的反向代理配置"><a href="#https-mvn-example-com的反向代理配置" class="headerlink" title="https://mvn.example.com的反向代理配置"></a><code>https://mvn.example.com</code>的反向代理配置</h3><blockquote>
<p>Source code: <a href="https://github.com/flytreeleft/docker-nginx-gateway/blob/master/examples/vhost.d/repo.example.com.conf#L110" target="_blank" rel="noopener">https://github.com/flytreeleft/docker-nginx-gateway/blob/master/examples/vhost.d/repo.example.com.conf#L110</a></p>
</blockquote>
<p>需要科普一下的是，在Nexus3中访问某个仓库内的资源的URL结构为<code>http://&lt;nexus3&gt;/#browse/browse/components:&lt;repo&gt;/</code>，访问某个资源的URL结构为<code>http://&lt;nexus3&gt;/repository/&lt;repo&gt;/&lt;asset path&gt;</code>。其中，<code>&lt;repo&gt;</code>为仓库名称，所有类型的仓库均会有<code>hosted</code>（私有存储）、<code>proxy</code>（代理外部仓库）和<code>group</code>（组合同类仓库）三种模式。</p>
<p>为了规范内部和外部访问并便于进行权限控制（如，外部帐号不允许访问<code>hosted</code>中的源码等），这里创建了以下几个仓库：</p>
<ul>
<li><code>maven-hosted-releases</code>：存储内部产品发布包。部署发布包时，向该仓库发送更新请求</li>
<li><code>maven-hosted-snapshots</code>：存储内部产品开发快照包。部署快照包时，向该仓库发送更新请求</li>
<li><code>maven-hosted</code>：<code>maven-hosted-*</code>的组合仓库。在Maven客户端更新依赖时，从该仓库下载内部产品的发布包或快照包</li>
<li><code>maven-&lt;3rd repo url&gt;</code>：对第三方仓库的代理仓库，<code>&lt;3rd repo url&gt;</code>为站点域名，比如，<code>maven-apache.org</code>。也可以按其他规范命名，只要能友好区分不同仓库即可</li>
<li><code>maven-public</code>：所有<code>maven-&lt;3rd repo url&gt;</code>的组合仓库。用于统一下载第三方的依赖包</li>
</ul>
<p>然后，我们期望在访问以下URL链接时，能够将请求转发到对应的资源上：</p>
<ul>
<li><code>GET https://mvn.example.com/public/&lt;asset&gt;</code> -&gt; <code>https://repo.example.com/repository/maven-public/&lt;asset&gt;</code></li>
<li><code>GET https://mvn.example.com/hosted/&lt;asset&gt;</code> -&gt; <code>https://repo.example.com/repository/maven-hosted/&lt;asset&gt;</code></li>
<li><code>GET https://mvn.example.com/releases/&lt;asset&gt;</code> -&gt; <code>https://repo.example.com/repository/maven-hosted/&lt;asset&gt;</code></li>
<li><code>GET https://mvn.example.com/snapshots/&lt;asset&gt;</code> -&gt; <code>https://repo.example.com/repository/maven-hosted/&lt;asset&gt;</code></li>
<li><code>POST https://mvn.example.com/releases/&lt;asset&gt;</code> -&gt; <code>https://repo.example.com/repository/maven-hosted-releases/&lt;asset&gt;</code></li>
<li><code>POST https://mvn.example.com/snapshots/&lt;asset&gt;</code> -&gt; <code>https://repo.example.com/repository/maven-hosted-snapshots/&lt;asset&gt;</code></li>
</ul>
<p>根据以上规范和需求，<code>https://mvn.example.com</code>的最终配置如下：</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line">    <span class="attribute">listen</span> [::]:<span class="number">443</span> ssl;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">server_name</span> mvn.example.com;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">include</span> /etc/nginx/vhost.d/mvn.example.com/01_ssl.conf;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Redirect to the maven repository (named as 'maven-public') of Nexus3</span></span><br><span class="line">    <span class="attribute">location</span> = / &#123;</span><br><span class="line">        <span class="attribute">return</span> <span class="number">302</span> <span class="variable">$scheme</span>://repo.example.com/<span class="comment">#browse/browse/components:maven-public/;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># Redirect to the target asset of Nexus3</span></span><br><span class="line">    location <span class="regexp">~* ^/repository/maven-.+$</span> &#123;</span><br><span class="line">        <span class="attribute">return</span> <span class="number">301</span> <span class="variable">$scheme</span>://repo.example.com<span class="variable">$request_uri</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Disable cache of assets</span></span><br><span class="line">    <span class="attribute">proxy_cache</span>            <span class="literal">off</span>;</span><br><span class="line">    <span class="attribute">proxy_read_timeout</span>     <span class="number">300</span>;</span><br><span class="line">    <span class="attribute">proxy_connect_timeout</span>  <span class="number">300</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">set</span> <span class="variable">$nexus3</span> http://&lt;nexus3 ip&gt;:&lt;nexus3 web port&gt;;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># <span class="doctag">NOTE:</span> rewrite and proxy_pass should be put in the same block</span></span><br><span class="line">        <span class="comment">## http://nginx.org/en/docs/http/ngx_http_rewrite_module.html#rewrite</span></span><br><span class="line">        <span class="comment"># web browse or `mvn compile`</span></span><br><span class="line">        <span class="attribute">if</span> (<span class="variable">$request_method</span> <span class="regexp">~* "^GET|HEAD$")</span> &#123;</span><br><span class="line">            <span class="attribute">rewrite</span><span class="regexp"> ^/public/(.*)</span>           /repository/maven-public/<span class="variable">$1</span>    <span class="literal">break</span>;</span><br><span class="line">            <span class="attribute">rewrite</span><span class="regexp"> ^/hosted/(.*)</span>           /repository/maven-hosted/<span class="variable">$1</span>    <span class="literal">break</span>;</span><br><span class="line">            <span class="attribute">rewrite</span><span class="regexp"> ^/releases/(.*)</span>         /repository/maven-hosted/<span class="variable">$1</span>    <span class="literal">break</span>;</span><br><span class="line">            <span class="attribute">rewrite</span><span class="regexp"> ^/snapshots/(.*)</span>        /repository/maven-hosted/<span class="variable">$1</span>    <span class="literal">break</span>;</span><br><span class="line">            <span class="attribute">proxy_pass</span>      <span class="variable">$nexus3</span>;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># `mvn deploy`</span></span><br><span class="line">        <span class="attribute">if</span> (<span class="variable">$request_method</span> <span class="regexp">~* "^POST|PUT$")</span> &#123;</span><br><span class="line">            <span class="attribute">rewrite</span><span class="regexp"> ^/(releases|snapshots)/(.*)</span>              /repository/maven-hosted-<span class="variable">$1</span>/<span class="variable">$2</span>   <span class="literal">break</span>;</span><br><span class="line">            <span class="attribute">proxy_pass</span>      <span class="variable">$nexus3</span>;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里需要注意以下几点：</p>
<ul>
<li>在前两个<code>location</code>匹配后均跳转到<code>https://repo.example.com</code>，因为，这两个地址的请求可认为只能是从浏览器发出的，直接跳转到Nexus3可让访问者了解我们使用的是Nexus3系统，从而尽快熟悉该系统，完全没有必要将Nexus3代理到<code>https://mvn.example.com</code>域名下</li>
<li><code>return 301</code>代表固定跳转，浏览器后续访问相同URL时将直接跳转到指定的目标，而不会再向服务器发送请求；而<code>return 302</code>为临时跳转，浏览器的后续访问依然会向服务器发送请求。对<code>= /</code>做临时跳转是因为我们可能会在该URL下放些说明文档之类的页面，如果做固定跳转，那么若后续支持该需求则只能在客户端清空浏览器<code>Cookie</code>后方能生效，对使用者会造成一定困扰</li>
<li>看过<a href="https://github.com/apache/maven" target="_blank" rel="noopener">Maven代码</a>可以发现其使用的<a href="https://hc.apache.org/httpcomponents-client-ga/" target="_blank" rel="noopener">HttpClient</a>库向仓库发送HTTP请求，所以，只需要对<code>$request_method</code>做匹配，将读请求转发到<code>maven-pulic</code>和<code>maven-hosted</code>两个组合仓库中，而将写请求转发到<code>maven-hosted-*</code>仓库即可</li>
</ul>
<p>剩下的就是调整Maven <code>settings.xml</code>。对普通的仅做依赖下载更新的配置为（<strong>仅列出主要内容，请按实际需求修改</strong>）：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://maven.apache.org/settings.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- Associated with &lt;repository/&gt; and &lt;pluginRepository/&gt; --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>your-repo-public<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">username</span>&gt;</span><span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">password</span>&gt;</span><span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>your-repo-hosted<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">username</span>&gt;</span><span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">password</span>&gt;</span><span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>your-repo<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>your-repo-public<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://mvn.example.com/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">releases</span>&gt;</span><span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span><span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span><span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span><span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>your-repo-hosted<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://mvn.example.com/hosted/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">releases</span>&gt;</span><span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span><span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span><span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span><span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>your-repo-public<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://mvn.example.com/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">releases</span>&gt;</span><span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span><span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span><span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span><span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activeProfiles</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activeProfile</span>&gt;</span>your-repo<span class="tag">&lt;/<span class="name">activeProfile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">activeProfiles</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>而对需要向仓库部署包的配置则为（<strong>仅列出主要内容，请按实际需求修改</strong>）：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://maven.apache.org/settings.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- Associated with &lt;repository/&gt; and &lt;pluginRepository/&gt; --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>public<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">username</span>&gt;</span><span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">password</span>&gt;</span><span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">username</span>&gt;</span><span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">password</span>&gt;</span><span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">username</span>&gt;</span><span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">password</span>&gt;</span><span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>thirdparty<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">username</span>&gt;</span><span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">password</span>&gt;</span><span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>your-repo<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>public<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://mvn.example.com/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">releases</span>&gt;</span><span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span><span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span><span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span><span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://mvn.example.com/releases/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">releases</span>&gt;</span><span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span><span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span><span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span><span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://mvn.example.com/snapshots/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">releases</span>&gt;</span><span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span><span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span><span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span><span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>thirdparty<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://mvn.example.com/thirdparty/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">releases</span>&gt;</span><span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span><span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span><span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span><span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>public<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://mvn.example.com/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">releases</span>&gt;</span><span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span><span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span><span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span><span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activeProfiles</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activeProfile</span>&gt;</span>your-repo<span class="tag">&lt;/<span class="name">activeProfile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">activeProfiles</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>注意，Maven在更新时是按照<code>settings.xml</code>中定义的仓库顺序依次查找依赖直到内置的<a href="https://repo.maven.apache.org/maven2" target="_blank" rel="noopener">central</a>仓库，若在某个仓库中找到依赖则停止查找。因此，需要注意调整仓库的位置以避免因依赖同名而导致下载的内容与预期的不同。</p>
<h3 id="https-npm-example-com的反向代理配置"><a href="#https-npm-example-com的反向代理配置" class="headerlink" title="https://npm.example.com的反向代理配置"></a><code>https://npm.example.com</code>的反向代理配置</h3><blockquote>
<p>Source code: <a href="https://github.com/flytreeleft/docker-nginx-gateway/blob/master/examples/vhost.d/repo.example.com.conf#L182" target="_blank" rel="noopener">https://github.com/flytreeleft/docker-nginx-gateway/blob/master/examples/vhost.d/repo.example.com.conf#L182</a></p>
</blockquote>
<p><code>https://npm.example.com</code>与<code>https://mvn.example.com</code>的规划和注意事项基本一致，只是<code>npm-hosted</code>仓库直接使用<code>hosted</code>模式，因为NPM依赖包没有快照版本，而<code>npm-public</code>仓库依然为<code>group</code>模式，用于组合多个第三方仓库。</p>
<p>以下为对<code>https://npm.example.com</code>的完整配置：</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line">    <span class="attribute">listen</span> [::]:<span class="number">443</span> ssl;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">server_name</span> npm.example.com;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">include</span> /etc/nginx/vhost.d/npm.example.com/01_ssl.conf;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Redirect to the npm repository (named as 'npm-public') of Nexus3</span></span><br><span class="line">    <span class="attribute">location</span> = / &#123;</span><br><span class="line">        <span class="attribute">return</span> <span class="number">302</span> <span class="variable">$scheme</span>://repo.example.com/<span class="comment">#browse/browse/components:npm-public/;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># Redirect to the target asset of Nexus3</span></span><br><span class="line">    location <span class="regexp">~* ^/repository/npm-.+$</span> &#123;</span><br><span class="line">        <span class="attribute">return</span> <span class="number">301</span> <span class="variable">$scheme</span>://repo.example.com<span class="variable">$request_uri</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Disable cache of assets</span></span><br><span class="line">    <span class="attribute">proxy_cache</span>            <span class="literal">off</span>;</span><br><span class="line">    <span class="attribute">proxy_read_timeout</span>     <span class="number">60</span>;</span><br><span class="line">    <span class="attribute">proxy_connect_timeout</span>  <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">set</span> <span class="variable">$nexus3</span> http://&lt;nexus3 ip&gt;:&lt;nexus3 web port&gt;;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># <span class="doctag">NOTE:</span> rewrite and proxy_pass should be put in the same block</span></span><br><span class="line">        <span class="comment">## http://nginx.org/en/docs/http/ngx_http_rewrite_module.html#rewrite</span></span><br><span class="line">        <span class="comment"># web browse or `npm install`</span></span><br><span class="line">        <span class="attribute">if</span> (<span class="variable">$request_method</span> <span class="regexp">~* "^GET$")</span> &#123;</span><br><span class="line">            <span class="attribute">rewrite</span><span class="regexp"> ^/(.+)</span>                      /repository/npm-public/<span class="variable">$1</span>      <span class="literal">break</span>;</span><br><span class="line">            <span class="attribute">proxy_pass</span>      <span class="variable">$nexus3</span>;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># `npm publish`</span></span><br><span class="line">        <span class="attribute">if</span> (<span class="variable">$request_method</span> <span class="regexp">~* "^PUT|DELETE$")</span> &#123;</span><br><span class="line">            <span class="attribute">rewrite</span><span class="regexp"> ^/(.+)</span>          /repository/npm-hosted/<span class="variable">$1</span>   <span class="literal">break</span>;</span><br><span class="line">            <span class="attribute">proxy_pass</span>      <span class="variable">$nexus3</span>;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在安装或发布模块时可通过选项<code>--registry</code>临时指定目标仓库地址：</p>
<ul>
<li>安装模块：<code>npm --registry=https://npm.example.com install &lt;module&gt;</code></li>
<li>发布模块：<code>npm --registry=https://npm.example.com publish &lt;folder&gt;</code></li>
</ul>
<p>也可以替换默认仓库，直接使用私有仓库：<code>npm config set registry https://npm.example.com</code>。</p>
<p>若需要还原为默认仓库，则运行命令<code>npm config set registry https://registry.npmjs.org</code>。</p>
<p><a href="https://docs.npmjs.com/cli/adduser" target="_blank" rel="noopener">登录</a>仓库则执行命令<code>npm login --registry=https://npm.example.com</code>。</p>
<h3 id="https-dcr-example-com的反向代理配置"><a href="#https-dcr-example-com的反向代理配置" class="headerlink" title="https://dcr.example.com的反向代理配置"></a><code>https://dcr.example.com</code>的反向代理配置</h3><blockquote>
<p>Source code: <a href="https://github.com/flytreeleft/docker-nginx-gateway/blob/master/examples/vhost.d/repo.example.com.conf#L50" target="_blank" rel="noopener">https://github.com/flytreeleft/docker-nginx-gateway/blob/master/examples/vhost.d/repo.example.com.conf#L50</a></p>
</blockquote>
<p>在Nexus3中，Docker类型的仓库需要使用不同的端口进行访问，创建仓库时需要为仓库<a href="http://www.sonatype.org/nexus/2016/06/29/using-nexus-3-as-a-private-docker-registry/" target="_blank" rel="noopener">自行设定</a>一个HTTP端口号，然后再通过Nginx将读写请求转发到不同的端口上。</p>
<p>这里创建一个<code>hosted</code>模式的仓库<code>docker-hosted</code>用于<code>docker push</code>镜像，创建一个<code>group</code>模式的仓库<code>docker-public</code>用于组合多个第三方镜像仓库。</p>
<p>最终，针对<code>https://dcr.example.com</code>的Nginx配置如下：</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line">    <span class="attribute">listen</span> [::]:<span class="number">443</span> ssl;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">server_name</span> dcr.example.com;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">include</span> /etc/nginx/vhost.d/dcr.example.com/01_ssl.conf;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Disable cache of assets</span></span><br><span class="line">    <span class="attribute">proxy_cache</span>            <span class="literal">off</span>;</span><br><span class="line">    <span class="attribute">proxy_read_timeout</span>     <span class="number">600</span>;</span><br><span class="line">    <span class="attribute">proxy_connect_timeout</span>  <span class="number">600</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">if</span> (<span class="variable">$http_user_agent</span> !<span class="regexp">~* "^docker/.+$")</span> &#123;</span><br><span class="line">            <span class="attribute">return</span> <span class="number">301</span> <span class="variable">$scheme</span>://repo.example.com/<span class="comment">#browse/browse/components:docker-public$request_uri;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        set <span class="variable">$nexus3</span> http://&lt;nexus3 ip&gt;;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># docker pull dcr.example.com/xx-xx</span></span><br><span class="line">        <span class="attribute">set</span> <span class="variable">$repo_url</span> <span class="variable">$nexus3</span>:&lt;docker-public port&gt;;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># https://github.com/moby/moby/blob/7061b0f748c29ffd1e6852cdc5dd11f90840eb1c/daemon/logger/awslogs/cloudwatchlogs_test.go#L71</span></span><br><span class="line">        <span class="comment"># https://github.com/moby/moby/blob/master/client/image_pull.go</span></span><br><span class="line">        <span class="comment"># https://github.com/moby/moby/blob/master/client/image_push.go</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># <span class="doctag">NOTE:</span> rewrite and proxy_pass should be put in the same block</span></span><br><span class="line">        <span class="comment">## http://nginx.org/en/docs/http/ngx_http_rewrite_module.html#rewrite</span></span><br><span class="line">        <span class="comment"># docker push dcr.example.com/xx-xx</span></span><br><span class="line">        <span class="attribute">if</span> (<span class="variable">$request_method</span> <span class="regexp">~* "^HEAD|POST|PUT|DELETE|PATCH$")</span> &#123;</span><br><span class="line">            <span class="attribute">set</span> <span class="variable">$repo_url</span> <span class="variable">$nexus3</span>:&lt;docker-hosted port&gt;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">proxy_pass</span> <span class="variable">$repo_url</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里同样需注意以下几个问题：</p>
<ul>
<li>Docker发送的HTTP请求中<code>User Agent</code>包含<code>docker</code>字符串，因此，如果<code>$http_user_agent</code>中没有这个字符串，则视为浏览器访问，直接跳转到<code>https://repo.example.com</code></li>
<li>从Docker的源码中可以发现<code>HTTP Method</code>为<code>HEAD</code>、<code>POST</code>、<code>PUT</code>、<code>DELETE</code>、<code>PATCH</code>均与镜像变更（新增、删除、打标签、更新等）有关，因此，需要将这些请求均转发到<code>docker-hosted</code>仓库</li>
</ul>
<p>在使用时可分别通过以下命令登录仓库以及拉取或推送镜像：</p>
<ul>
<li>登录仓库：<code>docker login dcr.example.com</code></li>
<li>拉取镜像：<code>docker pull dcr.example.com/&lt;image name&gt;:&lt;image version&gt;</code></li>
<li>推送镜像：<code>docker push dcr.example.com/&lt;image name&gt;:&lt;image version&gt;</code></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 运维管理 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Nginx配置 </tag>
            
            <tag> Nginx over Squid </tag>
            
            <tag> Nginx防火墙穿透 </tag>
            
            <tag> HTTPS代理HTTP资源 </tag>
            
            <tag> Nginx自定义错误页面 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[未来社会形态畅想]]></title>
      <url>/the-future-social-formation/</url>
      <content type="html"><![CDATA[<blockquote>
<p>The post isn’t finished yet, it will be updated anytime!</p>
</blockquote>
<h2 id="无现金社会"><a href="#无现金社会" class="headerlink" title="无现金社会"></a>无现金社会</h2><p>提要：</p>
<ul>
<li>比特币、比特交易网络</li>
<li><a href="https://www.ethereum.org/" target="_blank" rel="noopener">以太坊</a></li>
<li><a href="http://www.iotachina.com/what-is-iota" target="_blank" rel="noopener">IOTA</a><ul>
<li><a href="http://www.iotachina.com/ruhezhaohuiiotayue.html" target="_blank" rel="noopener">如何找回IOTA余额</a>：可以从中了解转账机制与流程</li>
</ul>
</li>
</ul>
<a id="more"></a>
<h2 id="自由工作"><a href="#自由工作" class="headerlink" title="自由工作"></a>自由工作</h2><p>提要：</p>
<ul>
<li>为个人价值体现、兴趣、探索未知而工作，而不是为了生活和生存</li>
<li>社会基础能够保障个人衣食无忧，确保个人在任何时刻都无需担心温饱和居住问题，从而有精力专注于思考和探索上<ul>
<li>种植、生产、制造、输送流程实现全自动化、机械化</li>
</ul>
</li>
<li>自由选择工作时间、工作地点，不为特定的个人、团体、组织、企业工作，仅为达到某个目标而做事并获得对等回报</li>
</ul>
<h2 id="万物互联"><a href="#万物互联" class="headerlink" title="万物互联"></a>万物互联</h2><p>提要：</p>
<ul>
<li>联网的每个设备既为内容消费端，也是内容存储端，同时也是网络热点，附近的设备可随时且自由地连接在一起</li>
<li>基于内容进行网络访问，而不再基于IP或域名，任何端点都可能含有所需内容，就近选择并从该端点下载内容即可，内容原始发布端将无关紧要</li>
<li>分布式、无中心化的基础网络，不再需要路由器、交换机、服务器等中心设备</li>
<li>初始阶段需要通过ISP打通各个闭环网络（闭环的连接设备群组），当多个闭环网络连接形成足够大的闭环后，设备之间的通信将无需ISP的支持<ul>
<li>家用路由器等可自由共享网络，助推「万物网」的形成</li>
</ul>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 社会形态 </category>
            
            <category> 未来世界 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 无现金社会 </tag>
            
            <tag> 无中心化 </tag>
            
            <tag> 万物互联 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[作恶行为清单]]></title>
      <url>/the-evil-behaviors/</url>
      <content type="html"><![CDATA[<blockquote>
<p>列举日常和网络中所发现的软件、应用、服务等的「作恶」行为，将其永久钉在「耻辱柱」上。有条件的或有候选方案的，应主动弃用之！<br>坚持开放、坚持自由。点击下载<a href="http://mirror.lihnidos.org/GNU/savannah/blug/fsfs-zh/fsfs-zh.pdf" target="_blank" rel="noopener">自由软件自由社会.pdf</a><br>就事论事，不针对个人、企业、平台，挖掘现象本质，努力尝试寻找更优方案</p>
</blockquote>
<h2 id="为逼迫用户使用客户端而阉割Web端的基本功能"><a href="#为逼迫用户使用客户端而阉割Web端的基本功能" class="headerlink" title="为逼迫用户使用客户端而阉割Web端的基本功能"></a>为逼迫用户使用客户端而阉割Web端的基本功能</h2><ul>
<li>案例： <a href="https://2.taobao.com/" target="_blank" rel="noopener">闲鱼</a>Web端隐藏搜索框</li>
<li>来源： <a href="https://www.appinn.com/xianyu-search-box/" target="_blank" rel="noopener">https://www.appinn.com/xianyu-search-box/</a></li>
<li>评语： 若欲达KPI，必先「中二自宫」<a id="more"></a>
</li>
</ul>
<p><img src="/assets/images/the-evil-behaviors/xianyu-hide-itself-search-form-of-web-client.png" alt="闲鱼Web端隐藏搜索框截图@2017-12-05"></p>
<h2 id="封闭平台之间因为利益互怼，以用户为筹码逼迫对方作出让步"><a href="#封闭平台之间因为利益互怼，以用户为筹码逼迫对方作出让步" class="headerlink" title="封闭平台之间因为利益互怼，以用户为筹码逼迫对方作出让步"></a>封闭平台之间因为利益互怼，以用户为筹码逼迫对方作出让步</h2><ul>
<li>案例： 谷歌<a href="https://youtube.com" target="_blank" rel="noopener">Youtube</a>禁止亚马逊<a href="https://developer.amazon.com/echo" target="_blank" rel="noopener">Echo</a>访问</li>
<li>来源： <a href="http://www.ifanr.com/951314" target="_blank" rel="noopener">http://www.ifanr.com/951314</a></li>
<li>相关： <a href="https://zh.wikipedia.org/wiki/%E5%A5%87%E8%99%8E360%E4%B8%8E%E8%85%BE%E8%AE%AFQQ%E4%BA%89%E6%96%97%E4%BA%8B%E4%BB%B6" target="_blank" rel="noopener">360与QQ大战</a>、<a href="http://wiki.mbalib.com/wiki/%E9%A1%BA%E4%B8%B0%E8%8F%9C%E9%B8%9F%E4%B9%8B%E4%BA%89" target="_blank" rel="noopener">菜鸟与顺丰互怼</a></li>
<li>评语： 用户在我手，天下跟我走。看不惯？你咬我呀！</li>
<li>观点： 在「封闭平台」中，用户从一开始便是平台的筹码，当平台「自认为」利益受到其他平台威胁时，便会不惜以损害用户体验的方式进行反击，其平日讨好用户的伪善面目便暴露无疑。平台越大，心眼越小，不安全感越严重，思路越单一，解决问题的方式越是直接粗暴。</li>
</ul>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[软件开发最佳实践]]></title>
      <url>/the-better-software-development-practice/</url>
      <content type="html"><![CDATA[<blockquote>
<p>The post isn’t finished yet, it will be updated anytime!</p>
</blockquote>
<a id="more"></a>
]]></content>
      
        <categories>
            
            <category> 开发规范 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[软件开发行为准则]]></title>
      <url>/the-software-development-criterion/</url>
      <content type="html"><![CDATA[<blockquote>
<p>The post isn’t finished yet, it will be updated anytime!</p>
</blockquote>
<h2 id="谨慎对待用户隐私"><a href="#谨慎对待用户隐私" class="headerlink" title="谨慎对待用户隐私"></a>谨慎对待用户隐私</h2><p>提要：</p>
<ul>
<li>不是仅用户确认后的数据才算是「用户隐私」，任何与用户相关的数据都应该「默认」视为用户隐私，<u>不需要任何形式的确认</u>，<br>而只有经过用户确认和同意的数据方可用作其他用途，且前提必须是明确告知数据为何要做次用途，以及将被如何利用、涉及哪些风险等</li>
</ul>
<a id="more"></a>
<h2 id="努力降低总体开发和使用成本"><a href="#努力降低总体开发和使用成本" class="headerlink" title="努力降低总体开发和使用成本"></a>努力降低总体开发和使用成本</h2><p>提要：</p>
<ul>
<li>总体成本等于所有个人的时间成本与财力物力之总和</li>
<li>提供到达/完成目标的最短操作路径<ul>
<li>提供详细的文档（开发、设计、使用），备注相关知识来源链接，从最终使用者角度考虑使用流程、会遇到的困难和疑问、期望的快捷方式</li>
<li>将当前关注点在一页（一屏）中展示；直接到达操作按钮；</li>
<li>从开发者与最终用户的角度思考各个关注点，直接提供所需信息、接口、说明以及软件功能</li>
<li>不是一眼就明了其意义的图标需提供文字提示或说明，或者直接使用文字</li>
</ul>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 开发规范 </category>
            
            <category> 职业道德 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 隐私 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[如何突破自己的瓶颈？]]></title>
      <url>/how-to-break-out-of-your-limit/</url>
      <content type="html"><![CDATA[<blockquote>
<p>The post isn’t finished yet, it will be updated anytime!</p>
</blockquote>
<h2 id="以旁观者角度审视自己"><a href="#以旁观者角度审视自己" class="headerlink" title="以旁观者角度审视自己"></a>以旁观者角度审视自己</h2><p>提要：</p>
<ul>
<li>勇敢面对自己，正视自己的缺点</li>
<li>客观分析自己的好的、坏的甚至是邪恶的想法，不好的想法切不可影响到他人，需要自我消化</li>
<li>人无完人，对于非理性情绪不要过分压抑，在不影响他人的情况下采取各种积极或消极的方式去释放这些情绪<ul>
<li>消极的释放方式所要达到的目的是推翻重建，进入全新的境界，从而从另一个视角看待原来的情绪和行为</li>
</ul>
</li>
</ul>
<a id="more"></a>
<h2 id="理性看待他人的评论、观点和建议，保持就事论事的态度，切忌带有个人情绪，更不要被别人带着走（影响个人情绪、怀疑个人价值观等等）"><a href="#理性看待他人的评论、观点和建议，保持就事论事的态度，切忌带有个人情绪，更不要被别人带着走（影响个人情绪、怀疑个人价值观等等）" class="headerlink" title="理性看待他人的评论、观点和建议，保持就事论事的态度，切忌带有个人情绪，更不要被别人带着走（影响个人情绪、怀疑个人价值观等等）"></a>理性看待他人的评论、观点和建议，保持就事论事的态度，切忌带有个人情绪，更不要被别人带着走（影响个人情绪、怀疑个人价值观等等）</h2><p>提要：</p>
<ul>
<li>若无法静心并保持客观，那就禁用评论，不与人争论，专注于自己的思考方向，但需多接触不同观点，及时调整，不可过于执念</li>
<li>开放心态，放下恩怨是非，求同存异</li>
<li>事物的美好在于不同，不同的观点、思想的碰撞才能产生激烈的火花，而消灭差异最终只会沦为「行尸走肉」</li>
<li>「尊重你说话的权利，但也保留我的个人意见」</li>
<li>没有绝对的对错，对错都是相对的，在不同身份、不同环境、不同角度甚至可能发生反转。依据当前已知信息作出相对合理的选择，并在实践过程中不断调整</li>
</ul>
<h2 id="专注于探索自己的生活方式和方向，不羡慕别人的生活，先过好自己的"><a href="#专注于探索自己的生活方式和方向，不羡慕别人的生活，先过好自己的" class="headerlink" title="专注于探索自己的生活方式和方向，不羡慕别人的生活，先过好自己的"></a>专注于探索自己的生活方式和方向，不羡慕别人的生活，先过好自己的</h2><p>提要：</p>
<ul>
<li>时常在朋友圈、新闻、他人口中看到或听到某某光鲜亮丽、幸福美满、事业猛进，而自己依然处于迷茫、混沌、一人吃饱全家不饿的状态，心里倍感失落、感觉就是一loser，进而嫉妒别人，甚而诅咒他人</li>
<li>那你需要静下来分析，如何形成当前局面，自己真正需要的是什么，自己在生活的路上做了什么</li>
<li>别人都在幸福的路上忙碌奔波，而你却有如此闲心去妒嫉别人的生活？</li>
<li>人人都有自己的活法，也有不同的满足，找到属于自己的，并聚焦于此，为此而忙碌，心无杂念</li>
<li>以“出世”的态度去观察他人和自己，不要觉得自己过得不如意就希望全世界都得与你一起面对种种不如意，从他人的不幸中去寻找优越感，将会使自己越来越失败、愤恨、怀疑自己。不断战胜、超越自己才是正途</li>
<li>始终保持内心的平静，避免外界对自己的诱惑和干扰，要有自己的坚守，纯粹的名与利终究是带不走的</li>
<li>沉下心来专注于自己的事情，朝着自己认为可行的方向前行，也许会失败，但在行进过程中同样也能学到很多东西，所以，不要一开始就因为害怕失败而不去做，先勇敢地去做，快速尝试以快速失败或成功</li>
</ul>
<h2 id="对所见、所听、所接触的事、物、人，取其精华去其糟泊，吸收有用可取的方式，探索本质，获得处事之道"><a href="#对所见、所听、所接触的事、物、人，取其精华去其糟泊，吸收有用可取的方式，探索本质，获得处事之道" class="headerlink" title="对所见、所听、所接触的事、物、人，取其精华去其糟泊，吸收有用可取的方式，探索本质，获得处事之道"></a>对所见、所听、所接触的事、物、人，取其精华去其糟泊，吸收有用可取的方式，探索本质，获得处事之道</h2><p>提要：</p>
<ul>
<li>有些人就是人生路上的“小怪兽”，有些人是良师益友</li>
</ul>
<h2 id="随时准备两件事情，以避免当前事情完成后不知道该继续做什么的困境"><a href="#随时准备两件事情，以避免当前事情完成后不知道该继续做什么的困境" class="headerlink" title="随时准备两件事情，以避免当前事情完成后不知道该继续做什么的困境"></a>随时准备两件事情，以避免当前事情完成后不知道该继续做什么的困境</h2><h2 id="准备一份阅读书籍列表，在无所事事时，避免无目的的刷网页，转而看书会更加有益"><a href="#准备一份阅读书籍列表，在无所事事时，避免无目的的刷网页，转而看书会更加有益" class="headerlink" title="准备一份阅读书籍列表，在无所事事时，避免无目的的刷网页，转而看书会更加有益"></a>准备一份阅读书籍列表，在无所事事时，避免无目的的刷网页，转而看书会更加有益</h2>]]></content>
      
        <categories>
            
            <category> 自我剖析 </category>
            
            <category> 人性探索 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 自我 </tag>
            
            <tag> 静心 </tag>
            
            <tag> 优越感 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git使用案例]]></title>
      <url>/git-usage-cases/</url>
      <content type="html"><![CDATA[<h2 id="拆分子目录到新仓库"><a href="#拆分子目录到新仓库" class="headerlink" title="拆分子目录到新仓库"></a>拆分子目录到新仓库</h2><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p>通常为便于项目开发和调试，开发前期会将多个组件放在同一仓库中，而当各个组件的功能结构和代码逐渐区域稳定后，<br>便需要将其拆分出来进行独立开发和管理，以便于与其他项目共享组件。</p>
<p>此时，不仅需要将组件所在目录内的代码全部拆分到单独的仓库，同时，还需要确保历史记录能够完整保留。</p>
<a id="more"></a>
<h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Clone the repository that contains the subfolder.</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/USERNAME/REPOSITORY-NAME</span><br><span class="line"><span class="built_in">cd</span> REPOSITORY-NAME</span><br><span class="line"></span><br><span class="line"><span class="comment"># To filter out the subfolder from the rest of the files in the repository</span></span><br><span class="line"><span class="comment">## FOLDER-NAME: The folder within your project that you'd like to create a separate repository from.</span></span><br><span class="line"><span class="comment">## BRANCH-NAME: The default branch for your current project, for example, 'master' or 'gh-pages'</span></span><br><span class="line">git filter-branch --prune-empty --subdirectory-filter FOLDER-NAME BRANCH-NAME</span><br><span class="line"></span><br><span class="line"><span class="comment"># Change the existing remote 'origin' (or other name) URL to the new repository URL</span></span><br><span class="line">git remote <span class="built_in">set</span>-url origin https://github.com/USERNAME/NEW-REPOSITORY-NAME.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># [Optional] Change BRANCH-NAME to the default branch (e.g. 'master') of the new repository</span></span><br><span class="line">git branch -m BRANCH-NAME master</span><br><span class="line"></span><br><span class="line"><span class="comment"># Push your changes to the new repository</span></span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>
<p><strong>注意</strong>：</p>
<ul>
<li>在第二步操作后，当前目录将会只剩下子目录中的文件</li>
<li>最好在新的目录中进行上述操作：可以直接clone，也可以从复制已有项目到其他目录</li>
</ul>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://help.github.com/articles/splitting-a-subfolder-out-into-a-new-repository/" target="_blank" rel="noopener">Splitting a subfolder out into a new repository</a></li>
</ul>
<h2 id="修改变更提交人的信息"><a href="#修改变更提交人的信息" class="headerlink" title="修改变更提交人的信息"></a>修改变更提交人的信息</h2><h3 id="场景-1"><a href="#场景-1" class="headerlink" title="场景"></a>场景</h3><p>基于项目长远发展考虑，将某个具有实用价值且吸引力极大的项目开源，<br>需要将项目从公司内部仓库开放到Github上，但相关开发人员在两个系统中所用帐号不一致，<br>为了便于issue交流以及PR提交，这时，需要更改历史中的提交人信息。</p>
<p>其实，大多数时候，很可能是要弃用内部仓库并将工作全部移到公共仓库时才有这么做的需求，其余情况并不需要这么做。</p>
<h3 id="操作-1"><a href="#操作-1" class="headerlink" title="操作"></a>操作</h3><ul>
<li>部分替换：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">git filter-branch --commit-filter \</span><br><span class="line">        <span class="string">'if [ "$GIT_AUTHOR_NAME" = "OldAuthor Name" ]; then \</span></span><br><span class="line"><span class="string">             export GIT_AUTHOR_NAME="Author Name"; \</span></span><br><span class="line"><span class="string">             export GIT_AUTHOR_EMAIL=authorEmail@example.com; \</span></span><br><span class="line"><span class="string">             export GIT_COMMITTER_NAME="Commmiter Name"; \</span></span><br><span class="line"><span class="string">             export GIT_COMMITTER_EMAIL=commiterEmail@example.com; \</span></span><br><span class="line"><span class="string">         fi; \</span></span><br><span class="line"><span class="string">         git commit-tree "$@" '</span></span><br><span class="line"><span class="comment"># Push to the branch 'master' of the existing repository</span></span><br><span class="line">git push --force origin master</span><br></pre></td></tr></table></figure>
<ul>
<li>全部替换：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git filter-branch --commit-filter \</span><br><span class="line">        <span class="string">'export GIT_AUTHOR_NAME="Author Name"; \</span></span><br><span class="line"><span class="string">         export GIT_AUTHOR_EMAIL=authorEmail@example.com; \</span></span><br><span class="line"><span class="string">         export GIT_COMMITTER_NAME="Commmiter Name"; \</span></span><br><span class="line"><span class="string">         export GIT_COMMITTER_EMAIL=commiterEmail@example.com; \</span></span><br><span class="line"><span class="string">         git commit-tree "$@" '</span></span><br><span class="line"><span class="comment"># Push to the branch 'master' of the existing repository</span></span><br><span class="line">git push --force origin master</span><br></pre></td></tr></table></figure>
<p><strong>注意</strong>：</p>
<ul>
<li>若出现类似<code>Cannot create a new backup. A previous backup already exists in refs/original/. Force overwriting the backup with -f</code>的异常提示，则需要在<code>filter-branch</code>命令中添加选项<code>-f</code>，即<code>git filter-branch -f</code>，以强制进行修改</li>
<li>如果提交的分支是受保护的，则在提交时会出现<code>remote: GitLab: You are not allowed to force push code to a protected branch on this project.</code>的错误信息，此时，需要调整仓库设置，临时取消对目标分支的保护</li>
</ul>
<h3 id="参考-1"><a href="#参考-1" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://stackoverflow.com/questions/4493936/could-i-change-my-name-and-surname-in-all-previous-commits" target="_blank" rel="noopener">Could I change my name and surname in all previous commits?</a></li>
</ul>
<h2 id="迁移子分支至新仓库"><a href="#迁移子分支至新仓库" class="headerlink" title="迁移子分支至新仓库"></a>迁移子分支至新仓库</h2><h3 id="场景-2"><a href="#场景-2" class="headerlink" title="场景"></a>场景</h3><p>某个项目仓库中可能存在多个功能特性（features）分支，在一段时候后，基于产品功能规划和开发维护等方面的考虑，<br>需要将某些特性分支独立成新的项目或子项目，将其迁移到新的仓库中。</p>
<h3 id="操作-2"><a href="#操作-2" class="headerlink" title="操作"></a>操作</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Push 'feature-branch' to the branch 'master' (or others) of new repository</span></span><br><span class="line">git push url://to/new/repository.git feature-branch:master</span><br><span class="line"></span><br><span class="line"><span class="comment"># [Optional] Delete the 'feature-branch' from current repository</span></span><br><span class="line">git branch -d feature-branch</span><br><span class="line"></span><br><span class="line"><span class="comment"># Clone codes from new repository</span></span><br><span class="line">git <span class="built_in">clone</span> url://to/new/repository.git feature-branch</span><br></pre></td></tr></table></figure>
<h3 id="参考-2"><a href="#参考-2" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://stackoverflow.com/questions/2227062/how-do-i-move-a-git-branch-out-into-its-own-repository" target="_blank" rel="noopener">How do I move a Git branch out into its own repository?</a></li>
</ul>
<h2 id="修改历史提交备注信息"><a href="#修改历史提交备注信息" class="headerlink" title="修改历史提交备注信息"></a>修改历史提交备注信息</h2><h3 id="场景-3"><a href="#场景-3" class="headerlink" title="场景"></a>场景</h3><p>在<a href="#拆分子目录到新仓库">拆分子目录</a>和<a href="#迁移子分支至新仓库">迁移子分支</a>两个场景中，<br>在新仓库中的历史提交记录的备注信息可能存在与项目不相关的信息或者包含原始项目中的一些敏感内容。<br>这个时候，就可能需要修改这些备注信息。</p>
<p>当然，也可能是因为发现以前的提交备注中包含错别字或者表达不清晰，为了避免对其他人产生误导或困惑，<br>将提交的备注信息予以纠正也是很有必要的。</p>
<h3 id="操作-3"><a href="#操作-3" class="headerlink" title="操作"></a>操作</h3><ul>
<li>获取提交ID并Rebase到该提交</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># List histories and get the commit id which should be modified</span></span><br><span class="line">git <span class="built_in">log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Rebase to 3 commits before the specified commit (e.g. 'ce0ac37c83')</span></span><br><span class="line">git rebase --interactive ce0ac37c83~3</span><br></pre></td></tr></table></figure>
<p><img src="/assets/images/git-usage-cases-rebase-to-target-commit.png" alt=""></p>
<ul>
<li>将提交所在行开始处的<code>pick</code>修改为<code>edit</code></li>
</ul>
<p><img src="/assets/images/git-usage-cases-change-history-commit.png" alt=""></p>
<ul>
<li>提交并应用修改</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># New commit message</span></span><br><span class="line">git commit --amend -m <span class="string">"fix that the dragging preview can not be shown"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Apply the changes and return to HEAD</span></span><br><span class="line">git rebase --<span class="built_in">continue</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Push to the branch 'master' of the existing repository</span></span><br><span class="line"><span class="comment">## Make sure that the remote branch 'master' is unprotected</span></span><br><span class="line">git push --force origin master</span><br></pre></td></tr></table></figure>
<p><strong>注意</strong>：</p>
<ul>
<li>如果需要放弃修改，则运行命令<code>git rebase --abort</code></li>
<li>若直接<code>rebase</code>到目标commit，则该提交不会显示在可修改清单内，故，需选择从其之前的第N个（e.g. <code>~3</code>）提交开始</li>
<li>若提交至非空的仓库，需确保目标分支不是受保护（<code>protected</code>）的</li>
<li>在应用修改后，git将从修改位置开始重新构建commit tree，因此，从该位置开始到HEAD的commit id均会发生变化，但原始commit tree依然存在，通过<code>git diff ce0ac37c83</code>等可看到该提交的变更情况</li>
</ul>
<h3 id="参考-3"><a href="#参考-3" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://stackoverflow.com/questions/179123/how-to-modify-existing-unpushed-commits" target="_blank" rel="noopener">How to modify existing, unpushed commits?</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 开发工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello world!]]></title>
      <url>/hello-world/</url>
      <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"Hello world!"</span>);</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="string">'Hello world!'</span>);</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"Hello world!"</span></span><br></pre></td></tr></table></figure>
]]></content>
      
        
    </entry>
    
  
  
</search>
