<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Git使用案例]]></title>
      <url>/git-usage-cases/</url>
      <content type="html"><![CDATA[<h2 id="拆分子目录到新仓库"><a href="#拆分子目录到新仓库" class="headerlink" title="拆分子目录到新仓库"></a>拆分子目录到新仓库</h2><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p>通常为便于项目开发和调试，开发前期会将多个组件放在同一仓库中，而当各个组件的功能结构和代码逐渐区域稳定后，<br>便需要将其拆分出来进行独立开发和管理，以便于与其他项目共享组件。</p>
<p>此时，不仅需要将组件所在目录内的代码全部拆分到单独的仓库，同时，还需要确保历史记录能够完整保留。</p>
<h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Clone the repository that contains the subfolder.</span></div><div class="line">git <span class="built_in">clone</span> https://github.com/USERNAME/REPOSITORY-NAME</div><div class="line"><span class="built_in">cd</span> REPOSITORY-NAME</div><div class="line"><span class="comment"># To filter out the subfolder from the rest of the files in the repository</span></div><div class="line"><span class="comment">## FOLDER-NAME: The folder within your project that you'd like to create a separate repository from.</span></div><div class="line"><span class="comment">## BRANCH-NAME: The default branch for your current project, for example, 'master' or 'gh-pages'</span></div><div class="line">git filter-branch --prune-empty --subdirectory-filter FOLDER-NAME BRANCH-NAME</div><div class="line"><span class="comment"># Change the existing remote 'origin' (or other name) URL to the new repository URL</span></div><div class="line">git remote <span class="built_in">set</span>-url origin https://github.com/USERNAME/NEW-REPOSITORY-NAME.git</div><div class="line"><span class="comment"># [Optional] Change BRANCH-NAME to the default branch (e.g. 'master') of the new repository</span></div><div class="line">git branch -m BRANCH-NAME master</div><div class="line"><span class="comment"># Push your changes to the new repository</span></div><div class="line">git push -u origin master</div></pre></td></tr></table></figure>
<p><strong>注意</strong>：</p>
<ul>
<li>在第二步操作后，当前目录将会只剩下子目录中的文件</li>
<li>最好在新的目录中进行上述操作：可以直接clone，也可以从复制已有项目到其他目录</li>
</ul>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://help.github.com/articles/splitting-a-subfolder-out-into-a-new-repository/" target="_blank" rel="external">Splitting a subfolder out into a new repository</a></li>
</ul>
<h2 id="修改变更提交人的信息"><a href="#修改变更提交人的信息" class="headerlink" title="修改变更提交人的信息"></a>修改变更提交人的信息</h2><h3 id="场景-1"><a href="#场景-1" class="headerlink" title="场景"></a>场景</h3><p>基于项目长远发展考虑，将某个具有实用价值且吸引力极大的项目开源，<br>需要将项目从公司内部仓库开放到Github上，但相关开发人员在两个系统中所用帐号不一致，<br>为了便于issue交流以及PR提交，这时，需要更改历史中的提交人信息。</p>
<p>其实，大多数时候，很可能是要弃用内部仓库并将工作全部移到公共仓库时才有这么做的需求，其余情况并不需要这么做。</p>
<h3 id="操作-1"><a href="#操作-1" class="headerlink" title="操作"></a>操作</h3><ul>
<li><p>部分替换：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">git filter-branch --commit-filter \</div><div class="line">        <span class="string">'if [ "$GIT_AUTHOR_NAME" = "OldAuthor Name" ]; then \</span></div><div class="line">             export GIT_AUTHOR_NAME="Author Name"; \</div><div class="line">             export GIT_AUTHOR_EMAIL=authorEmail@example.com; \</div><div class="line">             export GIT_COMMITTER_NAME="Commmiter Name"; \</div><div class="line">             export GIT_COMMITTER_EMAIL=commiterEmail@example.com; \</div><div class="line">         fi; \</div><div class="line">         git commit-tree "$@" '</div><div class="line"><span class="comment"># Push 'master' to the existing repository</span></div><div class="line">git push --force origin master</div></pre></td></tr></table></figure>
</li>
<li><p>全部替换：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">git filter-branch --commit-filter \</div><div class="line">        <span class="string">'export GIT_AUTHOR_NAME="Author Name"; \</span></div><div class="line">         export GIT_AUTHOR_EMAIL=authorEmail@example.com; \</div><div class="line">         export GIT_COMMITTER_NAME="Commmiter Name"; \</div><div class="line">         export GIT_COMMITTER_EMAIL=commiterEmail@example.com; \</div><div class="line">         git commit-tree "$@" '</div><div class="line"><span class="comment"># Push 'master' to the existing repository</span></div><div class="line">git push --force origin master</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>注意</strong>：</p>
<ul>
<li>若出现类似<code>Cannot create a new backup. A previous backup already exists in refs/original/. Force overwriting the backup with -f</code>的异常提示，则需要在<code>filter-branch</code>命令中添加选项<code>-f</code>，即<code>git filter-branch -f</code>，以强制进行修改</li>
<li>如果提交的分支是受保护的，则在提交时会出现<code>remote: GitLab: You are not allowed to force push code to a protected branch on this project.</code>的错误信息，此时，需要调整仓库设置，临时取消对目标分支的保护</li>
</ul>
<h3 id="参考-1"><a href="#参考-1" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://stackoverflow.com/questions/4493936/could-i-change-my-name-and-surname-in-all-previous-commits" target="_blank" rel="external">Could I change my name and surname in all previous commits?</a></li>
</ul>
<h2 id="迁移子分支至新仓库"><a href="#迁移子分支至新仓库" class="headerlink" title="迁移子分支至新仓库"></a>迁移子分支至新仓库</h2><h3 id="场景-2"><a href="#场景-2" class="headerlink" title="场景"></a>场景</h3><p>某个项目仓库中可能存在多个功能特性（features）分支，在一段时候后，基于产品功能规划和开发维护等方面的考虑，<br>需要将某些特性分支独立成新的项目或子项目，将其迁移到新的仓库中。</p>
<h3 id="操作-2"><a href="#操作-2" class="headerlink" title="操作"></a>操作</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Push 'feature-branch' to the branch 'master' (or others) of new repository</span></div><div class="line">git push url://to/new/repository.git feature-branch:master</div><div class="line"><span class="comment"># [Optional] Delete the 'feature-branch' from current repository</span></div><div class="line">git branch <span class="_">-d</span> feature-branch</div><div class="line"><span class="comment"># Clone codes from new repository</span></div><div class="line">git <span class="built_in">clone</span> url://to/new/repository.git feature-branch</div></pre></td></tr></table></figure>
<h3 id="参考-2"><a href="#参考-2" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://stackoverflow.com/questions/2227062/how-do-i-move-a-git-branch-out-into-its-own-repository" target="_blank" rel="external">How do I move a Git branch out into its own repository?</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 开发工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello world!]]></title>
      <url>/hello-world/</url>
      <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">System.out.println(<span class="string">"Hello world!"</span>);</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alert(<span class="string">'Hello world!'</span>);</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">echo</span> <span class="string">"Hello world!"</span></div></pre></td></tr></table></figure>
]]></content>
      
        
    </entry>
    
  
  
</search>
