<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[作恶行为清单]]></title>
      <url>/the-evil-behaviors/</url>
      <content type="html"><![CDATA[<blockquote>
<p>列举日常和网络中所发现的软件、应用、服务等的「作恶」行为，将其永久钉在「耻辱柱」上。有条件的或有候选方案的，应主动弃用之！<br>坚持开放、坚持自由。点击下载<a href="http://mirror.lihnidos.org/GNU/savannah/blug/fsfs-zh/fsfs-zh.pdf" target="_blank" rel="noopener">自由软件自由社会.pdf</a></p>
</blockquote>
<h2 id="为逼迫用户使用客户端而阉割Web端的基本功能"><a href="#为逼迫用户使用客户端而阉割Web端的基本功能" class="headerlink" title="为逼迫用户使用客户端而阉割Web端的基本功能"></a>为逼迫用户使用客户端而阉割Web端的基本功能</h2><ul>
<li>案例： <a href="https://2.taobao.com/" target="_blank" rel="noopener">闲鱼</a>Web端隐藏搜索框</li>
<li>来源： <a href="https://www.appinn.com/xianyu-search-box/" target="_blank" rel="noopener">https://www.appinn.com/xianyu-search-box/</a></li>
<li>评语： 若欲达KPI，必先「中二自宫」<a id="more"></a>
</li>
</ul>
<p><img src="/assets/images/the-evil-behaviors/xianyu-hide-itself-search-form-of-web-client.png" alt="闲鱼Web端隐藏搜索框截图@2017-12-05"></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[软件开发最佳实践]]></title>
      <url>/the-better-software-development-practice/</url>
      <content type="html"><![CDATA[<blockquote>
<p>The post isn’t finished yet, it will be updated anytime!</p>
</blockquote>
<a id="more"></a>
]]></content>
      
        <categories>
            
            <category> 开发规范 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[软件开发行为准则]]></title>
      <url>/the-software-development-criterion/</url>
      <content type="html"><![CDATA[<blockquote>
<p>The post isn’t finished yet, it will be updated anytime!</p>
</blockquote>
<ul>
<li>不是仅用户确认后的数据才算是「用户隐私」，任何与用户相关的数据都应该「默认」视为用户隐私，<u>不需要任何形式的确认</u>，<br>而只有经过用户确认和同意的数据方可用作其他用途，且前提必须是明确告知数据为何要做次用途，以及将被如何利用、涉及哪些风险等<a id="more"></a>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 开发规范 </category>
            
            <category> 职业道德 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 隐私 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[如何突破自己的瓶颈？]]></title>
      <url>/how-to-break-out-of-your-limit/</url>
      <content type="html"><![CDATA[<blockquote>
<p>The post isn’t finished yet, it will be updated anytime!</p>
</blockquote>
<ul>
<li>以旁观者角度审视自己</li>
<li>理性看待他人的评论、观点和建议，保持就事论事的态度，切忌带有个人情绪，更不要被别人带着走（影响个人情绪、怀疑个人价值观等等）<ul>
<li>若无法静心并保持客观，那就禁用评论，不与人争论，专注于自己的思考方向，但需多接触不同观点，及时调整，不可过于执念<a id="more"></a></li>
</ul>
</li>
<li>专注于探索自己的生活方式和方向，不羡慕别人的生活，先过好自己的<ul>
<li>时常在朋友圈、新闻、他人口中看到或听到某某光鲜亮丽、幸福美满、事业猛进，而自己依然处于迷茫、混沌、一人吃饱全家不饿的状态，心里倍感失落、感觉就是一loser，进而嫉妒别人，甚而诅咒他人</li>
<li>那你需要静下来分析，如何形成当前局面，自己真正需要的是什么，自己在生活的路上做了什么</li>
<li>别人都在幸福的路上忙碌奔波，而你却有如此闲心去妒嫉别人的生活？</li>
<li>人人都有自己的活法，也有不同的满足，找到属于自己的，并聚焦于此，为此而忙碌，心无杂念</li>
<li>以“出世”的态度去观察他人和自己，不要觉得自己过得不如意就希望全世界都得与你一起面对种种不如意，从他人的不幸中去寻找优越感，将会使自己越来越失败、愤恨、怀疑自己。不断战胜、超越自己才是正途</li>
</ul>
</li>
<li>对所见、所听、所接触的事、物、人，取其精华去其糟泊，吸收有用可取的方式，探索本质，获得处事之道<ul>
<li>有些人就是人生路上的“小怪兽”，有些人是良师益友</li>
</ul>
</li>
<li>随时准备两件事情，以避免当前事情完成后不知道该继续做什么的困境</li>
<li>准备一份阅读书籍列表，在无所事事时，避免无目的的刷网页，转而看书会更加有益</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 自我剖析 </category>
            
            <category> 人性探索 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 自我 </tag>
            
            <tag> 静心 </tag>
            
            <tag> 优越感 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git使用案例]]></title>
      <url>/git-usage-cases/</url>
      <content type="html"><![CDATA[<h2 id="拆分子目录到新仓库"><a href="#拆分子目录到新仓库" class="headerlink" title="拆分子目录到新仓库"></a>拆分子目录到新仓库</h2><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p>通常为便于项目开发和调试，开发前期会将多个组件放在同一仓库中，而当各个组件的功能结构和代码逐渐区域稳定后，<br>便需要将其拆分出来进行独立开发和管理，以便于与其他项目共享组件。</p>
<p>此时，不仅需要将组件所在目录内的代码全部拆分到单独的仓库，同时，还需要确保历史记录能够完整保留。</p>
<a id="more"></a>
<h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Clone the repository that contains the subfolder.</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/USERNAME/REPOSITORY-NAME</span><br><span class="line"><span class="built_in">cd</span> REPOSITORY-NAME</span><br><span class="line"></span><br><span class="line"><span class="comment"># To filter out the subfolder from the rest of the files in the repository</span></span><br><span class="line"><span class="comment">## FOLDER-NAME: The folder within your project that you'd like to create a separate repository from.</span></span><br><span class="line"><span class="comment">## BRANCH-NAME: The default branch for your current project, for example, 'master' or 'gh-pages'</span></span><br><span class="line">git filter-branch --prune-empty --subdirectory-filter FOLDER-NAME BRANCH-NAME</span><br><span class="line"></span><br><span class="line"><span class="comment"># Change the existing remote 'origin' (or other name) URL to the new repository URL</span></span><br><span class="line">git remote <span class="built_in">set</span>-url origin https://github.com/USERNAME/NEW-REPOSITORY-NAME.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># [Optional] Change BRANCH-NAME to the default branch (e.g. 'master') of the new repository</span></span><br><span class="line">git branch -m BRANCH-NAME master</span><br><span class="line"></span><br><span class="line"><span class="comment"># Push your changes to the new repository</span></span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>
<p><strong>注意</strong>：</p>
<ul>
<li>在第二步操作后，当前目录将会只剩下子目录中的文件</li>
<li>最好在新的目录中进行上述操作：可以直接clone，也可以从复制已有项目到其他目录</li>
</ul>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://help.github.com/articles/splitting-a-subfolder-out-into-a-new-repository/" target="_blank" rel="noopener">Splitting a subfolder out into a new repository</a></li>
</ul>
<h2 id="修改变更提交人的信息"><a href="#修改变更提交人的信息" class="headerlink" title="修改变更提交人的信息"></a>修改变更提交人的信息</h2><h3 id="场景-1"><a href="#场景-1" class="headerlink" title="场景"></a>场景</h3><p>基于项目长远发展考虑，将某个具有实用价值且吸引力极大的项目开源，<br>需要将项目从公司内部仓库开放到Github上，但相关开发人员在两个系统中所用帐号不一致，<br>为了便于issue交流以及PR提交，这时，需要更改历史中的提交人信息。</p>
<p>其实，大多数时候，很可能是要弃用内部仓库并将工作全部移到公共仓库时才有这么做的需求，其余情况并不需要这么做。</p>
<h3 id="操作-1"><a href="#操作-1" class="headerlink" title="操作"></a>操作</h3><ul>
<li>部分替换：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">git filter-branch --commit-filter \</span><br><span class="line">        <span class="string">'if [ "$GIT_AUTHOR_NAME" = "OldAuthor Name" ]; then \</span></span><br><span class="line"><span class="string">             export GIT_AUTHOR_NAME="Author Name"; \</span></span><br><span class="line"><span class="string">             export GIT_AUTHOR_EMAIL=authorEmail@example.com; \</span></span><br><span class="line"><span class="string">             export GIT_COMMITTER_NAME="Commmiter Name"; \</span></span><br><span class="line"><span class="string">             export GIT_COMMITTER_EMAIL=commiterEmail@example.com; \</span></span><br><span class="line"><span class="string">         fi; \</span></span><br><span class="line"><span class="string">         git commit-tree "$@" '</span></span><br><span class="line"><span class="comment"># Push to the branch 'master' of the existing repository</span></span><br><span class="line">git push --force origin master</span><br></pre></td></tr></table></figure>
<ul>
<li>全部替换：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git filter-branch --commit-filter \</span><br><span class="line">        <span class="string">'export GIT_AUTHOR_NAME="Author Name"; \</span></span><br><span class="line"><span class="string">         export GIT_AUTHOR_EMAIL=authorEmail@example.com; \</span></span><br><span class="line"><span class="string">         export GIT_COMMITTER_NAME="Commmiter Name"; \</span></span><br><span class="line"><span class="string">         export GIT_COMMITTER_EMAIL=commiterEmail@example.com; \</span></span><br><span class="line"><span class="string">         git commit-tree "$@" '</span></span><br><span class="line"><span class="comment"># Push to the branch 'master' of the existing repository</span></span><br><span class="line">git push --force origin master</span><br></pre></td></tr></table></figure>
<p><strong>注意</strong>：</p>
<ul>
<li>若出现类似<code>Cannot create a new backup. A previous backup already exists in refs/original/. Force overwriting the backup with -f</code>的异常提示，则需要在<code>filter-branch</code>命令中添加选项<code>-f</code>，即<code>git filter-branch -f</code>，以强制进行修改</li>
<li>如果提交的分支是受保护的，则在提交时会出现<code>remote: GitLab: You are not allowed to force push code to a protected branch on this project.</code>的错误信息，此时，需要调整仓库设置，临时取消对目标分支的保护</li>
</ul>
<h3 id="参考-1"><a href="#参考-1" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://stackoverflow.com/questions/4493936/could-i-change-my-name-and-surname-in-all-previous-commits" target="_blank" rel="noopener">Could I change my name and surname in all previous commits?</a></li>
</ul>
<h2 id="迁移子分支至新仓库"><a href="#迁移子分支至新仓库" class="headerlink" title="迁移子分支至新仓库"></a>迁移子分支至新仓库</h2><h3 id="场景-2"><a href="#场景-2" class="headerlink" title="场景"></a>场景</h3><p>某个项目仓库中可能存在多个功能特性（features）分支，在一段时候后，基于产品功能规划和开发维护等方面的考虑，<br>需要将某些特性分支独立成新的项目或子项目，将其迁移到新的仓库中。</p>
<h3 id="操作-2"><a href="#操作-2" class="headerlink" title="操作"></a>操作</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Push 'feature-branch' to the branch 'master' (or others) of new repository</span></span><br><span class="line">git push url://to/new/repository.git feature-branch:master</span><br><span class="line"></span><br><span class="line"><span class="comment"># [Optional] Delete the 'feature-branch' from current repository</span></span><br><span class="line">git branch -d feature-branch</span><br><span class="line"></span><br><span class="line"><span class="comment"># Clone codes from new repository</span></span><br><span class="line">git <span class="built_in">clone</span> url://to/new/repository.git feature-branch</span><br></pre></td></tr></table></figure>
<h3 id="参考-2"><a href="#参考-2" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://stackoverflow.com/questions/2227062/how-do-i-move-a-git-branch-out-into-its-own-repository" target="_blank" rel="noopener">How do I move a Git branch out into its own repository?</a></li>
</ul>
<h2 id="修改历史提交备注信息"><a href="#修改历史提交备注信息" class="headerlink" title="修改历史提交备注信息"></a>修改历史提交备注信息</h2><h3 id="场景-3"><a href="#场景-3" class="headerlink" title="场景"></a>场景</h3><p>在<a href="#拆分子目录到新仓库">拆分子目录</a>和<a href="#迁移子分支至新仓库">迁移子分支</a>两个场景中，<br>在新仓库中的历史提交记录的备注信息可能存在与项目不相关的信息或者包含原始项目中的一些敏感内容。<br>这个时候，就可能需要修改这些备注信息。</p>
<p>当然，也可能是因为发现以前的提交备注中包含错别字或者表达不清晰，为了避免对其他人产生误导或困惑，<br>将提交的备注信息予以纠正也是很有必要的。</p>
<h3 id="操作-3"><a href="#操作-3" class="headerlink" title="操作"></a>操作</h3><ul>
<li>获取提交ID并Rebase到该提交</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># List histories and get the commit id which should be modified</span></span><br><span class="line">git <span class="built_in">log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Rebase to 3 commits before the specified commit (e.g. 'ce0ac37c83')</span></span><br><span class="line">git rebase --interactive ce0ac37c83~3</span><br></pre></td></tr></table></figure>
<p><img src="/assets/images/git-usage-cases-rebase-to-target-commit.png" alt=""></p>
<ul>
<li>将提交所在行开始处的<code>pick</code>修改为<code>edit</code></li>
</ul>
<p><img src="/assets/images/git-usage-cases-change-history-commit.png" alt=""></p>
<ul>
<li>提交并应用修改</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># New commit message</span></span><br><span class="line">git commit --amend -m <span class="string">"fix that the dragging preview can not be shown"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Apply the changes and return to HEAD</span></span><br><span class="line">git rebase --<span class="built_in">continue</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Push to the branch 'master' of the existing repository</span></span><br><span class="line"><span class="comment">## Make sure that the remote branch 'master' is unprotected</span></span><br><span class="line">git push --force origin master</span><br></pre></td></tr></table></figure>
<p><strong>注意</strong>：</p>
<ul>
<li>如果需要放弃修改，则运行命令<code>git rebase --abort</code></li>
<li>若直接<code>rebase</code>到目标commit，则该提交不会显示在可修改清单内，故，需选择从其之前的第N个（e.g. <code>~3</code>）提交开始</li>
<li>若提交至非空的仓库，需确保目标分支不是受保护（<code>protected</code>）的</li>
<li>在应用修改后，git将从修改位置开始重新构建commit tree，因此，从该位置开始到HEAD的commit id均会发生变化，但原始commit tree依然存在，通过<code>git diff ce0ac37c83</code>等可看到该提交的变更情况</li>
</ul>
<h3 id="参考-3"><a href="#参考-3" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://stackoverflow.com/questions/179123/how-to-modify-existing-unpushed-commits" target="_blank" rel="noopener">How to modify existing, unpushed commits?</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 开发工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello world!]]></title>
      <url>/hello-world/</url>
      <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"Hello world!"</span>);</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="string">'Hello world!'</span>);</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"Hello world!"</span></span><br></pre></td></tr></table></figure>
]]></content>
      
        
    </entry>
    
  
  
</search>
